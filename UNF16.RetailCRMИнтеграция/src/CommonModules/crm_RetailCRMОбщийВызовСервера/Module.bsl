#Область ПрограммныйИнтерфейс

// ПолучитьЗначениеКонстанты(ИмяКонстанты)
// Параметры: 
// ИмяКонстнаты - Строка - строка, содержащая значение под определнныем имененм реквизита
// Возвращаемое значение: 
// Неопределено
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт
	
	Таб = ПолучитьКонстанты()["константы"];
	ЗначениеКонстанты = Таб.Найти(ИмяКонстанты, "Название");
	Если ЗначениеКонстанты <> Неопределено Тогда 
		ЗначениеКонстанты = ЗначениеКонстанты.Значение;
	КонецЕсли;
	Возврат ЗначениеКонстанты;
	
КонецФункции

// ПолучитьКонстанты()
// Возвращаемое значение:
// Структура - структура, содержащая имена метаданных обработки со значениями
Функция ПолучитьКонстанты() Экспорт
	
	Пользователь = Константы.crm_УчтенаяЗаписьСКонстантами.Получить();	
	Настройки = ХранилищеОбщихНастроек.Загрузить("retailCRM_константы"
												, "КонстантыОбмена"
												,
												, Пользователь);
	
	Если Настройки = Неопределено ИЛИ ТипЗнч(Настройки) <> Тип("Структура") Тогда
		ОбщегоНазначения.СообщитьПользователю("Настройки восстановить не удалось");
	КонецЕсли;
	 
	Возврат  Настройки;

КонецФункции

// УстановитьКонстанты(ТабКонстант)
// Параметры:
// ТабКонстанты - Структура - структура, содержащая имена метаданных обработки со значениями 
Процедура УстановитьКонстанты(ТабКонстант) Экспорт
	
	Пользователь = Константы.crm_УчтенаяЗаписьСКонстантами.Получить();	
	ДанныеСохранения = Новый Структура("Константы", 		ТабКонстант);
    ХранилищеОбщихНастроек.Сохранить("retailCRM_константы"
    								, "КонстантыОбмена"
    								, ДанныеСохранения
    								,
    								, Пользователь);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция JsonTest(Данные, ЗаписьJSON) Экспорт 
  
  Параметры = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто
  											,
  											,
  											, ЭкранированиеСимволовJSON.СимволыВнеASCII
  											,
  											,
  											, Истина
  											, 
  											, Истина);
  											
  ЗаписьJSON.УстановитьСтроку(Параметры);
  ЗаписатьJSON(ЗаписьJSON, Данные);
  
  Возврат ЗаписьJSON.Закрыть();
  
КонецФункции

Процедура ВыгрузитьExternalIdsТоваров(Док) Экспорт
	
	ИмяСервера 	= СокрЛП(ПолучитьЗначениеКонстанты("ИмяСервера"));
	ApiKey		= СокрЛП(ПолучитьЗначениеКонстанты("КлючCRM"));
	Offers_id = ПолучитьЗначениеКонстанты("Offers_id");
	
	Переменные = Новый Соответствие();
	Переменные.Вставить("apiKey", ApiKey);
	
	// поиск заказов по ИД (доп. сведение)
	СвойствоЗаказовМагазин = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьСвойство("site"
										, Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя);
	КодМагазина = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьЗначениеСвойстваОбъекта(Док.Ссылка
																						, СвойствоЗаказовМагазин);
	
	Переменные.Вставить("site", КодМагазина);	
	
	СвойствоЗаказов = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьСвойство("ИД"
										, Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя);
	НомерЗаказа 	= Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьЗначениеСвойстваОбъекта(Док.ссылка, СвойствоЗаказов);
	НомерЗаказа 	= СокрЛП(Формат(НомерЗаказа, "ЧГ=0"));
	
	Если НомерЗаказа = "" Тогда 
		ОбщегоНазначения.СообщитьПользователю("Заказы, созданные в 1С,"
														  + " не выгружаются в retailCRM в рамках шаблонного решения.");
		Возврат;
	КонецЕсли; 
	
	ExternalIds = ПолучитьТекущиеExternalIdsТоваров(НомерЗаказа);
	
	НоменклатураДоставки = ПолучитьЗначениеКонстанты("Доставка");
	
	// Идентификатор товара
	ИдентификаторТовара = ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентификаторТовара = Неопределено ИЛИ Не ЗначениеЗаполнено(ИдентификаторТовара) Тогда 
		ИдентификаторТовара = "Код";
	КонецЕсли;
		
	Товары = Новый Массив();			
	Для каждого стр Из Док["Запасы"] Цикл
		
		Если стр.Номенклатура = НоменклатураДоставки Тогда
			Продолжить;
		КонецЕсли;
		
		Товар = Новый Соответствие();			
		XmlID = ИдентификаторТовара(стр);
		
		Offer = Новый Соответствие();
		Offer.Вставить(Offers_id,		XmlID);
		Товар.Вставить("offer",			Offer);		
		
		Товар.Вставить("initialPrice",	стр.Цена);
		Товар.Вставить("quantity",		стр.Количество);
						
		ОбщаяСкидка = 0;
		
		Если стр.Количество > 0 Тогда 
			РучнаяСкидка = стр.СуммаСкидкиНаценки / стр.Количество;
			АвтоматическаяСкидка = стр.СуммаАвтоматическойСкидки / стр.Количество;
			ОбщаяСкидка = РучнаяСкидка + АвтоматическаяСкидка;
		КонецЕсли;
		
		Товар.Вставить("discountManualAmount",	?(ОбщаяСкидка < 0, 0, ОбщаяСкидка));
		Товар.Вставить("discountManualPercent", 0);       
		
		Если ЗначениеЗаполнено(стр.crm_idПозиции) Тогда 
			Товар.Вставить("id",	СокрЛП(Формат(стр.crm_idПозиции, "ЧГ=0")));	
		КонецЕсли;    
		
		Если ЗначениеЗаполнено(стр.crm_idПозиции) Тогда
			НайдЭлемент = ExternalIds.Получить(Число(стр.crm_idПозиции)); 
		КонецЕсли;
		
		ИдентификаторыПозиции = Новый Массив();
		
		Если ЗначениеЗаполнено(НайдЭлемент) Тогда
			ИдентификаторПозиции = Новый Соответствие();
	        ИдентификаторПозиции.Вставить("code",		"1C");		
			ИдентификаторПозиции.Вставить("value",	Строка(стр.КлючСвязи));
            ИдентификаторыПозиции.Добавить(ИдентификаторПозиции);

			ExternalId1c = НайдЭлемент.Получить("1C");
			Если ЗначениеЗаполнено(ExternalId1c) Тогда
				НайдЭлемент.Удалить("1C");
			КонецЕсли;
			
			Для каждого Элемент Из НайдЭлемент Цикл
				ИдентификаторПозиции = Новый Соответствие();
				ИдентификаторПозиции.Вставить("code",		Строка(Элемент["Ключ"]));		
				ИдентификаторПозиции.Вставить("value",	Строка(Элемент["Значение"]));
				ИдентификаторыПозиции.Добавить(ИдентификаторПозиции);
				
			КонецЦикла;
			
		Иначе
		
			ИдентификаторПозиции = Новый Соответствие();
			ИдентификаторПозиции.Вставить("code",		"1C");		
			ИдентификаторПозиции.Вставить("value",	Строка(стр.КлючСвязи));
			ИдентификаторыПозиции.Добавить(ИдентификаторПозиции);
			
		КонецЕсли; 
		
		Товар.Вставить("externalIds",			ИдентификаторыПозиции);
		
		Товары.Добавить(Товар);
		
	КонецЦикла;
	
	Заказ = Новый Соответствие();
	
	Заказ.Вставить("items", Товары);
	
	Переменные.Вставить("by",	 "id");	
	Переменные.Вставить("order", JsonTest(Заказ, Новый ЗаписьJSON));
	
	Ответ = HTTPзапросPOST(ИмяСервера 	, "/api/v5/orders/" + НомерЗаказа + "/edit", Переменные);
	
	Ответ = UnJSONTest(Ответ);
	
	Если Ответ["success"] = Истина Тогда
		ОбщегоНазначения.СообщитьПользователю("Идентификаторы обновлены в RetailCRM");
	Иначе 
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ИмяСервера");
		СтруктураПараметров.Вставить("КлючCRM");
		СтруктураПараметров.Вставить("КодМагазина");
		СтруктураПараметров.Вставить("ИдентификаторТовара");
		СтруктураПараметров.Вставить("НомерЗаказа");
		СтруктураПараметров.Вставить("Offers_id");
		СтруктураПараметров.Вставить("НоменклатураДоставки"); 
		
		СтруктураПараметров.ИмяСервера    	= ИмяСервера;
		СтруктураПараметров.КлючCRM    		= ApiKey;
		СтруктураПараметров.КодМагазина    	= КодМагазина;
		СтруктураПараметров.ИдентификаторТовара	= ИдентификаторТовара;
		СтруктураПараметров.НомерЗаказа		= НомерЗаказа;
		СтруктураПараметров.Offers_id		= Offers_id;
		СтруктураПараметров.НоменклатураДоставки			= НоменклатураДоставки;
		// обработать ошибку 
		ExternalIds = Истина;
		ОбработатьОтветВыгрузкиЗаказа(Ответ, Док, СтруктураПараметров, ExternalIds);
		ОбщегоНазначения.СообщитьПользователю("Трудности с обновлением идентификаторов: " 
											+ Док 
											+ " в retailCRM. Идентификаторы не обновлены", СтатусСообщения.Важное);	
	КонецЕсли; 
	
КонецПроцедуры    

Функция JSON(Значение, Форматировать = Ложь) Экспорт
	
	Возврат ФорматированныйJSON(Значение);
	
КонецФункции

Функция UnJSONTest(СтрокаДанных) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаДанных);
	Структура = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();

	Возврат Структура;
	
КонецФункции

Процедура ВыгрузитьЧекВCRM(Док, Отменить = Ложь, ДанныеПЛ = Неопределено) Экспорт
		
	Если Док.Статус <> Перечисления.СтатусыЧековККМ.Пробит Тогда 
		Возврат;
	КонецЕсли;
	
	// проверяем Возврат по чеку, если он был, то не выгружаем чек
	// отмена заказа
	ЧекВозврат = ВернутьЧекВозврат(Док.Ссылка);
	Если ЗначениеЗаполнено(ЧекВозврат) Тогда 
		ОбщегоНазначения.СообщитьПользователю("По этому чеку был Возврат! Выгрузка чека невозможна!");
		Возврат;
	КонецЕсли;
	
	НомерЧека 	= СокрЛП(Формат(Док.crm_idЧека, "ЧГ=0"));
	Если ЗначениеЗаполнено(НомерЧека) Тогда 
		ОбщегоНазначения.СообщитьПользователю("Чек уже был выгружен в retailCRM");
		Возврат;
	КонецЕсли;
	
	ИмяСервера 	= СокрЛП(ПолучитьЗначениеКонстанты("ИмяСервера"));
	ApiKey		= СокрЛП(ПолучитьЗначениеКонстанты("КлючCRM"));
	Offers_id = ПолучитьЗначениеКонстанты("Offers_id");
	
	Переменные = Новый Соответствие();
	Переменные.Вставить("apiKey", ApiKey);
	
	КодМагазина = ПолучитьЗначениеКонстанты("КодМагазина");
	
	Если ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда
		СписокОрганизаций = ПолучитьЗначениеКонстанты("СоответствиеОрганизаций");
		НайденнаяСтрока = СписокОрганизаций.СтрНайти(Док.Организация, "Организация"); 
		Если НайденнаяСтрока <> Неопределено Тогда
			КодМагазина = НайденнаяСтрока.КодМагазина;                                         
		КонецЕсли;
	КонецЕсли;

	Переменные.Вставить("site", КодМагазина);	
	
	// Идентификатор товара
	ИдентификаторТовара = ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентификаторТовара = Неопределено ИЛИ Не ЗначениеЗаполнено(ИдентификаторТовара) Тогда 
		ИдентификаторТовара = "Код";
	КонецЕсли;
	//

	Товары = Новый Массив();
	НачислитьБаллы = Истина;
	ОбщаяСкидка = 0;
	
	Для каждого стр Из Док["Запасы"] Цикл
		
		Товар = Новый Соответствие();
		
		XmlID = ИдентификаторТовара(стр);
		
		Offer = Новый Соответствие();
		
		Offer.Вставить(Offers_id,    	Перекодировка(XmlID));
		Товар.Вставить("offer",			Offer);		
		Товар.Вставить("productName",	Перекодировка(стр.Номенклатура.Наименование));
		Товар.Вставить("initialPrice",	стр.Цена);
		Товар.Вставить("quantity",		стр.Количество);
		
		РучнаяСкидка = стр.СуммаСкидкиНаценки / стр.Количество; 
		АвтоматическаяСкидка = стр.СуммаАвтоматическойСкидки / стр.Количество;
		ОбщаяСкидка = РучнаяСкидка + АвтоматическаяСкидка;
		
		Товар.Вставить("discountManualAmount", ?(ОбщаяСкидка = 0, 0, ОбщаяСкидка));
		Товар.Вставить("discountManualPercent", 0);
		Товар.Вставить("status", "sold");
		Товары.Добавить(Товар);
		
	КонецЦикла; 
	
	Если Не ЗначениеЗаполнено(Док.crm_idКлиента) Тогда
		НачислитьБаллы = Ложь;	
	КонецЕсли;
	
	Если ПолучитьЗначениеКонстанты("ПЛНачислитьСоСписанием") = Ложь Тогда
		НачислитьБаллы = Ложь;
	КонецЕсли;

	Заказ = Новый Соответствие();
	
	Если ЗначениеЗаполнено(Док.crm_idКлиента) Тогда
		
		ФИО = ?(ЗначениеЗаполнено(Док.Контрагент.Наименование), СокрЛП(Док.Контрагент.Наименование), "");
		Фамилия  = ВыделитьСлово(ФИО, 1);
		Имя      = ВыделитьСлово(ФИО, 2);
		Отчество = ВыделитьСлово(ФИО, 3);
		
		Заказ.Вставить("lastName", 	 Перекодировка(СокрЛП(Фамилия)));
		Заказ.Вставить("firstName",  Перекодировка(СокрЛП(Имя)));
		Заказ.Вставить("patronymic", Перекодировка(СокрЛП(Отчество)));
		
		Если ЗначениеЗаполнено(Док.crm_Телефон) Тогда 
			Заказ.Вставить("phone", Док.crm_Телефон);
		КонецЕсли;
		
		ДанныеКлиента = Новый Соответствие;
		ДанныеКлиента.Вставить("id", 	Формат(Док.crm_idКлиента, "ЧГ=0"));
		
	Иначе
		
		Заказ.Вставить("lastName", 	 "");
		Заказ.Вставить("firstName",  Перекодировка("Розничная продажа"));
		Заказ.Вставить("patronymic", "");
		
		ДанныеКлиента = Новый Соответствие; 
		ClientID = СокрЛП(ПолучитьЗначениеКонстанты("ИдКлиентаПоУмолчанию"));
		Если ЗначениеЗаполнено(ClientID) Тогда 
			ДанныеКлиента.Вставить("id", Формат(ClientID, "ЧГ=0"));
		КонецЕсли;
		
	КонецЕсли;	
	
	Заказ.Вставить("customer", 		  ДанныеКлиента);
	Заказ.Вставить("items", 		  Товары);
	Заказ.Вставить("createdAt",		  ДатаВремяДляCRM(Док.Дата));
	Заказ.Вставить("customerComment", Перекодировка(СокрЛП(Док.Комментарий)));
	Заказ.Вставить("managerComment",  "");	
	Заказ.Вставить("discountManualPercent", 0);
	Заказ.Вставить("discountManualAmount", 0);
	
	Если НачислитьБаллы Тогда
		Заказ.Вставить("privilegeType", "loyalty_level");	
	Иначе
		Заказ.Вставить("privilegeType", "none");
		Заказ.Вставить("status", "complete");
	КонецЕсли;
	
	// Менеджер
	Если ЗначениеЗаполнено(Док.Ответственный) Тогда  
		СписокМенеджеров = ПолучитьЗначениеКонстанты("СоответствиеМенеджеров");
		НайденнаяСтрока = СписокМенеджеров.СтрНайти(Док.Ответственный, "Менеджер"); 
		Если НайденнаяСтрока <> Неопределено И Не НайденнаяСтрока.ИД = 0 Тогда
			Заказ.Вставить("managerId", НайденнаяСтрока.ИД);	
		КонецЕсли;
	КонецЕсли;

	Заказ.Вставить("orderType",	   "eshop-individual");    
	Заказ.Вставить("orderMethod",  СокрЛП(ПолучитьЗначениеКонстанты("СпособОформленияРозница")));
	
	// Передача оплат по заказу
	Оплаты = Новый Массив();  
	
	Для каждого Оплата Из Док.БезналичнаяОплата Цикл
		Если Оплата.ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта Тогда
			Платеж = Новый Соответствие();
			Платеж.Вставить("amount", Формат(Оплата.Сумма, "ЧРД=.; ЧГ=0"));
				
			СписокТиповОплат = ПолучитьЗначениеКонстанты("СоответствиеТиповОплат");
			ТипыОплат		 = СписокТиповОплат.СтрНайти(Оплата.ВидОплаты, "ТипОплатыРозница");
		    Если ТипыОплат <> Неопределено Тогда
				КодТипаОплаты = ТипыОплат.КодCRM;                                         
			 
				Платеж.Вставить("type",			КодТипаОплаты);
				Платеж.Вставить("status",		"paid");
				Оплаты.Добавить(Платеж);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;   
	
	Если Док.ПолученоНаличными <> 0 Тогда 
		Платеж = Новый Соответствие();
		Платеж.Вставить("amount", Формат(Док.ПолученоНаличными, "ЧРД=.; ЧГ=0"));
			
		СписокТиповОплат = ПолучитьЗначениеКонстанты("СоответствиеТиповОплат");
		ТипыОплат		 = СписокТиповОплат.СтрНайти(Истина, "НаличнаяОплатаРозница");
	    Если ТипыОплат <> Неопределено Тогда
			КодТипаОплаты = ТипыОплат.КодCRM;                                         
		 
			Платеж.Вставить("type",			КодТипаОплаты);
			Платеж.Вставить("status",		"paid");
			Оплаты.Добавить(Платеж);
		КонецЕсли;
	
	КонецЕсли;
	
	Заказ.Вставить("payments",		Оплаты);
	
	Переменные.Вставить("order", JSON(Заказ));
			
	Ответ = HTTPзапросPOST(ИмяСервера, "/api/v5/orders/create", Переменные);
	
	Если СтрНайти(Ответ, """success"":true") > 0 Тогда
		
		ИДЗаказа = 0;
		Ответ = UnJSONTest(Ответ);
		
		ИДЗаказа = Ответ["id"];
		ИДЗаказа = Число(ИДЗаказа);

		// Записать ИД заказа
		Если ИДЗаказа <> 0 Тогда
			Если ТипЗнч(Док) = Тип("ДокументОбъект.ЧекККМ") Тогда 
				Док.crm_idЧека = ИДЗаказа;
				Док.Записать();
			Иначе 
				ЧекОбъект = Док.ПолучитьОбъект();
				ЧекОбъект.crm_idЧека = ИДЗаказа;
				ЧекОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		
		// добавить проверку на участие в ПЛ
		Если ЗначениеЗаполнено(ИДЗаказа) И ЗначениеЗаполнено(Док.crm_idКлиента) И Док.crm_БонусныеБаллыПЛ > 0 Тогда 
			Ответ = СписатьБаллыВCRM(Док, ИДЗаказа);                                                
		КонецЕсли;
		
		Если НачислитьБаллы Тогда
			Заказ = Новый Соответствие;
			Заказ.Вставить("status",	"complete"); 	
			Переменные.Вставить("by",	 "id");	
			Переменные.Вставить("order", JSON(Заказ));
			
			Попытка
				Ответ = HTTPзапросPOST(ИмяСервера, "/api/v5/orders/" + Формат(ИДЗаказа, "ЧГ=0") + "/edit", Переменные);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("Розница RCRM"
										, УровеньЖурналаРегистрации.Ошибка
										,
										,
										, ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначения.СообщитьПользователю("Трудности с выгрузкой чека: " 
												+ Док + " в retailCRM. ЧекККМ не выгружен");
		
	КонецЕсли; 	
КонецПроцедуры

Процедура ВыгрузитьЧекВозвратВCRM(ДокВозврат) Экспорт

	Если ДокВозврат.Статус <> Перечисления.СтатусыЧековККМ.Пробит Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокВозврат.ЧекККМ) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументЧекККМ = ДокВозврат.ЧекККМ.ПолучитьОбъект();
	
	ТЗТовары = ДокументЧекККМ.Товары.Выгрузить();
	ТЗЧек = ТЗТовары.Скопировать();
	ТЗЧек.Свернуть("Номенклатура, Характеристика, Цена", "Количество, СуммаРучнойСкидки");
	ТЗЧек.Колонки.Добавить("Возврат");
	ТЗЧек.Колонки.Добавить("СкидкаНаЕдиницуТовара");
	
	Для Каждого стрВозврат Из ДокВозврат.Товары Цикл 
		// в чеке ищем строки с товарами Из возврата
		Если ЗначениеЗаполнено(стрВозврат.Характеристика) Тогда 
			НайденСтроки = ТЗЧек.НайтиСтроки(Новый Структура("Характеристика", стрВозврат.Характеристика));
		Иначе
			НайденСтроки = ТЗЧек.НайтиСтроки(Новый Структура("Номенклатура", стрВозврат.Номенклатура));  
		КонецЕсли;
			
		Если НайденСтроки <> Неопределено Тогда 
			// если строк несколько то нужно получить общее количество и сравнить с тем что в возврате
			Для Каждого стр Из НайденСтроки Цикл
				Если стр.Количество = стрВозврат.Количество Тогда
					стр.Возврат = "returned";
					стр.СкидкаНаЕдиницуТовара = стр.Цена - стрВозврат.Цена;
				ИначеЕсли стр.Количество > стрВозврат.Количество Тогда
					стр.Возврат = "chastichnyi-vozvrat";
					стр.Количество = стр.Количество - стрВозврат.Количество;
					стр.СкидкаНаЕдиницуТовара = стр.Цена - стрВозврат.Цена;
				ИначеЕсли стр.Количество < стрВозврат.Количество Тогда 
					ОбщегоНазначения.СообщитьПользователю("Как можно вернуть больше чем купили?");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	ИмяСервера 	= СокрЛП(ПолучитьЗначениеКонстанты("ИмяСервера"));
	ApiKey		= СокрЛП(ПолучитьЗначениеКонстанты("КлючCRM"));
	
	Переменные = Новый Соответствие();
	Переменные.Вставить("apiKey", ApiKey);
	
	КодМагазина = ПолучитьЗначениеКонстанты("КодМагазина");
	
	Если ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда
			СписокОрганизаций = ПолучитьЗначениеКонстанты("СоответствиеОрганизаций");
			НайденнаяСтрока = СписокОрганизаций.СтрНайти(ДокументЧекККМ.Организация, "Организация"); 
			Если НайденнаяСтрока <> Неопределено Тогда
				КодМагазина = НайденнаяСтрока.КодМагазина;                                         
			КонецЕсли;
	КонецЕсли;

	Переменные.Вставить("site", КодМагазина);	
	
	НомерЗаказа 	= СокрЛП(Формат(ДокументЧекККМ.crm_idЧека, "ЧГ=0"));

	Если НЕ ЗначениеЗаполнено(НомерЗаказа) Тогда 
		ОбщегоНазначения.СообщитьПользователю("ЧекККМ отсутствует в RetailCRM");
		Возврат;
	КонецЕсли;
	
	// Идентификатор товара
	ИдентификаторТовара = ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентификаторТовара = Неопределено ИЛИ Не ЗначениеЗаполнено(ИдентификаторТовара) Тогда 
		ИдентификаторТовара = "Код";
	КонецЕсли;

	Товары = Новый Массив();			
	Для каждого стр Из ТЗЧек Цикл
		
		Товар = Новый Соответствие();		
		XmlID = ИдентификаторТовара(стр);

		Offer = Новый Соответствие();
		Offer.Вставить("externalId",    Перекодировка(XmlID));
		Товар.Вставить("offer",			Offer);		
		Товар.Вставить("productName",	Перекодировка(стр.Номенклатура.Наименование));
		Товар.Вставить("initialPrice",	стр.Цена);
		Товар.Вставить("quantity",		стр.Количество);
		
		Статус = "";
		Если ЗначениеЗаполнено(стр.Возврат) Тогда
			Статус = стр.Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Статус) Тогда
			Товар.Вставить("status",		Статус);
		КонецЕсли;
		
		РучнаяСкидка = стр.СкидкаНаЕдиницуТовара;
		Товар.Вставить("discountManualAmount",	?(РучнаяСкидка < 0, 0, РучнаяСкидка));
		Товар.Вставить("discountManualPercent", 0);
		
		Товары.Добавить(Товар);
		
	КонецЦикла;
	
	Заказ = Новый Соответствие();
	
	Заказ.Вставить("items", 		  Товары);
	
	ВернутьЗаказ = Истина;
	Для Каждого Стр Из ТЗЧек Цикл
		Если стр.Возврат = Неопределено ИЛИ стр.Возврат <> "returned" Тогда
			ВернутьЗаказ = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Статус заказа
	Если ВернутьЗаказ Тогда 
		Статус = "returned";
	Иначе 
		Статус = "partial-refund";
	КонецЕсли;
	
	Если Статус <> "" Тогда
		Заказ.Вставить("status", 		Статус);
	КонецЕсли;

	Заказ.Вставить("discountManualPercent", 0);
	Заказ.Вставить("discountManualAmount", 0);
	
	Переменные.Вставить("order", JSON(Заказ));
	Переменные.Вставить("by",		"id");
	
	Ответ = HTTPзапросPOST(ИмяСервера, "/api/v5/orders/" + НомерЗаказа + "/edit", Переменные);
	
	Если СтрНайти(Ответ, """success"":true") > 0 Тогда
		ОбщегоНазначения.СообщитьПользователю("Чек возврата успешно выгружен в retailCRM");
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Трудности с выгрузкой чека: " 
												+ ДокВозврат 
												+ " в retailCRM. ЧекККМ не выгружен");	
	КонецЕсли;
	
	// редактируем оплату
	ОтветОплата = HTTPзапросGET(ИмяСервера, "/api/v5/orders?filter[ids][]=" + НомерЗаказа  + "&apiKey=" + ApiKey);
	ОтветОплата = UnJSONTest(ОтветОплата);
	
	МассивЗаказов = Новый Массив();
	Для Каждого ЗаказО Из ОтветОплата["orders"] Цикл
		МассивЗаказов.Добавить(ЗаказО);
	КонецЦикла;
	
	Для Каждого зак Из МассивЗаказов Цикл 
		
		Для Каждого стрОпл Из зак["payments"] Цикл       
			// изменяем сумму оплаты
			перм = Новый Соответствие();
			перм.Вставить("apiKey", ApiKey);
			перм.Вставить("site",	КодМагазина);
			
			Платеж = Новый Соответствие();
			Платеж.Вставить("amount",		ДокументЧекККМ.СуммаДокумента - ДокВозврат.СуммаДокумента);
			
			ПлатежЗ = Новый Соответствие();
			ПлатежЗ.Вставить("id",			НомерЗаказа);
			Платеж.Вставить("order", 		ПлатежЗ);
			
			перм.Вставить("payment",	JSON(Платеж));
			
			ответ2 = HTTPзапросPOST(ИмяСервера, "/api/v5/orders/payments/" 
									+ Формат(стрОпл.Значение["id"], "ЧГ=0") + "/edit", перм);
									
			Если СтрНайти(Ответ2, "success"":true") > 0 Тогда
				ОбщегоНазначения.СообщитьПользователю("Изменен платеж № "  + стрОпл.Значение["id"] + " в RetailCRM");	
			Иначе
				ОбщегоНазначения.СообщитьПользователю("Проблемы с изменение оплаты в RetailCRM");
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция СписатьБаллыВCRM(Док, ИДЗаказа) Экспорт
	
	ИмяСервера 	= СокрЛП(ПолучитьЗначениеКонстанты("ИмяСервера"));
	ApiKey		= СокрЛП(ПолучитьЗначениеКонстанты("КлючCRM"));
	КодМагазина = СокрЛП(ПолучитьЗначениеКонстанты("КодМагазина"));
	
	Переменные = Новый Соответствие();
	Переменные.Вставить("apiKey", ApiKey);
	Переменные.Вставить("site", КодМагазина);
	Переменные.Вставить("bonuses", Формат(Число(Док.crm_БонусныеБаллыПЛ), "ЧГ=0"));
	Заказ = Новый Соответствие();
	Заказ.Вставить("id", 		Формат(Число(ИДЗаказа), "ЧГ=0"));
	
	Переменные.Вставить("order", JSON(Заказ));
	
	Ответ = HTTPзапросPOST(ИмяСервера, "/api/v5/orders/loyalty/apply", Переменные);
	
	Если СтрНайти(Ответ, """success"":true") > 0 Тогда
		Ответ = UnJSONTest(Ответ);
		Возврат Ответ;
	КонецЕсли;

КонецФункции

Функция ВыделитьСлово(ИсходнаяСтрока, Позиция) Экспорт 
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = СтрНайти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	Если Позиция = 3 Тогда 
		ВыделенноеСлово = СокрЛП(Буфер);
	Иначе 
		ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
		ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	КонецЕсли;
	
	Возврат ВыделенноеСлово;
	
КонецФункции

Функция Перекодировка(Текст) Экспорт
	
	Кодировать = Ложь;
	
	ИсходнаяСтрока = СокрЛП(Текст);
	
	Если СтрДлина(ИсходнаяСтрока) > 0 Тогда
		
		Для Сч = 1 По СтрДлина(ИсходнаяСтрока) Цикл
			Символ = НРег(Сред(ИсходнаяСтрока, Сч, 1));
			
			Если СтрНайти("абвгдеёжзийклмнопрстуфхцчшщъыьэюя", Символ) ИЛИ 
									СтрНайти(ИсходнаяСтрока, Символ(160)) Тогда
				Кодировать = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Кодировать Тогда 
		
		НомПозиции 	= 0;
		РезТекст 	= "";
		
		ДлинаТекста = СтрДлина(Текст);
		
		Пока НомПозиции < ДлинаТекста Цикл
			
			ТекущийСимвол = Сред(Текст, НомПозиции + 1, 1);
			
			КодСимвола = СокрЛП(Из_10(КодСимвола(ТекущийСимвол), 16));
			
			Пока СтрДлина(КодСимвола) < 4 Цикл
				КодСимвола = "0" + КодСимвола;
			КонецЦикла;
			
			ПерекодированныйСимвол = "\u" + КодСимвола;
			
			РезТекст = РезТекст + ПерекодированныйСимвол;
			
			НомПозиции = НомПозиции + 1;
			
		КонецЦикла; 
		
		Возврат РезТекст;
		
	Иначе 
		Возврат Текст;
	КонецЕсли;
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка
									   , Знач Разделитель = ","
									   , Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция ИдентификаторТовара(СтруктураНоменклатуры) Экспорт
	
	ИдентификаторТовара = ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
			
			XmlID = СокрЛП(СтруктураНоменклатуры.Номенклатура.УникальныйИдентификатор());
			XmlID = ?(ЗначениеЗаполнено(СтруктураНоменклатуры.Характеристика), 
			XmlID + "#" + СокрЛП(СтруктураНоменклатуры.Характеристика.УникальныйИдентификатор()), XmlID);

	Иначе 
			
			Если ИдентификаторТовара = "Код" Тогда
				XmlID = СокрЛП(СтруктураНоменклатуры.Номенклатура.Код);
			ИначеЕсли ИдентификаторТовара = "Артикул" Тогда
				XmlID	= СокрЛП(СтруктураНоменклатуры.Номенклатура.Артикул);
			Иначе 
				XmlID	= СокрЛП(СтруктураНоменклатуры.Номенклатура.УникальныйИдентификатор());	
			КонецЕсли;
			
	КонецЕсли;
	
	Возврат XmlID;

КонецФункции

Функция ПреобразоватьДатуCRM(Дата) Экспорт
	
	Если Дата = Дата(1, 1, 1) ИЛИ Дата = "" ИЛИ  ТипЗнч(Дата) = Тип("Дата") Тогда 
		Дата1С = Дата;
	Иначе
		Дата = Сред(Дата, 0, 4) + Сред(Дата, 6, 2) + Сред(Дата, 9, 2) 
				+ Сред(Дата, 12, 2) + Сред(Дата, 15, 2) + Сред(Дата, 18, 2);
		Дата1С = Дата(Дата);
	КонецЕсли;
	
	Возврат Дата1С;
	
КонецФункции

Функция ДатаВремяДляCRM(ПреобразуемаяДата, СоВременем = Истина) Экспорт
		
	Если ТипЗнч(ПреобразуемаяДата) <> Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемаяДата = "" + Формат(Год(ПреобразуемаяДата), "ЧГ=0") + 
	"-" + ?(СтрДлина(Месяц(ПреобразуемаяДата)) = 1, "0", "") 	+ Месяц(ПреобразуемаяДата)	+ 
	"-" + ?(СтрДлина(День(ПреобразуемаяДата)) = 1, "0", "") 	+ День(ПреобразуемаяДата);
	
	Если СоВременем Тогда
		ВозвращаемаяДата = ВозвращаемаяДата + " " + 
		?(СтрДлина(Час(ПреобразуемаяДата)) 		= 1, "0", "") 	+ Час(ПреобразуемаяДата) 	+ ":" + 
		?(СтрДлина(Минута(ПреобразуемаяДата)) 	= 1, "0", "") 	+ Минута(ПреобразуемаяДата) + ":" + 
		?(СтрДлина(Секунда(ПреобразуемаяДата)) 	= 1, "0", "") 	+ Секунда(ПреобразуемаяДата);
	КонецЕсли;
	
	Возврат ВозвращаемаяДата;

КонецФункции

Процедура ВыгрузитьЗаказВCRM(Док, Отменить = Ложь, ПараметрыВыгрузки) Экспорт
	
	Если ПолучитьЗначениеКонстанты("ВыгружатьЗаказы") = Ложь Тогда
		Возврат;	
	КонецЕсли;    
	
	ИмяСервера 	= СокрЛП(ПолучитьЗначениеКонстанты("ИмяСервера"));
	ApiKey		= СокрЛП(ПолучитьЗначениеКонстанты("КлючCRM"));
	Offers_id = ПолучитьЗначениеКонстанты("Offers_id");

	Переменные = Новый Соответствие();
	Переменные.Вставить("apiKey", ApiKey);
	
	// поиск заказов по ИД (доп. сведение)
	СвойствоЗаказовМагазин = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьСвойство("site"
										, Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя);
	КодМагазина = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьЗначениеСвойстваОбъекта(Док.Ссылка, СвойствоЗаказовМагазин);
	
	Переменные.Вставить("site", КодМагазина);	
	
	СвойствоЗаказов = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьСвойство("ИД"
										, Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя);
	НомерЗаказа 	= Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьЗначениеСвойстваОбъекта(Док.ссылка, СвойствоЗаказов);
	НомерЗаказа 	= СокрЛП(Формат(НомерЗаказа, "ЧГ=0")); 
			
	Если НомерЗаказа = "" Тогда 
		ОбщегоНазначения.СообщитьПользователю("Заказы, созданные в 1С, не выгружаются в retailCRM.");
		Возврат;
	КонецЕсли;
		
	// Идентификатор товара
	ИдентификаторТовара = ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентификаторТовара = Неопределено ИЛИ Не ЗначениеЗаполнено(ИдентификаторТовара) Тогда 
		ИдентификаторТовара = "Код";
	КонецЕсли;

	Товары = Новый Массив();			
	Для каждого стр Из Док["Запасы"] Цикл
				
		Товар = Новый Соответствие();
		
		XmlID = ИдентификаторТовара(стр);	

		Offer = Новый Соответствие();
		Offer.Вставить(Offers_id, 		XmlID); 
		Товар.Вставить("offer",			Offer);		
		Товар.Вставить("productName",	Перекодировка(стр.Номенклатура.Наименование));
		Товар.Вставить("initialPrice",	стр.Цена);
		Товар.Вставить("quantity",		стр.Количество);
				
		// передача признака отмены строки
		Если Отменить = Истина Тогда 
			Статус = "failure";
			Товар.Вставить("status", Статус);
		КонецЕсли;
		
		РучнаяСкидка = стр.СуммаСкидкиНаценки / стр.Количество; 
		АвтоматическаяСкидка = стр.СуммаАвтоматическойСкидки / стр.Количество;
		ОбщаяСкидка = РучнаяСкидка + АвтоматическаяСкидка; 
		
		Товар.Вставить("discountManualAmount",	?(ОбщаяСкидка < 0, 0, ОбщаяСкидка));
		Товар.Вставить("discountManualPercent", 0);       
		
		Товары.Добавить(Товар);
		
	КонецЦикла;
	
	Заказ = Новый Соответствие();
	
	Заказ.Вставить("items", Товары);
	
	Если Док.ДатаОтгрузки <> Неопределено ИЛИ Док.ДатаОтгрузки <> "" ИЛИ Док.ДатаОтгрузки <> Дата(1, 1, 1) Тогда 
		Заказ.Вставить("shipmentDate", Формат(Док.ДатаОтгрузки, "ДФ=yyyy-MM-dd"));
	КонецЕсли;
				
	Если Отменить = Истина Тогда
		Заказ.Вставить("shipped", False);
	КонецЕсли;
	
	Если ПараметрыВыгрузки["ВыгрузкаСтатусаЗаказа"] Тогда
		Статусы = ПолучитьЗначениеКонстанты("Статусы");
		Если типзнч(Статусы) = тип("ТаблицаЗначений") Тогда
			Статус = Статусы.НайтиСтроки(Новый Структура("СостояниеЗаказа", Док.СостояниеЗаказа));
			Если Статус.Количество() <> 0 Тогда
				Заказ.Вставить("status",	Статус[0].Название);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки["ВыгрузкаПодРезервирование"] Тогда
		Если ПараметрыВыгрузки["ЕстьТоварыКПошиву"]  Тогда
		 	Заказ.Вставить("status", "utochnit-nalichie");   
		Иначе
			Если ПараметрыВыгрузки["ВыгрузитьСтатусНаличия"] Тогда 
				Заказ.Вставить("status", "nalichie-podtverzhdeno");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Переменные.Вставить("by",	 "id");	
	Переменные.Вставить("order", JSON(Заказ));
	
	Ответ = HTTPзапросPOST(ИмяСервера 	, "/api/v5/orders/" + НомерЗаказа + "/edit", Переменные);
	
	Если СтрНайти(Ответ, """success"":true") > 0 Тогда
		ОбщегоНазначения.СообщитьПользователю("Заказ успешно выгружен в retailCRM");
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Трудности с выгрузкой документа: " 
												+ Док 
												+ " в retailCRM. Заказ не выгружен", СтатусСообщения.Важное);	
	КонецЕсли; 
	
КонецПроцедуры 

Процедура ВыгрузитьСтатусЗаказВCRM(Док, СтруктураДанныхВыгрузки = Неопределено) Экспорт 
	
	Если ПолучитьЗначениеКонстанты("ВыгружатьЗаказы") = Ложь Тогда
		Возврат;	
	КонецЕсли;    
	
	ИмяСервера 	= СокрЛП(ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(ПолучитьЗначениеКонстанты("КлючCRM"));

	Переменные = Новый Соответствие();
	Переменные.Вставить("apiKey", КлючCRM);
	
	// поиск заказов по ИД (доп. сведение)
	СвойствоСайт = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьСвойство("site"
										, Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя);
	СвойствоИД = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьСвойство("ИД"
										, Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя);
	
	Заказ = Новый Соответствие();
	
	Если типзнч(Док) = тип("ДокументСсылка.ЗаказНаПроизводство") Тогда  
		ЗаказПокупателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Док,"ЗаказПокупателя");
		Если ЗаказПокупателя <> Документы.ЗаказПокупателя.ПустаяСсылка() Тогда
			
			КодМагазина = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьЗначениеСвойстваОбъекта(ЗаказПокупателя, СвойствоСайт);
			НомерЗаказа = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьЗначениеСвойстваОбъекта(ЗаказПокупателя, СвойствоИД);
			НомерЗаказа = СокрЛП(Формат(НомерЗаказа, "ЧГ=0"));
			
			Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Док, "СостояниеЗаказа, ВариантЗавершения");
			
			Если Структура.СостояниеЗаказа <> Справочники.СостоянияЗаказовНаПроизводство.Завершен Тогда
			 	Заказ.Вставить("status", "peredano-v-proizvodstvo");
			ИначеЕсли Структура.СостояниеЗаказа = Справочники.СостоянияЗаказовНаПроизводство.Завершен И
					Структура.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно Тогда
					
				Заказ.Вставить("status", "peredan-v-komplektatsiiu"); 
			КонецЕсли;
			
		Иначе
			Возврат;
		КонецЕсли;
						
	КонецЕсли;
		
	Если НомерЗаказа = "" Тогда 
		ОбщегоНазначения.СообщитьПользователю("Заказы, созданные в 1С, не выгружаются в retailCRM.");
		Возврат;
	КонецЕсли;
	
	Переменные.Вставить("site", КодМагазина);
	Переменные.Вставить("by",	 "id");	
	Переменные.Вставить("order", JSON(Заказ));
	
	Ответ = HTTPзапросPOST(ИмяСервера 	, "/api/v5/orders/" + НомерЗаказа + "/edit", Переменные);
	
	Если СтрНайти(Ответ, """success"":true") > 0 Тогда
		ОбщегоНазначения.СообщитьПользователю("Заказ успешно выгружен в retailCRM");
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Трудности с выгрузкой документа: " + Док + " в retailCRM. Заказ не выгружен");	
	КонецЕсли; 

КонецПроцедуры 

Функция Из_10(Значение = 0, Нотация = 36) Экспорт
	
	Если Нотация <= 0 Тогда
		 Возврат("");
	КонецЕсли;
	Значение = Число(Значение);
	
	Если Значение <= 0 Тогда 
		Возврат("0");
	КонецЕсли;
	Значение = Цел(Значение);
	Результат = "";
	
	Пока Значение > 0 Цикл
		Результат = Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", Значение % Нотация + 1, 1) + Результат;
		Значение = Цел(Значение / Нотация) ;
	КонецЦикла;
	
	Возврат Результат;
	
 КонецФункции

Функция HTTPзапросGET(АдресСервера, АдресСкрипта) Экспорт
	
	Ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
	
	HTTP_Соединение = Новый HTTPСоединение(АдресСервера
											,
											,
											,
											,
											, 
											, Ssl);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	HTTP_Соединение.Получить(АдресСкрипта, ИмяФайлаОтвета);
	ТекстОтвета = Новый ТекстовыйДокумент();
	ТекстОтвета.Прочитать(ИмяФайлаОтвета, "utf-8");
	УдалитьФайлы(ИмяФайлаОтвета);
	
	Возврат ТекстОтвета.ПолучитьТекст();

КонецФункции

Функция HTTPзапросPOST(АдресСервера, АдресСкрипта, НаборПеременных) Экспорт
	// Набор переменных это соответствие ключ - имя переменной, значение - значение
	// Если переменная массив, то Массив должен быть оформлен в виде соответствия
	
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");	
	ИмяФайлаТелаЗапроса = ПолучитьИмяВременногоФайла("txt");
	
	Попытка
		ФайлТелаЗапроса = Новый ЗаписьТекста(ИмяФайлаТелаЗапроса, КодировкаТекста.ANSI, Символы.ПС, Ложь);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	// +++ добавляем Переменные в тело запроса +++
		Для каждого стр Из НаборПеременных Цикл
			Если строка(типЗнч(стр.Значение)) = "Соответствие" Тогда
				Для каждого суб_стр Из стр.Значение Цикл
					Если строка(типЗнч(суб_стр.Значение)) = "Соответствие" Тогда
						Для каждого суб_суб_стр Из суб_стр.Значение Цикл
							ФайлТелаЗапроса.ЗаписатьСтроку("--" + Boundary);
							ФайлТелаЗапроса.ЗаписатьСтроку("Content-disposition: form-data; name=""" + стр.Ключ 
													 + "[" + суб_стр.Ключ + "][" + суб_суб_стр.Ключ + "]" + Символы.ПС);
							ФайлТелаЗапроса.ЗаписатьСтроку(суб_суб_стр.Значение);
						КонецЦикла;
					Иначе
						ФайлТелаЗапроса.ЗаписатьСтроку("--" + Boundary);
						ФайлТелаЗапроса.ЗаписатьСтроку("Content-disposition: form-data; name=""" + стр.Ключ 
																			   + "[" + суб_стр.Ключ + "]" + Символы.ПС);
						ФайлТелаЗапроса.ЗаписатьСтроку(суб_стр.Значение);
					КонецЕсли;
				КонецЦикла;
			Иначе
				ФайлТелаЗапроса.ЗаписатьСтроку("--" + Boundary);
				ФайлТелаЗапроса.ЗаписатьСтроку("Content-disposition: form-data; name=""" + стр.Ключ + """" + Символы.ПС);
				ФайлТелаЗапроса.ЗаписатьСтроку(стр.Значение);
			КонецЕсли;		
		КонецЦикла;
	// --- добавляем Переменные в тело запроса ---
	
	ФайлТелаЗапроса.ЗаписатьСтроку("--" + Boundary + "--");
	ФайлТелаЗапроса.Закрыть();
	
	ФайлОтправки = Новый Файл(ИмяФайлаТелаЗапроса);
	
	ЗаголовокHTTP = Новый Соответствие(); 
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	СерверИсточник = НСтр(СтрокаСоединения, "Srvr") + НСтр(Строка(СтрокаСоединения), "Ref");
	ЗаголовокHTTP.Вставить("Referer", СерверИсточник);
	
	ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);
	ЗаголовокHTTP.Вставить("Content-Length", XMLСтрока(ФайлОтправки.Размер()));
	
	Ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
	
	HTTP_Соединение = Новый HTTPСоединение(АдресСервера
										  ,
										  ,
										  ,
										  ,
										  ,
										  , Ssl);
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	HTTP_Соединение.ОтправитьДляОбработки(ИмяФайлаТелаЗапроса, АдресСкрипта, ФайлРезультата, ЗаголовокHTTP);
	
	ТекстОтвета = Новый ТекстовыйДокумент();
	ТекстОтвета.Прочитать(ФайлРезультата, "utf-8");
	ТекстОтвета = ТекстОтвета.ПолучитьТекст();
	УдалитьФайлы(ФайлРезультата);
	УдалитьФайлы(ИмяФайлаТелаЗапроса);
	
	Возврат(ТекстОтвета);
	
КонецФункции

Процедура CRM_ЗагрузкаЗаказов() Экспорт
	
	ОбработкаЗагрузки = Обработки.crm_RetailCRMОбработка.Создать();	
	ОбработкаЗагрузки.Мод_ЗагрузитьЗаказы();
	
КонецПроцедуры

Процедура CRM_ВыгрузкаОстатков() Экспорт
	
	ОбработкаВыгрузки = Обработки.crm_RetailCRMОбработка.Создать();	
	ОбработкаВыгрузки.Мод_ОстаткиИЦеныВCRM();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТекущиеExternalIdsТоваров(НомерЗаказа) 
	
	ИмяСервера 	= СокрЛП(ПолучитьЗначениеКонстанты("ИмяСервера"));
	ApiKey		= СокрЛП(ПолучитьЗначениеКонстанты("КлючCRM"));
	
	СтруктураТоваров = Новый Соответствие;
	
	Ответ = UnJSONTest(HTTPЗапросGET(ИмяСервера, "/api/v5/orders?apiKey=" + ApiKey + "&filter[ids][]=" + НомерЗаказа));
	
	Для каждого Товар Из Ответ["orders"][0]["items"] Цикл
				
		КодыExtId = Новый Соответствие;   
		Если Товар.Получить("externalIds") <> Неопределено Тогда 
			Для каждого ExtID Из Товар["externalIds"] Цикл 
				КодыExtId.Вставить(ExtID["code"], ExtID["value"]);
			КонецЦикла;
		СтруктураТоваров.Вставить(Товар["id"], КодыExtId);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураТоваров;

КонецФункции 

Функция НеФорматированныйJSON(Значение)
	
	Разделитель = "";
	
	ТипЗн = ТипЗнч(Значение);

	Если ТипЗн = Тип("Число") ИЛИ ТипЗнч(Значение) = Тип("Булево") Тогда
		Стр = XMLСтрока(Значение);
	ИначеЕсли ТипЗн = Тип("Дата") Тогда
		Стр = """" + ?(ЗначениеЗаполнено(Значение), XMLСтрока(Значение), "") + """";
	ИначеЕсли ТипЗн = Тип("Структура") ИЛИ ТипЗн = Тип("Соответствие") Тогда
		Стр = "{";
		
		Для Каждого Параметр Из Значение Цикл
			Стр = Стр + Разделитель + Символы.ПС + """" + Параметр.Ключ + """:" 
																		+ НеФорматированныйJSON(Параметр.Значение);
			Разделитель = ",";
			
		КонецЦикла;
		
		Стр = Стр + Символы.ПС + "}";

	ИначеЕсли ТипЗн = Тип("Массив") Тогда
		Стр = "[";
		
		Для Каждого Элемент Из Значение Цикл
			Стр = Стр + Разделитель + Символы.ПС + НеФорматированныйJSON(Элемент);
			Разделитель = ",";
		КонецЦикла;
		
		Стр = Стр + Символы.ПС + "]";

	ИначеЕсли ТипЗн = Тип("ТаблицаЗначений") Тогда
		Колонки = Значение.Колонки;
		Массив = Новый Массив;
		
		Для Каждого СтрокаТЗ Из Значение Цикл
			Структура = Новый Структура;
			
			Для Каждого Колонка Из Колонки Цикл
				Структура.Вставить(Колонка.Имя, СтрокаТЗ[Колонка.Имя]);
			КонецЦикла;
			
			Массив.Добавить(Структура);
		КонецЦикла;
		
		Стр = НеФорматированныйJSON(Массив);

	ИначеЕсли Значение = Неопределено Тогда
		Стр = "null";
	Иначе
		Стр = """" + Экранировать(Значение) + """";
	КонецЕсли;

	Возврат Стр;
	
КонецФункции

Функция ФорматированныйJSON(Значение, Отступ = "")
	
	Разделитель = "";
	
	ТипЗн = ТипЗнч(Значение);

	Если ТипЗн = Тип("Число") ИЛИ ТипЗнч(Значение) = Тип("Булево") Тогда
		Стр = XMLСтрока(Значение);

	ИначеЕсли ТипЗн = Тип("Дата") Тогда
		Стр = """" + ?(ЗначениеЗаполнено(Значение), XMLСтрока(Значение), "") + """";

	ИначеЕсли ТипЗн = Тип("Структура") ИЛИ ТипЗн = Тип("Соответствие") Тогда
		Стр = "{";
		Для Каждого Параметр Из Значение Цикл
			Стр = Стр + Разделитель + Символы.ПС + Отступ + """" + Параметр.Ключ + """:" 
						+ ФорматированныйJSON(Параметр.Значение, Отступ + Символы.Таб);
			Разделитель = ",";
		КонецЦикла;
		Стр = Стр + Символы.ПС + Отступ + "}";

	ИначеЕсли ТипЗн = Тип("Массив") Тогда
		Стр = "[";
		Для Каждого Элемент Из Значение Цикл
			Стр = Стр + Разделитель + Символы.ПС + Отступ + ФорматированныйJSON(Элемент, Отступ);
			Разделитель = ",";
		КонецЦикла;
		Стр = Стр + Символы.ПС + Отступ + "]";

	ИначеЕсли ТипЗн = Тип("ТаблицаЗначений") Тогда
		Колонки = Значение.Колонки;
		Массив = Новый Массив;
		Для Каждого СтрокаТЗ Из Значение Цикл
			Структура = Новый Структура;
			Для Каждого Колонка Из Колонки Цикл
				Структура.Вставить(Колонка.Имя, СтрокаТЗ[Колонка.Имя]);
			КонецЦикла;
			Массив.Добавить(Структура);
		КонецЦикла;
		Стр = ФорматированныйJSON(Массив);

	ИначеЕсли Значение = Неопределено Тогда
		Стр = "null";
	Иначе
		Стр = """" + Экранировать(Значение) + """";
	КонецЕсли;

	Возврат Стр;
	
КонецФункции

Функция Hex2Число(Hex)
	
	Стр = ВРег(СокрЛП(Hex));
	Dec = 0;
	
	Для Элемент2 = 1 По СтрДлина(Стр) Цикл
		Dec = Dec + СтрНайти("123456789ABCDEF", Сред(Стр, Элемент2, 1)) * Pow(16, СтрДлина(Стр) - Элемент2);
	КонецЦикла;
	
	Возврат Dec;
	
КонецФункции

Функция ПолучитьЗначениеИзСтроки(ЗначениеВСтроке, Кавычек)
	
	Если Кавычек > 0 Тогда
		Возврат ЗначениеВКавычках(ЗначениеВСтроке);
	ИначеЕсли ЗначениеВСтроке = "" Тогда
		Возврат Неопределено;
	Иначе
		Возврат ЗначениеБезКавычек(ЗначениеВСтроке);
	КонецЕсли;                    
	
КонецФункции

Функция ЗначениеВКавычках(ЗначениеВСтроке)
	
	Возврат ЗначениеВСтроке;
	
КонецФункции

Функция ЗначениеБезКавычек(ЗначениеВСтроке)
	
	Стр = ВРег(ЗначениеВСтроке);
	Если Стр = "TRUE" Тогда
		 Возврат Истина;
	ИначеЕсли Стр = "FALSE" Тогда 
		Возврат Ложь;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	// Пробежимся по предполагаемому "числу"
	Экспонента = Ложь;
	Элемент1 = " ";
	Для Индекс = 1 По СтрДлина(Стр) Цикл
		Элемент2 = Сред(Стр, Индекс, 1);
		Если СтрНайти("0123456789.+-", Элемент2) Тогда
			Элемент1 = Элемент1 + Элемент2;
		ИначеЕсли Элемент2 = "E" Тогда
			Экспонента = Истина;
			УУ = XMLЗначение(Тип("Число"), Элемент1);
			Элемент1 = " ";
		Иначе
			Возврат ЗначениеВСтроке;
		КонецЕсли;
	КонецЦикла;

	Элемент1 = XMLЗначение(Тип("Число"), Элемент1);
	Если Экспонента Тогда
		Элемент1 = УУ * Pow(10, Элемент1);
	КонецЕсли;

	Возврат Элемент1;
	
КонецФункции

Функция ПолучитьЗначениеJSON(СтрJSON, Значение, Позиция = 1, Ключ = "")
	
	Перем Кавычка;

	ЗначениеВСтроке = "";
	Кавычек = 0;
	Комментарий = Ложь;
	Строка = Ложь;
	Кавычка = "";
	
	Пока Позиция <= СтрДлина(СтрJSON) Цикл
		Элемент1 = Сред(СтрJSON, Позиция, 2);
		Элемент2 = Лев(Элемент1, 1);
		Позиция = Позиция + 1;

		Если Элемент2 > " " ИЛИ Строка Тогда // Отсекаем всякий хлам

			Если Комментарий Тогда
				// Это комментарий. Крутимся в цикле пока не встретится конец комментария
				Если Элемент1 = "*/" Тогда
					// Комментарий закончился
					Комментарий = Ложь;
					Позиция = Позиция + 1;
				КонецЕсли;

			ИначеЕсли Элемент2 = "\" Тогда
				Позиция = Позиция + 1;
				Элемент1 = ВРег(Элемент1);
				Если Элемент1 = "\""" Тогда 
					ЗначениеВСтроке = ЗначениеВСтроке + """";   
				ИначеЕсли Элемент1 = "\\" Тогда 
					ЗначениеВСтроке = ЗначениеВСтроке + "\";
				ИначеЕсли Элемент1 = "\/" Тогда 
					ЗначениеВСтроке = ЗначениеВСтроке + "/";
				ИначеЕсли Элемент1 = "\B" Тогда 
					ЗначениеВСтроке = ЗначениеВСтроке + Символ(8);
				ИначеЕсли Элемент1 = "\F" Тогда 
					ЗначениеВСтроке = ЗначениеВСтроке + Символы.ПФ; // перевод формы (страницы)
				ИначеЕсли Элемент1 = "\N" Тогда 
					ЗначениеВСтроке = ЗначениеВСтроке + Символы.ПС; // перевод строки
				ИначеЕсли Элемент1 = "\R" Тогда 
					ЗначениеВСтроке = ЗначениеВСтроке + Символы.ВК; // Возврат каретки
				ИначеЕсли Элемент1 = "\T" Тогда 
					ЗначениеВСтроке = ЗначениеВСтроке + Символы.ВТаб; // символ вертикальной табуляции
				ИначеЕсли Элемент1 = "\U" Тогда
					ЗначениеВСтроке = ЗначениеВСтроке + Символ(Hex2Число(Сред(СтрJSON, Позиция, 4))); // шестнадцатиричное число
					Позиция = Позиция + 4;
				КонецЕсли;

			ИначеЕсли Строка Тогда
				// Если строка не закончилась - то пропускаем управляющие символы
				Если Элемент2 = Кавычка Тогда
					// Закончилась строка
					Строка = Ложь;
					Кавычек = Кавычек + 1;
				Иначе
					ЗначениеВСтроке = ЗначениеВСтроке + Элемент2;
				КонецЕсли;

			ИначеЕсли Элемент1 = "/*" Тогда
				// Начался комментарий
				Комментарий = Истина;
				Позиция = Позиция + 1;

			ИначеЕсли СтрНайти("""'{}[]:,", Элемент2) > 0 Тогда
				Если Элемент2 = """" ИЛИ Элемент2 = "'" Тогда
					// Началась строка
					// Строка - коллекция нуля ИЛИ больше символов Unicode, заключенная в
					// двойные кавычки, используя "\" в качестве символа экранирования.
					// Символ представляется как односимвольная строка.
					// Похожий синтаксис используется в C и Java.
					Строка = Истина;
					Кавычка = Элемент2;
					Кавычек = Кавычек + 1;

				ИначеЕсли Элемент2 = "{" Тогда
					// Начался объект
					// Объект - неупорядоченный набор пар ключ/значение.
					// Объект начинается с "{" и заканчивается "}".
					// Каждое имя сопровождается ":", пары ключ/значение разделяются ",".
					Объект = Новый Соответствие;
					// Объект=Новый Структура;
					Пока Истина Цикл
						// Получим ключ и значение
						Ключ = "";
						Режим = ПолучитьЗначениеJSON(СтрJSON, Значение, Позиция, Ключ);
						// 0 - есть значение и не конец объекта (запятая)
						// 1 - есть значение и конец объекта
						// 2 - нет значения и не конец объекта (запятая)
						// 3 - нет значения и конец объекта
						Если Режим = 0 Тогда
							Объект.Вставить(Ключ, Значение);
						ИначеЕсли Режим = 1 Тогда
							Объект.Вставить(Ключ, Значение);
							Прервать;
						ИначеЕсли Режим = 3 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Значение = Объект;
					Возврат 0;

				ИначеЕсли Элемент2 = "[" Тогда
					// Начался массив
					// Массив - упорядоченная коллекция значений.
					// Массив начинается с "[" и заканчивается "]".
					// Значения разделены ",".
					Массив = Новый Массив;
					Пока Истина Цикл
						Режим = ПолучитьЗначениеJSON(СтрJSON, Значение, Позиция);
						// 0 - есть значение и не конец массива (запятая)
						// 1 - есть значение и конец массива
						// 2 - нет значения и не конец массива (запятая)
						// 3 - нет значения и конец массива
						Если Режим =  0 Тогда
							Массив.Добавить(Значение);
						ИначеЕсли Режим = 1 Тогда
							Массив.Добавить(Значение);
							Прервать;
						ИначеЕсли Режим = 3 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Значение = Массив;
					Возврат 0;

				ИначеЕсли Элемент2 = "]" ИЛИ Элемент2 = "}" Тогда
					// Закончился массив/объект
					Если ЗначениеВСтроке = "" И Кавычек = 0 Тогда
						Возврат 3; // нет значения и конец массива/объекта
					Иначе
						Значение = ПолучитьЗначениеИзСтроки(ЗначениеВСтроке, Кавычек);
						Возврат 1; // есть значение и конец массива/объекта
					КонецЕсли;

				ИначеЕсли Элемент2 = ":" Тогда
					Ключ = ЗначениеВСтроке;
					Возврат ПолучитьЗначениеJSON(СтрJSON, Значение, Позиция);

				Иначе
					// запятая
					Прервать;
				КонецЕсли;

			Иначе
				ЗначениеВСтроке = ЗначениеВСтроке + Элемент2;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если Кавычек > 0 Тогда
		Значение = ЗначениеВКавычках(ЗначениеВСтроке);
	Иначе
		Если ЗначениеВСтроке = "" Тогда
			Возврат 2;
		Иначе
			Значение = ЗначениеБезКавычек(ЗначениеВСтроке);
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
	
КонецФункции

Процедура ОбработатьОтветВыгрузкиЗаказа(Ответ, Док, СтруктураПараметров, ExternalIds)
		
	ВыгрузитьПовторно = Ложь;
	
	Если Ответ["errors"] <> Неопределено Тогда 
		Для Каждого стр Из Ответ["errors"] Цикл 
			ВыклРазделениеСтрок = СтрНайти(стр.Значение, "is already in this order");
			Если ВыклРазделениеСтрок > 0 Тогда 
				ВыгрузитьПовторно = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ВыгрузитьПовторно Тогда 
		
		Переменные = Новый Соответствие();
		Переменные.Вставить("apiKey", СтруктураПараметров.КлючCRM);
		Переменные.Вставить("site", СтруктураПараметров.КодМагазина);	
		
		Товары = Новый Массив();
		ТЗТовары = Док.Товары.Выгрузить();
		ТЗТовары.Свернуть("Номенклатура, Характеристика, Цена, ВидЦены, Отменено"
											, "Количество, СуммаРучнойСкидки, СуммаАвтоматическойСкидки, crm_СкидкаПЛ");
		
		// Идентификатор товара
		ИдентификаторТовара = ПолучитьЗначениеКонстанты("ИдентификаторТовара");
		Если ИдентификаторТовара = Неопределено ИЛИ Не ЗначениеЗаполнено(ИдентификаторТовара) Тогда 
			ИдентификаторТовара = "Код";
		КонецЕсли;
		
		Для каждого стр Из ТЗТовары Цикл
			
			Если стр.Номенклатура = СтруктураПараметров.НоменклатураДоставки Тогда
				Продолжить;
			КонецЕсли;
			
			Товар = Новый Соответствие();
			
			XmlID = ИдентификаторТовара(стр);
						
			Offer = Новый Соответствие();
			Offer.Вставить(СтруктураПараметров.Offers_id, XmlID);
			Товар.Вставить("offer", Offer);		
			
			Если ExternalIds = Ложь Тогда
				
				Товар.Вставить("productName",	стр.Номенклатура.Наименование);
				Товар.Вставить("initialPrice",	стр.Цена);
				Товар.Вставить("quantity",		стр.Количество);
				
				Если ЗначениеЗаполнено(стр.ВидЦены) И ПолучитьЗначениеКонстанты("ИспользованиеТиповЦен") Тогда 
					
					ТипЦены = Новый Соответствие();
					ТипыЦен = ПолучитьЗначениеКонстанты("ТипыЦенCRM");
					КодТипаЦены = ТипыЦен.СтрНайти(стр.ВидЦены, "ТипЦены");
					Если КодТипаЦены <> Неопределено И КодТипаЦены <> "" Тогда 
						ТипЦены.Вставить("code", КодТипаЦены.КодCRM);
						Товар.Вставить("priceType", ТипЦены);
					КонецЕсли;
				КонецЕсли;
				
				// передача признака отмены строки
				Если стр.Отменено = Истина ИЛИ СтруктураПараметров.Отменить = Истина Тогда 
					Статус = "failure";
					Товар.Вставить("status", Статус);
				КонецЕсли;
				
				РучнаяСкидка = стр.СуммаРучнойСкидки / стр.Количество;
				АвтоматическаяСкидка = стр.СуммаАвтоматическойСкидки / стр.Количество;
				ОбщаяСкидка = РучнаяСкидка + АвтоматическаяСкидка;

				Если стр.crm_СкидкаПЛ > 0 Тогда 
					СкидкаПЛ = стр.crm_СкидкаПЛ;
					ОбщаяСкидка = (стр.СуммаАвтоматическойСкидки + стр.СуммаРучнойСкидки - СкидкаПЛ) / стр.Количество;
				КонецЕсли;

				Товар.Вставить("discountManualAmount",	?(ОбщаяСкидка < 0, 0, ОбщаяСкидка));
				Товар.Вставить("discountManualPercent", 0);	
				
			КонецЕсли;
			
			Товары.Добавить(Товар);
			
		КонецЦикла;
		
		Заказ = Новый Соответствие();
		
		Заказ.Вставить("items", Товары);
		
		Если ExternalIds = Ложь Тогда 
			
			Заказ.Вставить("customerComment", СокрЛП(Док.Комментарий));
			Заказ.Вставить("managerComment",  "");	
			Заказ.Вставить("discountManualPercent", 0);
			Заказ.Вставить("discountManualAmount", 0);
			
			Если СтруктураПараметров.Доставка <> Неопределено Тогда 
				Заказ.Вставить("delivery", СтруктураПараметров.Доставка);
			КонецЕсли;
		
			Эталонная = ПолучитьЗначениеКонстанты("Эталонная");

			СтатусЗаказа = "";
			
			Если Не Эталонная Тогда
				Если СтатусЗаказа =	"new" ИЛИ СтатусЗаказа = "assembling" Тогда  
					
					Если Док.ДатаОтгрузки <> Неопределено ИЛИ Док.ДатаОтгрузки <> "" 
														  ИЛИ Док.ДатаОтгрузки <> Дата(1, 1, 1) Тогда 
														  	
						Заказ.Вставить("shipmentDate", Формат(Док.ДатаОтгрузки, "ДФ=yyyy-MM-dd"));
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Заказ.Вставить("status",	СтатусЗаказа); 
			
			ПользПоля = Новый Соответствие();    
			ПользПоля.Вставить("nomer1c", Строка((Док.Номер)));
			ПользПоля.Вставить("update_api1c", ОбщегоНазначения.ТекущаяДатаПользователя());
			Заказ.Вставить("customFields", ПользПоля);  
			
		КонецЕсли;
		
		Переменные.Вставить("by",	 "id");	
		Переменные.Вставить("order", JsonTest(Заказ, Новый ЗаписьJSON));
		
		Ответ = HTTPзапросPOST(СтруктураПараметров.ИмяСервера
							   , "/api/v5/orders/" + СтруктураПараметров.НомерЗаказа + "/edit"
							   , Переменные);
	КонецЕсли;
	
КонецПроцедуры

Функция Экранировать(Стр)
	Изменения = СтрЗаменить(Стр, """", "\""");
	Изменения = СтрЗаменить(Изменения, "/", "\/");
	Изменения = СтрЗаменить(Изменения, Символ(8), "\b");
	Изменения = СтрЗаменить(Изменения, Символы.ПФ, "\f");
	Изменения = СтрЗаменить(Изменения, Символы.ПС, "\n");
	Изменения = СтрЗаменить(Изменения, Символы.ВК, "\r");
	Изменения = СтрЗаменить(Изменения, Символы.ВТаб, "\t");
	Возврат Изменения;
КонецФункции

Функция ВернутьЧекВозврат(Чек)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.Проведен
	|	И ЧекККМВозврат.ЧекККМ = &ЧекККМ";
	
	Запрос.УстановитьПараметр("ЧекККМ", Чек);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ИскЧек = Документы.ЧекККМВозврат.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		ИскЧек = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ИскЧек;
	
КонецФункции

#КонецОбласти
