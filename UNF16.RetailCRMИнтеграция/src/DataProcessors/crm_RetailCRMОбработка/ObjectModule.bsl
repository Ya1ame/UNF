#Область ОписаниеПеременных

Перем ДатаРедакции Экспорт;
Перем Версия Экспорт;
Перем РелизКонф Экспорт;
Перем РелизПлафт Экспорт;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура Мод_ЗагрузитьЗаказы(ИспДатыАктуальности = Неопределено, ДатаИзменений = Неопределено, ИДИзменений = Неопределено) Экспорт
	
	Если crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ЗагружатьЗаказы") = Ложь Тогда 
		Возврат;
	КонецЕсли;
	
	ИДИзменений = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("since_Id");
	
	ДатаЗагрузки = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Отказ = Ложь;
	Если СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера")) = "" Тогда
		ОбщегоНазначения.СообщитьПользователю("Не указано имя сервера в настройках.");
		ЗаписьЖурналаРегистрации("RetailCRM"
								,
								,
								,
								, "Не указано имя сервера." + ДатаЗагрузки);
		Отказ = Истина;
	КонецЕсли;
	
	Если СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM")) = "" Тогда
		ОбщегоНазначения.СообщитьПользователю("Не указан ключ api в настройках.");
		ЗаписьЖурналаРегистрации("RetailCRM"
								,
								,
								,
								, "Не указан ключ api." + ДатаЗагрузки);
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ФильтрИд = "";
	Если ИспДатыАктуальности = Истина Тогда
		
		Если ДатаИзменений = Неопределено ИЛИ ДатаИзменений = "" ИЛИ ДатаИзменений = Дата(1, 1, 1) Тогда 
			ОбщегоНазначения.СообщитьПользователю("Не указана дата актуальности!");
			Возврат;
		Иначе
			ЗаписьЖурналаРегистрации("RetailCRM"
								 	,
								 	,
								 	,
								 	, "Загрузка заказов по дате актуальности: " + ДатаИзменений);
			ФильтрИд = "";
			ФильтрИд = ПолучитьИсториюИзменений(ДатаИзменений, ИспДатыАктуальности);
		КонецЕсли;
		
	Иначе                                           // загрузка по sinceId
		
		ЗаписьЖурналаРегистрации("RetailCRM"
								,
								,
								,
								, "Загрузка заказов по дате актуальности: " + ИДИзменений);
		Если ИДИзменений = 0 Тогда 
			ОбщегоНазначения.СообщитьПользователю("Не указан id последних изменений. Укажите id ИЛИ загрузите по дате актуальности, id заполнится автоматически");
			Возврат;
		КонецЕсли;
		ФильтрИд = "";
		ФильтрИд = ПолучитьИсториюИзменений(ИДИзменений, ИспДатыАктуальности);
		
	КонецЕсли;
	
	ИДИзменений = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("since_Id");
	
	ТЗБрони = Новый ТаблицаЗначений;

	Если ФильтрИд <> "" И ФильтрИд.Количество() > 0 Тогда 
		ЗагрузкаЗаказов(ФильтрИд, ТЗБрони);
	Иначе 
		ОбщегоНазначения.СообщитьПользователю("За данный период изменения в RetailCRM отсутствовали!");
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(" - Запрос к retailCRM завершён - ");	
КонецПроцедуры

Процедура Мод_ЗагрузитьЗаказПоИД(ИДЗаказа) Экспорт
	
	МассивИД = Новый Массив;
	МассивИД.Добавить(Формат(ИДЗаказа, "ЧГ=0"));
	Ответ = Мод_ПолучитьЗаказыПоИД(МассивИД);
	
	Мод_СозданиеЗаказов(Ответ);
	
КонецПроцедуры

Процедура Мод_ВыполнитьОбмен() Экспорт
	
	ОбменОстатками 		= crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ВыгружатьОстатки");
	ЗагружатьЗаказы 	= crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ЗагружатьЗаказы");
	ВыгружатьТипыЦен 	= crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ВыгружатьТипыЦен");
	
	Если ЗагружатьЗаказы <> Неопределено Тогда 
		Если ЗагружатьЗаказы Тогда
			Мод_ЗагрузитьЗаказы();
		КонецЕсли;
	КонецЕсли;
	
	 Если ОбменОстатками <> Неопределено Тогда 
	 	Если ОбменОстатками Тогда
	 		Мод_ОстаткиИЦеныВCRM();
	 	КонецЕсли;
	 КонецЕсли;
	// 
	// Если ВыгружатьТипыЦен <> Неопределено Тогда 
	// 	Если ВыгружатьТипыЦен Тогда
	// 		Мод_ВыгрузкаТиповЦенВCRM();
	// 	КонецЕсли;
	// КонецЕсли;
	
КонецПроцедуры

Процедура Мод_ВыгрузкаКаталогаВXML(ТабКаталога, ПутьКфайлу) Экспорт
	
	Фильтр = ТабКаталога.Выгрузить(); 
	Фильтр = ?(ЗначениеЗаполнено(Фильтр), Фильтр, "");
	
	Рез = УНФ_ЗапросДляКаталога(Фильтр);
	
	Если Не ЗначениеЗаполнено(ПутьКфайлу) Тогда   
		ПутьКфайлу = КаталогВременныхФайлов() + "catalog_icml.xml";
	КонецЕсли;
	
	ХМЛ			 	= Новый ЗаписьXML; 
	ХМЛ.ОткрытьФайл(ПутьКфайлу);
	ХМЛ.ЗаписатьОбъявлениеXML();
	ХМЛ.ЗаписатьНачалоЭлемента("yml_catalog");
	ХМЛ.ЗаписатьАтрибут("date",Формат(ОбщегоНазначения.ТекущаяДатаПользователя(),"ДФ='гггг-ММ-дд ЧЧ:мм:сс'"));		
	ХМЛ.ЗаписатьНачалоЭлемента("shop");
	ХМЛ.ЗаписатьНачалоЭлемента("name");
	ХМЛ.ЗаписатьТекст(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КодМагазина"));		
	ХМЛ.ЗаписатьКонецЭлемента();	
	ХМЛ.ЗаписатьНачалоЭлемента("company");
	ХМЛ.ЗаписатьТекст(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КодМагазина"));		
	ХМЛ.ЗаписатьКонецЭлемента();	
	
	ХМЛ.ЗаписатьНачалоЭлемента("categories");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Код,
	|	Номенклатура.Родитель.Код КАК РодительКод,
	|	Номенклатура.Наименование
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа";
	
	Если ЗначениеЗаполнено(Фильтр) Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	И Номенклатура.Родитель В ИЕРАРХИИ(&Родитель)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	РодительКод";
	
	Запрос.УстановитьПараметр("Родитель", Фильтр);
	Результат = Запрос.Выполнить().Выгрузить();   
	
	// Идентификатор товара
	ИдентификаторТовара = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентификаторТовара = Неопределено ИЛИ Не ЗначениеЗаполнено(ИдентификаторТовара) Тогда 
		ИдентификаторТовара = "Код";
	КонецЕсли;
	// 
	
	Если ЗначениеЗаполнено(Фильтр) Тогда 
		Для Каждого стрГруппа Из Фильтр Цикл 
			ХМЛ.ЗаписатьНачалоЭлемента("category");
			ИДКод = СокрЛП(стрГруппа.Код); 
			ХМЛ.ЗаписатьАтрибут("id",стрЗаменить(ИДКод,Символ(160),""));
			ХМЛ.ЗаписатьАтрибут("parentId","");
			ХМЛ.ЗаписатьТекст(строка(стрГруппа.Наименование));
			ХМЛ.ЗаписатьКонецЭлемента(); 
		КонецЦикла;;
	КонецЕсли;
	
	Для каждого Стр Из Результат Цикл 
		
		Ссылка = Стр.Ссылка;
		
		Если Ссылка.ЭтоГруппа Тогда		
			ХМЛ.ЗаписатьНачалоЭлемента("category"); 
			ИДКод = СокрЛП(Ссылка.Код);
			ХМЛ.ЗаписатьАтрибут("id",стрЗаменить(ИДКод,Символ(160),""));
			Если ЗначениеЗаполнено(Ссылка.Родитель.Код) Тогда 
				идРодителя = СокрЛП(Ссылка.Родитель.Код);
			Иначе
				идРодителя = "";
			КонецЕсли;
			ХМЛ.ЗаписатьАтрибут("parentId",СтрЗаменить(идРодителя,Символ(160),""));
			ХМЛ.ЗаписатьТекст(строка(Ссылка.Наименование));
			ХМЛ.ЗаписатьКонецЭлемента(); 
		КонецЕсли;
	КонецЦикла;
	
	ХМЛ.ЗаписатьКонецЭлемента();//  categories
	
	ХМЛ.ЗаписатьНачалоЭлемента("offers");
	
	Для каждого Стр Из Рез Цикл 
		
		Ссылка = Стр.Ссылка;
		Если НЕ Ссылка.ЭтоГруппа Тогда
			
			// Идентификатор товара
			Если ИдентификаторТовара = "Код" Тогда
				XmlID = Ссылка.Код;
			ИначеЕсли ИдентификаторТовара = "Артикул" Тогда
				XmlID	= Ссылка.Артикул;
			ИначеЕсли ИдентификаторТовара = "GUID" Тогда
				XmlID	= Ссылка.УникальныйИдентификатор();	
			КонецЕсли;
			
			ИД	= СокрЛП(XmlID);
			Артикул = СокрЛП(Ссылка.Артикул);
			
			Если ЗначениеЗаполнено(Ссылка.Родитель) Тогда 
				идРодителя = СокрЛП(Ссылка.Родитель.Код);
			Иначе
				идРодителя = "";
			КонецЕсли;
			
			ХМЛ.ЗаписатьНачалоЭлемента("offer");
			
			ХМЛ.ЗаписатьАтрибут("id",СокрЛП(ИД));	
			ХМЛ.ЗаписатьАтрибут("productId",СокрЛП(ИД));	
			
			Остаток = Стр.Остаток; 	
			Остаток = СтрЗаменить(строка(Остаток),",",".");
			Остаток = СтрЗаменить(строка(Остаток),Символ(160),"");
			
			ХМЛ.ЗаписатьАтрибут("quantity",Остаток);	
			ХМЛ.ЗаписатьНачалоЭлемента("url");
			ХМЛ.ЗаписатьТекст("");
			ХМЛ.ЗаписатьКонецЭлемента();//  url	
			ХМЛ.ЗаписатьНачалоЭлемента("picture");
			ХМЛ.ЗаписатьТекст("");
			ХМЛ.ЗаписатьКонецЭлемента();	
			
			ЦенаРозн = Стр.Цена;
			
			ЦенаРозн = СтрЗаменить(строка(ЦенаРозн),",",".");
			ЦенаРозн = СтрЗаменить(строка(ЦенаРозн),Символ(160),"");
			
			ХМЛ.ЗаписатьНачалоЭлемента("price");
			ХМЛ.ЗаписатьТекст(ЦенаРозн);
			ХМЛ.ЗаписатьКонецЭлемента();
			ХМЛ.ЗаписатьНачалоЭлемента("purchasePrice");
			ХМЛ.ЗаписатьТекст(ЦенаРозн);
			ХМЛ.ЗаписатьКонецЭлемента();
			ХМЛ.ЗаписатьНачалоЭлемента("categoryId");
			ХМЛ.ЗаписатьТекст(СтрЗаменить(идРодителя,Символ(160),""));
			ХМЛ.ЗаписатьКонецЭлемента();	
			ХМЛ.ЗаписатьНачалоЭлемента("name");
			ИмяТовара = строка(Ссылка.НаименованиеПолное);
			ХМЛ.ЗаписатьТекст(стрЗаменить(ИмяТовара,"""",""));
			ХМЛ.ЗаписатьКонецЭлемента();
			ХМЛ.ЗаписатьНачалоЭлемента("xmlId");
			ХМЛ.ЗаписатьТекст(СокрЛП(ИД));
			ХМЛ.ЗаписатьКонецЭлемента();						                    
			ХМЛ.ЗаписатьНачалоЭлемента("productName");
			ХМЛ.ЗаписатьТекст(стрЗаменить(ИмяТовара,"""",""));
			ХМЛ.ЗаписатьКонецЭлемента();	
			
			ХМЛ.ЗаписатьНачалоЭлемента("param"); 
			ХМЛ.ЗаписатьАтрибут("code",строка("article"));	
			ХМЛ.ЗаписатьАтрибут("name",строка("артикул"));	
			ХМЛ.ЗаписатьТекст(СокрЛП(Артикул));				
			ХМЛ.ЗаписатьКонецЭлемента();	  
			
			ХМЛ.ЗаписатьНачалоЭлемента("vendor");
			ХМЛ.ЗаписатьТекст(СокрЛП(Ссылка.Производитель));
			ХМЛ.ЗаписатьКонецЭлемента();	
			
			ХМЛ.ЗаписатьНачалоЭлемента("unit");
			ХМЛ.ЗаписатьАтрибут("code",СокрЛП(Ссылка.ЕдиницаИзмерения.Код));
			ХМЛ.ЗаписатьАтрибут("name",строка(Ссылка.ЕдиницаИзмерения.НаименованиеПолное));
			ХМЛ.ЗаписатьАтрибут("sym",строка(Ссылка.ЕдиницаИзмерения.Наименование));
			ХМЛ.ЗаписатьКонецЭлемента();
			
			ХМЛ.ЗаписатьКонецЭлемента();//  offer						
			
		КонецЕсли;
	КонецЦикла;	
	
	ХМЛ.ЗаписатьКонецЭлемента(); //  offers			
	ХМЛ.ЗаписатьКонецЭлемента(); //  shop	
	ХМЛ.ЗаписатьКонецЭлемента(); //  yml_catalog	
	ХМЛ.Закрыть();
	
	ОбщегоНазначения.СообщитьПользователю("Файл каталога сформирован по адресу " + ПутьКфайлу);
	
КонецПроцедуры

Процедура Мод_ВыгрузкаКаталогаВXMLХарактеристики(ТабКаталога, ПутьКФайлу) Экспорт
	
	Фильтр = ТабКаталога.Выгрузить(); 
	Фильтр = ?(ЗначениеЗаполнено(Фильтр), Фильтр, "");
	
	Рез = УНФ_ЗапросДляКаталогаХарактеристики(Фильтр);
	
	Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда   
		ПутьКФайлу = КаталогВременныхФайлов() + "catalog_icml.xml";
	КонецЕсли;
	
	ХМЛ	= Новый ЗаписьXML; 
	ХМЛ.ОткрытьФайл(ПутьКФайлу);
	ХМЛ.ЗаписатьОбъявлениеXML();
	ХМЛ.ЗаписатьНачалоЭлемента("yml_catalog");
	ХМЛ.ЗаписатьАтрибут("date", Формат(ОбщегоНазначения.ТекущаяДатаПользователя(), "ДФ='гггг-ММ-дд ЧЧ:мм:сс'"));		
	ХМЛ.ЗаписатьНачалоЭлемента("shop");
	ХМЛ.ЗаписатьНачалоЭлемента("name");
	ХМЛ.ЗаписатьТекст(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КодМагазина"));		
	ХМЛ.ЗаписатьКонецЭлемента();	
	ХМЛ.ЗаписатьНачалоЭлемента("company");
	ХМЛ.ЗаписатьТекст(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КодМагазина"));		
	ХМЛ.ЗаписатьКонецЭлемента();	
	
	ХМЛ.ЗаписатьНачалоЭлемента("categories");
	// 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Код,
	|	Номенклатура.Родитель.Код КАК РодительКод,
	|	Номенклатура.Наименование
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа";
	
	Если ЗначениеЗаполнено(Фильтр) Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	И Номенклатура.Родитель В ИЕРАРХИИ(&Родитель)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	РодительКод";
	
	Запрос.УстановитьПараметр("Родитель", Фильтр);
	Результат = Запрос.Выполнить().Выгрузить();   
	
	Если ЗначениеЗаполнено(Фильтр) Тогда 
		Для Каждого стрГруппа Из Фильтр Цикл 
			ХМЛ.ЗаписатьНачалоЭлемента("category");
			ИДКод = СокрЛП(стрГруппа.Код); 
			ХМЛ.ЗаписатьАтрибут("id", стрЗаменить(ИДКод, Символ(160), ""));
			ХМЛ.ЗаписатьАтрибут("parentId", "");
			ХМЛ.ЗаписатьТекст(строка(стрГруппа.Наименование));
			ХМЛ.ЗаписатьКонецЭлемента(); 
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Стр Из Результат Цикл 
		
		Ссылка = Стр.Ссылка;
		
		Если Ссылка.ЭтоГруппа Тогда		
			ХМЛ.ЗаписатьНачалоЭлемента("category"); 
			ИДКод = СокрЛП(Ссылка.Код);
			ХМЛ.ЗаписатьАтрибут("id", стрЗаменить(ИДКод, Символ(160), ""));
			Если ЗначениеЗаполнено(Ссылка.Родитель.Код) Тогда 
				идРодителя = СокрЛП(Ссылка.Родитель.Код);
			Иначе
				идРодителя = "";
			КонецЕсли;
			ХМЛ.ЗаписатьАтрибут("parentId", СтрЗаменить(идРодителя, Символ(160), ""));
			ХМЛ.ЗаписатьТекст(строка(Ссылка.Наименование));
			ХМЛ.ЗаписатьКонецЭлемента(); 
		КонецЕсли;
	КонецЦикла;
	
	ХМЛ.ЗаписатьКонецЭлемента(); //  categories
	
	ХМЛ.ЗаписатьНачалоЭлемента("offers");
	
	Для каждого Стр Из Рез Цикл 
		
		GUIDТовара = "";
		GUIDХарактеристики = "";
		
		Ссылка = Стр.Номенклатура;
		
		Если НЕ Ссылка.ЭтоГруппа Тогда
			
			GUIDТовара			= СокрЛП(Ссылка.УникальныйИдентификатор());
			Если ЗначениеЗаполнено(Стр.Характеристика) Тогда
				GUIDХарактеристики 	= СокрЛП(Стр.Характеристика.УникальныйИдентификатор());
			КонецЕсли;
			Артикул = СокрЛП(Ссылка.Артикул);
			
			Если ЗначениеЗаполнено(Ссылка.Родитель) Тогда 
				идРодителя = СокрЛП(Ссылка.Родитель.Код);
			Иначе
				идРодителя = "";
			КонецЕсли;
			
			ХМЛ.ЗаписатьНачалоЭлемента("offer");
			
			Если ЗначениеЗаполнено(GUIDХарактеристики) Тогда
				ХМЛ.ЗаписатьАтрибут("id", (GUIDТовара + "#" + GUIDХарактеристики));
			Иначе 
				ХМЛ.ЗаписатьАтрибут("id", GUIDТовара);
			КонецЕсли;
			
			ХМЛ.ЗаписатьАтрибут("productId", GUIDТовара);
			
			Остаток = Стр.Остаток; 	
			Остаток = СтрЗаменить(строка(Остаток), ",", ".");
			Остаток = СтрЗаменить(строка(Остаток), Символ(160), "");
			
			ХМЛ.ЗаписатьАтрибут("quantity", Остаток);	
			ХМЛ.ЗаписатьНачалоЭлемента("url");
			ХМЛ.ЗаписатьТекст("");
			ХМЛ.ЗаписатьКонецЭлемента(); 
			ХМЛ.ЗаписатьНачалоЭлемента("picture");
			ХМЛ.ЗаписатьТекст("");
			ХМЛ.ЗаписатьКонецЭлемента();	
			
			ЦенаПродажи = Стр.Цена;
			
			ЦенаПродажи = СтрЗаменить(строка(ЦенаПродажи), ",", ".");
			ЦенаПродажи = СтрЗаменить(строка(ЦенаПродажи), Символ(160), "");
			
			ХМЛ.ЗаписатьНачалоЭлемента("price");
			ХМЛ.ЗаписатьТекст(ЦенаРозн);
			ХМЛ.ЗаписатьКонецЭлемента();
			ХМЛ.ЗаписатьНачалоЭлемента("purchasePrice");
			ХМЛ.ЗаписатьТекст(ЦенаРозн);
			ХМЛ.ЗаписатьКонецЭлемента();
			ХМЛ.ЗаписатьНачалоЭлемента("categoryId");
			ХМЛ.ЗаписатьТекст(СтрЗаменить(идРодителя, Символ(160), ""));
			ХМЛ.ЗаписатьКонецЭлемента();	
			ХМЛ.ЗаписатьНачалоЭлемента("name");
			Если ЗначениеЗаполнено(Стр.Характеристика) Тогда
				ИмяТовара = строка(Ссылка.НаименованиеПолное) + ", " + строка(Стр.Характеристика.НаименованиеДляПечати);
			Иначе 
				ИмяТовара = строка(Ссылка.НаименованиеПолное);
			КонецЕсли;
			ХМЛ.ЗаписатьТекст(стрЗаменить(ИмяТовара, """", ""));
			ХМЛ.ЗаписатьКонецЭлемента();
			ХМЛ.ЗаписатьНачалоЭлемента("xmlId");
			Если ЗначениеЗаполнено(GUIDХарактеристики) Тогда
				ХМЛ.ЗаписатьТекст(GUIDТовара + "#" + GUIDХарактеристики);
			Иначе 
				ХМЛ.ЗаписатьТекст(GUIDТовара);
			КонецЕсли;
			
			ХМЛ.ЗаписатьКонецЭлемента();						                    
			ХМЛ.ЗаписатьНачалоЭлемента("productName");
			ХМЛ.ЗаписатьТекст(строка(Ссылка.НаименованиеПолное));
			ХМЛ.ЗаписатьКонецЭлемента();	
			
			ХМЛ.ЗаписатьНачалоЭлемента("param"); 
			ХМЛ.ЗаписатьАтрибут("code", строка("article"));	
			ХМЛ.ЗаписатьАтрибут("name", строка("артикул"));	
			ХМЛ.ЗаписатьТекст(СокрЛП(Артикул));				
			ХМЛ.ЗаписатьКонецЭлемента();	  
			
			ХМЛ.ЗаписатьНачалоЭлемента("vendor");
			ХМЛ.ЗаписатьТекст(СокрЛП(Ссылка.Производитель));
			ХМЛ.ЗаписатьКонецЭлемента();	
			
			ХМЛ.ЗаписатьНачалоЭлемента("unit");
			ХМЛ.ЗаписатьАтрибут("code", СокрЛП(Ссылка.ЕдиницаИзмерения.Код));
			ХМЛ.ЗаписатьАтрибут("name", строка(Ссылка.ЕдиницаИзмерения.НаименованиеПолное));
			ХМЛ.ЗаписатьАтрибут("sym", строка(Ссылка.ЕдиницаИзмерения.Наименование));
			ХМЛ.ЗаписатьКонецЭлемента();
			
			ХМЛ.ЗаписатьКонецЭлемента(); //  offer						
			
		КонецЕсли;
	КонецЦикла;	
	
	ХМЛ.ЗаписатьКонецЭлемента(); //  offers			
	ХМЛ.ЗаписатьКонецЭлемента(); //  shop	
	ХМЛ.ЗаписатьКонецЭлемента(); //  yml_catalog	
	ХМЛ.Закрыть();
	
	ОбщегоНазначения.СообщитьПользователю("Файл каталога сформирован по адресу " + ПутьКфайлу);
	
КонецПроцедуры

Процедура Мод_ОстаткиИЦеныВCRM() Экспорт 
	
	ОбменОстатками 	= crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ВыгружатьОстатки");
	
	Если ОбменОстатками = Неопределено ИЛИ ОбменОстатками = Ложь Тогда
		ОбщегоНазначения.СообщитьПользователю("Не установлен флаг выгрузки остатков!");
		Возврат;
	КонецЕсли;
	
	// Идентификатор товара
	ИдентификаторТовара = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентификаторТовара = Неопределено ИЛИ Не ЗначениеЗаполнено(ИдентификаторТовара) Тогда 
		ИдентификаторТовара = "Код";
	КонецЕсли;
	
	СУчетомРезервов = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ВыгружатьОстаткиСУчетомРезервов");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,";
	
	Если СУчетомРезервов Тогда
		
	 	Запрос.Текст = Запрос.Текст + "
	|	ЕСТЬNULL(Запасы.КоличествоОстаток, 0) - ЕСТЬNULL(crm_РезервыТоваровОстатки.КоличествоОстаток, 0) КАК Остаток,";
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + "
	|	ЕСТЬNULL(Запасы.КоличествоОстаток, 0) КАК Остаток,";
		
	КонецЕсли;  
	
	Запрос.Текст = Запрос.Текст + "
	
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Номенклатура,
	|		СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура,
	|		Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|	ГДЕ
	|		СтруктурныеЕдиницы.Ссылка В(&Склады)
	|		И НЕ Номенклатура.ЭтоГруппа
	|		И НЕ Номенклатура.ПометкаУдаления
	|		И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)";
	
	Если ИдентификаторТовара = "Артикул" Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	И Номенклатура.Артикул <> """"";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "

 	|		)КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&ТекДата, СтруктурнаяЕдиница В (&Склады)) КАК Запасы"; 
	
	Если СУчетомРезервов Тогда
	
	 Запрос.Текст = Запрос.Текст + "
	| 			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.crm_РезервыТоваров.Остатки(&ТекДата, СтруктурнаяЕдиница В (&Склады)) КАК crm_РезервыТоваровОстатки
	|			ПО Запасы.Номенклатура = crm_РезервыТоваровОстатки.Номенклатура
	|				И Запасы.СтруктурнаяЕдиница = crm_РезервыТоваровОстатки.СтруктурнаяЕдиница ";
	 
 	КонецЕсли; 
 
	Запрос.Текст = Запрос.Текст + "
	|		ПО ВложенныйЗапрос.Номенклатура = Запасы.Номенклатура
	|			И ВложенныйЗапрос.СтруктурнаяЕдиница = Запасы.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекДата, ВидЦен = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0),
	|	Запасы.КоличествоОстаток"; 
	
	Если СУчетомРезервов Тогда
		
		Запрос.Текст = Запрос.Текст + ",
	|	ЕСТЬNULL(Запасы.КоличествоОстаток, 0) - ЕСТЬNULL(crm_РезервыТоваровОстатки.КоличествоОстаток, 0)";

	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	СтруктурнаяЕдиница"; 
				
	Склады = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("Склады");
	Если Склады = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю("В таблице настроек не заполнена вкладка Склады/Организации");
		Возврат;
	КонецЕсли;
	Запрос.УстановитьПараметр("Склады",  Склады.ВыгрузитьКолонку("Склад"));
	Запрос.УстановитьПараметр("ВидЦены", crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ЗакупочнаяЦена"));
	Запрос.УстановитьПараметр("ТекДата", ОбщегоНазначения.ТекущаяДатаПользователя());
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Счетчик = 0;
	СтТовар = "";
	Предложения = Новый Массив();
		
	//  Склады для обмена
	СклДляОбмена = Склады.Скопировать();
	Для Каждого СтрокаТЧ Из СклДляОбмена Цикл
		КодСклада = СокрЛП(СтрокаТЧ.КодСRM);
		Если КодСклада = "" Тогда
			ОбщегоНазначения.СообщитьПользователю("В таблице настроек складов не указан КодCRM для склада: " 
																			  + СтрокаТЧ.Склад, СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Стр Из РезультатЗапроса Цикл    		
		
		Если ИдентификаторТовара = "Артикул" Тогда
			XmlID	= Стр.Номенклатура.Артикул;
		ИначеЕсли ИдентификаторТовара = "GUID" Тогда
			XmlID	= Стр.Номенклатура.УникальныйИдентификатор();
		Иначе
			XmlID = Стр.Номенклатура.Код;
		КонецЕсли;
		
		Если XmlID = Неопределено ИЛИ XmlID = "" Тогда 
			Продолжить;
		КонецЕсли;
		
		Отправлен = Ложь; 
		Счетчик = Счетчик + 1; 
					
		Если СокрЛП(XmlID) <> СтТовар Тогда 	
			Если РезультатЗапроса.Индекс(Стр) = 0 Тогда 	
				масСкладов = Новый Массив;			
			Иначе
				пред = Новый Соответствие();
				пред.Вставить("xmlId", crm_RetailCRMОбщийВызовСервера.Перекодировка(СтТовар));
				пред.Вставить("stores", масСкладов);
				Предложения.Добавить(пред);   						
				масСкладов = Новый Массив;
			КонецЕсли;       		
		КонецЕсли;	
		
		Если Число(Стр.Остаток) < 0 Тогда 
			Стр.Остаток = 0;	
		КонецЕсли;
		
		Цена = СтрЗаменить(строка(Стр.Цена),",","."); 
		Остаток = СтрЗаменить(строка(Стр.Остаток),",",".");
		
		//  Код склада
		СимвольныйКодСклада = "";
		НайденнаяСтрока = СклДляОбмена.СтрНайти(Стр.СтруктурнаяЕдиница);
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СимвольныйКодСклада = СокрЛП(НайденнаяСтрока.КодСRM);
		Если СимвольныйКодСклада = "" Тогда
			Продолжить;
		КонецЕсли;
		// 

		скл = Новый Соответствие();
		скл.Вставить("code", СимвольныйКодСклада);
		скл.Вставить("available", СтрЗаменить(строка(Остаток), Символ(160), ""));
		скл.Вставить("purchasePrice", СтрЗаменить(строка(Цена), Символ(160), "")); 
		масСкладов.Добавить(скл);
		
		СтТовар = СокрЛП(XmlID);
		
		КоличествоЗаписей = Счетчик / 250;
		Если КоличествоЗаписей = Цел(КоличествоЗаписей) Тогда
			Предложения.Очистить();
			Отправлен = Истина;
		КонецЕсли;	
		
		Если Счетчик = РезультатЗапроса.количество() И Не Отправлен Тогда 
			
			пред = Новый Соответствие();
			пред.Вставить("externalId", crm_RetailCRMОбщийВызовСервера.Перекодировка(СтТовар)); 
			пред.Вставить("stores", масСкладов);
			Предложения.Добавить(пред);
			Предложения.Очистить();
			
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

Процедура Мод_ОстаткиИЦеныВCRMХарактеристики() Экспорт 
	
	ОбменОстатками 	= crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ВыгружатьОстатки");
	offers_id = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("offers_id");
	
	Если ОбменОстатками = Неопределено ИЛИ ОбменОстатками = Ложь Тогда
		ОбщегоНазначения.СообщитьПользователю("Не установлен флаг выгрузки остатков!");
		Возврат;
	КонецЕсли;
	
	Если crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда
		
		НесколькоОрганизаций = Истина;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	crm_Организации.Ссылка КАК ОрганизацияCRM,
		|	crm_Организации.КодМагазинаCRM КАК КодМагазина,
		|	crm_Организации.ВыгружатьОстатки КАК ВыгружатьОстатки,
		|	crm_Организации.Организация КАК Организация
		|ИЗ
		|	Справочник.crm_Организации КАК crm_Организации
		|ГДЕ
		|	crm_Организации.ВыгружатьОстатки
		|	И НЕ crm_Организации.ПометкаУдаления";
		
		СписокМагазинов = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		НесколькоОрганизаций = Ложь;
		СписокМагазинов = Новый ТаблицаЗначений;
		СписокМагазинов.Колонки.Добавить("КодМагазина");
		СписокМагазинов.Колонки.Добавить("Организация");
		СписокМагазинов.Колонки.Добавить("ВыгружатьОстатки");
		НовСтр = СписокМагазинов.Добавить();
		НовСтр.КодМагазина		= crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КодМагазина");
		НовСтр.Организация	    = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("Организация");
		НовСтр.ВыгружатьОстатки = Истина;
		 
	КонецЕсли;
	
	Родитель = "";
	Склады = "";

	Для Каждого стрМагазин Из СписокМагазинов Цикл
		
		Если НесколькоОрганизаций Тогда
			Родитель = стрМагазин.ОрганизацияCRM.Каталог.Выгрузить();
			Родитель = ?(ЗначениеЗаполнено(Родитель), Родитель.ВыгрузитьКолонку("Номенклатура"), "");
			Склады   = стрМагазин.ОрганизацияCRM.Склады.Выгрузить();
		Иначе 
			Родитель = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("Каталог");
			Склады 	 = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("Склады");
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст = 
		
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
		|	ЕСТЬNULL(Запасы.КоличествоОстаток, 0) КАК Остаток,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика КАК Характеристика,
		|	ВложенныйЗапрос.Склад КАК Склад
		|ИЗ
		|	(ВЫБРАТЬ
		|		Номенклатура.Ссылка КАК Номенклатура,
		|		СтруктурныеЕдиницы.Ссылка КАК Склад,
		|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика
		|	ИЗ
		|		Справочник.Номенклатура КАК Номенклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ПО (Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
		|					ИЛИ Номенклатура.КатегорияНоменклатуры.Ссылка = ХарактеристикиНоменклатуры.Владелец),
		|		Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|	ГДЕ
		|		НЕ Номенклатура.ПометкаУдаления
		|		И НЕ Номенклатура.ЭтоГруппа
		|		И СтруктурныеЕдиницы.Ссылка В(&Склады)";
		Если ЗначениеЗаполнено(Родитель) Тогда 
			Запрос.Текст = Запрос.Текст + "
			|	И Номенклатура.Родитель В ИЕРАРХИИ(&Родитель)";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	СГРУППИРОВАТЬ ПО
		|		Номенклатура.Ссылка,
		|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
		|		СтруктурныеЕдиницы.Ссылка) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&ТекДата, СтруктурнаяЕдиница В ИЕРАРХИИ (&Склады)) КАК Запасы
		|		ПО ВложенныйЗапрос.Номенклатура = Запасы.Номенклатура
		|			И ВложенныйЗапрос.Характеристика = Запасы.Характеристика
		|			И ВложенныйЗапрос.Склад = Запасы.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекДата, ВидЦен = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВложенныйЗапрос.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0),
		|	ЕСТЬNULL(Запасы.КоличествоОстаток, 0),
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Склад
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Номенклатура.Наименование";
		
		Склады = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("Склады");
		Если Склады = Неопределено Тогда 
			ОбщегоНазначения.СообщитьПользователю("В таблице настроек не заполнена вкладка Склады/Организации");
			Возврат;
		КонецЕсли;
	
	Запрос.УстановитьПараметр("Склады",  Склады.ВыгрузитьКолонку("Склад"));
	Запрос.УстановитьПараметр("ВидЦены", crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ЗакупочнаяЦена"));
	Запрос.УстановитьПараметр("ТекДата", ОбщегоНазначения.ТекущаяДатаПользователя());
	Запрос.УстановитьПараметр("Родитель",  	Родитель);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	РезультатЗапроса.Колонки.Добавить("ИД");
	
	Для каждого СтрокаТЗ Из РезультатЗапроса Цикл
		Если ЗначениеЗаполнено(СтрокаТЗ.Характеристика) Тогда
			СтрокаТЗ.ИД = СокрЛП(СтрокаТЗ.Номенклатура.УникальныйИдентификатор()) 
			+ "#" + СокрЛП(СтрокаТЗ.Характеристика.УникальныйИдентификатор());
		Иначе 
			СтрокаТЗ.ИД = СокрЛП(СтрокаТЗ.Номенклатура.УникальныйИдентификатор());
		КонецЕсли;
	КонецЦикла; 
	
	//  Склады для обмена
	СкладыДляОбмена = Склады.Скопировать();
	
	Для Каждого СтрокаТЧ Из СкладыДляОбмена Цикл
		КодСклада = СокрЛП(СтрокаТЧ.КодСRM);
		Если КодСклада = "" Тогда
			ОбщегоНазначения.СообщитьПользователю("В таблице настроек складов не указан КодCRM для склада: " + СтрокаТЧ.Склад);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоПозицийВПачке = 250;
	
	Счетчик = 0;
	СтТовар = "";
	Предложения = Новый Массив();	
	
	Для каждого Стр Из РезультатЗапроса Цикл
		
		  XmlID	= СокрЛП(Стр.ИД);
			
			Отправлен = Ложь; 
			Счетчик = Счетчик + 1; 
			
			Если СокрЛП(XmlID) <> СтТовар Тогда 	
				Если РезультатЗапроса.Индекс(Стр) = 0 Тогда 	
					масСкладов = Новый Массив;			
				Иначе
					пред = Новый Соответствие();
					пред.Вставить(offers_id, СтТовар);
					пред.Вставить("stores", масСкладов);
					Предложения.Добавить(пред);   						
					масСкладов = Новый Массив;
				КонецЕсли;       		
			КонецЕсли;	
			
			Если Число(Стр.Остаток) < 0 Тогда 
				Стр.Остаток = 0;	
			КонецЕсли;
			
			Цена = СтрЗаменить(строка(Стр.Цена), ",", "."); 
			Остаток = СтрЗаменить(строка(Стр.Остаток), ",", ".");
			
			//  Код склада
			СимвольныйКодСклада = "";
			НайденнаяСтрока = СкладыДляОбмена.СтрНайти(Стр.Склад);
			Если НайденнаяСтрока = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СимвольныйКодСклада = СокрЛП(НайденнаяСтрока.КодСRM);
			Если СимвольныйКодСклада = "" Тогда
				Продолжить;
			КонецЕсли;
			
			скл = Новый Соответствие();
			скл.Вставить("code", СимвольныйКодСклада);
			скл.Вставить("available", СтрЗаменить(строка(Остаток), Символ(160), ""));
			скл.Вставить("purchasePrice", СтрЗаменить(строка(Цена), Символ(160), "")); 
			масСкладов.Добавить(скл);
			
			СтТовар = СокрЛП(XmlID);
			
			КоличествоЗаписей = Счетчик / КоличествоПозицийВПачке;
			Если КоличествоЗаписей = Цел(КоличествоЗаписей) Тогда 
				ОтправитьвCRM(Предложения, стрМагазин);
				Предложения.Очистить();
				Отправлен = Истина;
			КонецЕсли;	
			
			Если Счетчик = РезультатЗапроса.количество() И Не Отправлен Тогда 
				
				пред = Новый Соответствие();
				пред.Вставить(offers_id, СтТовар);
				пред.Вставить("stores", масСкладов);
				Предложения.Добавить(пред);  
				
				ОтправитьвCRM(Предложения, стрМагазин);
				Предложения.Очистить();
				
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура Мод_СохранитьКонстанты() Экспорт
	
	ТаблицаКонстант = Новый ТаблицаЗначений();
	ТаблицаКонстант.Колонки.Добавить("Название");
	ТаблицаКонстант.Колонки.Добавить("Значение");
	ТаблицаКонстант.Колонки.Добавить("Тип");
	
	ПараметрыОбработки = Метаданные.Обработки.crm_RetailCRMОбработка;
	
	Для каждого ТЧ Из ПараметрыОбработки.ТабличныеЧасти Цикл
		
		Если ТЧ.Имя = "ТабКонстанты" Тогда
			
			Для каждого Стр Из ЭтотОбъект[ТЧ.Имя] Цикл
				НовСтр = ТаблицаКонстант.Добавить();
				НовСтр.Название = Стр.Название; 
				НовСтр.Тип		= Стр.Тип; 
				НовСтр.Значение = Стр.Значение;		
			КонецЦикла;
			
		Иначе
			
			ТЗ = Новый ТаблицаЗначений;
			Для каждого реквизит Из ТЧ.Реквизиты Цикл 
				ТЗ.Колонки.Добавить(реквизит.Имя);	
			КонецЦикла;	
			
			Для каждого Стр Из ЭтотОбъект[ТЧ.Имя] Цикл
				ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), Стр);		
			КонецЦикла;
						
			НовСтр = ТаблицаКонстант.Добавить();
			НовСтр.Название = ТЧ.Имя; 
			НовСтр.Тип		= "ТаблицаЗначений"; 
			НовСтр.Значение = ТЗ;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Для каждого рек Из ПараметрыОбработки.Реквизиты Цикл
		НовСтр = ТаблицаКонстант.Добавить();
		НовСтр.Название = рек.Имя; 
		НовСтр.Тип 		= Строка(рек.Тип); 
		НовСтр.Значение = ЭтотОбъект[рек.Имя];
	КонецЦикла; 
			
	crm_RetailCRMОбщийВызовСервера.УстановитьКонстанты(ТаблицаКонстант);
	Мод_ОбновитьСписокКонстант(ЭтотОбъект);
	
КонецПроцедуры

Процедура Мод_ОбновитьСписокКонстант(Объект) Экспорт
	
	ТаблицаКонстант = crm_RetailCRMОбщийВызовСервера.ПолучитьКонстанты();	
	
	Объект.табКонстанты.Очистить();
	
	Если ТипЗнч(ТаблицаКонстант) = Тип("Структура") Тогда
		
		ТаблицаКонстант = ТаблицаКонстант.Константы;
		
		Для каждого Стр Из ТаблицаКонстант Цикл
			Попытка
				Если Стр.Название = "ТабСтатусы" Тогда 
					
					Объект.табСтатусы.Очистить();
					Для каждого стр2 Из Стр.Значение Цикл
						ЗаполнитьЗначенияСвойств(Объект.табСтатусы.Добавить(), стр2);
					КонецЦикла;
					Продолжить;
					
				ИначеЕсли  Стр.Название = "ТабСтатусыТоваров" Тогда
					
					Объект.ТабСтатусыТоваров.Очистить();
					Для каждого стр2 Из Стр.Значение Цикл
						ЗаполнитьЗначенияСвойств(Объект.ТабСтатусыТоваров.Добавить(), стр2);
					КонецЦикла; 
					
				ИначеЕсли Стр.Название = "ТабСтатусыСостояния" Тогда
					
					Объект.ТабСтатусыСостояния.Очистить();
					Для каждого стр2 Из Стр.Значение Цикл
						ЗаполнитьЗначенияСвойств(Объект.ТабСтатусыСостояния.Добавить(), стр2);
					КонецЦикла;
					
				ИначеЕсли Стр.Название = "ТабМенеджеры" Тогда
					
					Объект.ТабМенеджеры.Очистить();
					Для каждого стр2 Из Стр.Значение Цикл
						ЗаполнитьЗначенияСвойств(Объект.ТабМенеджеры.Добавить(), стр2);
					КонецЦикла;
					
				ИначеЕсли Стр.Название = "ТабСклады" Тогда 
					
					Объект.ТабСклады.Очистить();
					Для каждого стр2 Из Стр.Значение Цикл 
						ЗаполнитьЗначенияСвойств(Объект.ТабСклады.Добавить(), стр2);
					КонецЦикла;
					
				ИначеЕсли Стр.Название = "ТабОрганизации" Тогда 
					
					Объект.ТабОрганизации.Очистить();
					Для каждого стр2 Из Стр.Значение Цикл
						ЗаполнитьЗначенияСвойств(Объект.ТабОрганизации.Добавить(), стр2);
					КонецЦикла;
					
				ИначеЕсли Стр.Название = "ТабТипыЦен" Тогда 
					
					Объект.ТабТипыЦен.Очистить();
					Для каждого стр2 Из Стр.Значение Цикл
						ЗаполнитьЗначенияСвойств(Объект.ТабТипыЦен.Добавить(), стр2);
					КонецЦикла;  
					
				ИначеЕсли Стр.Название = "ТабТипыОплат" Тогда 
					
					Объект.ТабТипыОплат.Очистить();
					Для каждого стр2 Из Стр.Значение Цикл
						ЗаполнитьЗначенияСвойств(Объект.ТабТипыОплат.Добавить(), стр2);
					КонецЦикла;
					
				ИначеЕсли Стр.Название = "ТабТипыДоставок" Тогда 
					
					Объект.ТабТипыДоставок.Очистить();
					Для каждого стр2 Из Стр.Значение Цикл
						ЗаполнитьЗначенияСвойств(Объект.ТабТипыДоставок.Добавить(), стр2);
					КонецЦикла;
					
				ИначеЕсли Стр.Название = "ТабКаталог" Тогда 
					
					Объект.ТабКаталог.Очистить();
					Для каждого стр2 Из Стр.Значение Цикл
						НовСтр = Объект.ТабКаталог.Добавить();
						НовСтр.Номенклатура = стр2.Значение;
					КонецЦикла;
					
				ИначеЕсли Стр.Название = "ТабСпособыОформления" Тогда
					
					Объект.ТабСпособыОформления.Очистить();
					Для каждого стр2 Из Стр.Значение Цикл
						ЗаполнитьЗначенияСвойств(Объект.ТабСпособыОформления.Добавить(), стр2);
					КонецЦикла;
				ИначеЕсли Стр.Название = "since_Id" Тогда 
					
					Объект.since_Id = Стр.Значение;
					
				ИначеЕсли Стр.Название = "КлючCRM" Тогда
					
					Объект.КлючCRM = Стр.Значение;
					
				ИначеЕсли Стр.Название = "ИмяСервера" Тогда
					
					Объект.ИмяСервера = Стр.Значение;
					
				ИначеЕсли Стр.Название = "КодМагазина" Тогда
					
					Объект.КодМагазина = Стр.Значение;
					
				ИначеЕсли Стр.Название = "ВыгружатьЗаказы" Тогда 
					
					Объект.ВыгружатьЗаказы = Стр.Значение;
										
				ИначеЕсли Стр.Название = "ВыгружатьОстатки" Тогда
					
					Объект.ВыгружатьОстатки = Стр.Значение;	 
					
				ИначеЕсли Стр.Название = "ПутьКФайлу" Тогда 
					
					Объект.ПутьКФайлу = Стр.Значение;
					
				ИначеЕсли Стр.Название = "ИспользоватьТипыЦен" Тогда
					
					Объект.ИспользоватьТипыЦен = Стр.Значение;
					
				ИначеЕсли Стр.Название = "ЗагружатьЗаказы" Тогда 		
					
					Объект.ЗагружатьЗаказы = Стр.Значение;	
					
				ИначеЕсли Стр.Название = "ВыгружатьОстаткиСУчетомРезервов" Тогда
					
					Объект.ВыгружатьОстаткиСУчетомРезервов = ?(Стр.Значение = Ложь, 0, 1);		
					
				ИначеЕсли Стр.Название = "СозданиеРеализаций" Тогда 
					
					Объект.СозданиеРеализаций = Стр.Значение; 
					
				ИначеЕсли Стр.Название = "ИспользоватьТипыДоставок" Тогда
					
					Объект.ИспользоватьТипыДоставок = Стр.Значение;
					
				ИначеЕсли Стр.Название = "СозданиеОплат" Тогда 
					
					Объект.СозданиеОплат = Стр.Значение;
					
				ИначеЕсли Стр.Название = "ИдентификаторТовара" Тогда 
					
					Объект.ИдентификаторТовара = Стр.Значение;
					
				ИначеЕсли Стр.Название = "НесколькоОрганизаций" Тогда 
					
					Объект.НесколькоОрганизаций = Стр.Значение;						
				ИначеЕсли Стр.Название = "ИспользованиеХарактеристик" Тогда 
					
					Объект.ИспользованиеХарактеристик = Стр.Значение;

				ИначеЕсли Стр.Название = "ВыгружатьТипыЦен" Тогда 
					
					Объект.ВыгружатьТипыЦен = Стр.Значение;	
				ИначеЕсли Стр.Название = "КорпоративныеКлиенты" Тогда 
					
					Объект.КорпоративныеКлиенты = Стр.Значение;
				ИначеЕсли Стр.Название = "ПутьКНастройкам" Тогда 
					
					Объект.ПутьКНастройкам = Стр.Значение;
				ИначеЕсли Стр.Название = "offers_id" Тогда 
					
					Объект.offers_id = Стр.Значение;
				
				ИначеЕсли Стр.Название = "ВыгрузкаОплатВCRM" Тогда 
					
					Объект.ВыгрузкаОплатВCRM = Стр.Значение;
					
				ИначеЕсли Стр.Название = "GUIDОрганизации" Тогда 
					
					Объект.GUIDОрганизации = Стр.Значение; 
					
				ИначеЕсли Стр.Название = "ИспользоватьСпособыОформленияЗаказов" Тогда
					
					Объект.ИспользоватьСпособыОформленияЗаказов = Стр.Значение;
					
				ИначеЕсли Стр.Название = "ОграничитьЗагрузкуЗаказовПоСпособуОформления" Тогда
					
					Объект.ОграничитьЗагрузкуЗаказовПоСпособуОформления = Стр.Значение;
					
				ИначеЕсли Стр.Название = "РаботаСРозницей" Тогда 
					
					Объект.РаботаСРозницей = Стр.Значение;
					
				ИначеЕсли Стр.Название = "ВыгружатьЧеки" Тогда 
					
					Объект.ВыгружатьЧеки = Стр.Значение;
					
				ИначеЕсли Стр.Название = "ВыгружатьЧекиНаВозврат" Тогда 
					
					Объект.ВыгружатьЧекиНаВозврат = Стр.Значение;
					
				ИначеЕсли Стр.Название = "ПрограммаЛояльностиРозница" Тогда
					
					Объект.ПрограммаЛояльностиРозница = Стр.Значение;
					
				ИначеЕсли Стр.Название = "ИдКлиентаПоУмолчанию" Тогда
					
					Объект.ИдКлиентаПоУмолчанию = Стр.Значение;
					
				ИначеЕсли Стр.Название = "СпособОформленияРозница" Тогда
					
					Объект.СпособОформленияРозница = Стр.Значение;
					
				ИначеЕсли Стр.Название = "ПЛНачислитьСоСписанием" Тогда
					
					Объект.ПЛНачислитьСоСписанием = Стр.Значение;
					
				ИначеЕсли Стр.Название = "ПЛНеСписыватьСоСкидками" Тогда
					
					Объект.ПЛНеСписыватьСоСкидками = Стр.Значение;
					
				ИначеЕсли Стр.Название = "Эталонная" Тогда
					
					Объект.Эталонная = Стр.Значение;
					
				ИначеЕсли Стр.Название = "ЗагрузкаБроней" Тогда
					
					Объект.ЗагрузкаБроней = Стр.Значение;         
					
				ИначеЕсли Стр.Название = "СозданиеВозвратов" Тогда 
					
					Объект.СозданиеВозвратов = Стр.Значение;
					
				ИначеЕсли Стр.Название = "ДатаАктуальности" Тогда 
					
					Объект.ДатаАктуальности = Стр.Значение;
		
				Иначе
					
					НовСтр 			= Объект.табКонстанты.Добавить();
					ОписаниеТипа 	= Новый ОписаниеТипов(Стр.Тип); 
					НовСтр.Название = Стр.Название;
					НовСтр.Значение = ОписаниеТипа.ПривестиЗначение();
					Если ЗначениеЗаполнено(Стр.Значение) Тогда
						НовСтр.Значение = Стр.Значение;
					КонецЕсли;
					новСтр.Тип = Стр.Тип;
				КонецЕсли;
				
			Исключение
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());	
			КонецПопытки;
		КонецЦикла;
		
	Иначе 
		СоздатьКонстанты(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьКонстанты(Обработка) Экспорт
	
	ТаблицаКонстант = Обработка.ТабКонстанты;
	
	Стр = ТаблицаКонстант.Добавить();
	Стр.Название = "ИмяСервера"; 										
	Стр.Тип = "Строка"; 									
	Стр.Значение = ИмяСервера;
	
	Стр = ТаблицаКонстант.Добавить();
	Стр.Название = "КлючCRM"; 										
	Стр.Тип = "Строка"; 									
	Стр.Значение = КлючCRM;
	
	Стр = ТаблицаКонстант.Добавить();
	Стр.Название = "КодМагазина"; 									
	Стр.Тип = "Строка"; 									
	Стр.Значение = КодМагазина;
	
	Стр = ТаблицаКонстант.Добавить();
	Стр.Название = "Склад";
	Стр.Тип = "СправочникСсылка.СтруктурныеЕдиницы";
	Стр.Значение = "";
	
	Стр = ТаблицаКонстант.Добавить();
	Стр.Название = "Доставка";
	Стр.Тип = "СправочникСсылка.Номенклатура";
	Стр.Значение = "";
		
	Стр = ТаблицаКонстант.Добавить();
	Стр.Название = "Организация";
	Стр.Тип = "СправочникСсылка.Организации";
	Стр.Значение = "";
	
	Стр = ТаблицаКонстант.Добавить();
	Стр.Название = "Валюта";
	Стр.Тип = "СправочникСсылка.Валюты";
	Стр.Значение = "";	
		
	Стр = ТаблицаКонстант.Добавить();
	Стр.Название = "Налогообложение";
	Стр.Тип = "ПеречислениеСсылка.ТипыНалогообложенияНДС";
	Стр.Значение = "";
			
	Стр = ТаблицаКонстант.Добавить();
	Стр.Название = "БанковскийСчет";
	Стр.Тип = "СправочникСсылка.БанковскиеСчета";
	Стр.Значение = "";
	
	Стр = ТаблицаКонстант.Добавить();
	Стр.Название = "ЗакупочнаяЦена";
	Стр.Тип = "СправочникСсылка.ВидыЦен"; 
	Стр.Значение = "";
	
	Стр = ТаблицаКонстант.Добавить();
	Стр.Название = "ЦенаПродажи"; 		
	Стр.Тип = "СправочникСсылка.ВидыЦен";
	Стр.Значение = "";
	 				
	Стр = ТаблицаКонстант.Добавить();
	Стр.Название = "ЦенаВключаетНДС";
	Стр.Тип = "Булево";										
	Стр.Значение = Ложь;	
	
	Обработка["ИдентификаторТовара"] = "GUID";
	Обработка["offers_id"] = "xmlId";
	Обработка["since_Id"] = 0;   
	
	ТаблицаСостояний = Обработка.ТабСтатусыСостояния;

	НовСтатус = ТаблицаСостояний.Добавить();
	НовСтатус.Название = "new";
	НовСтатус.Состояние = Справочники.СостоянияЗаказовПокупателей.НайтиПоНаименованию("В Работе");
	
КонецПроцедуры

Процедура УстановитьЗначениеКонстанты(ИмяКонстанты, ЗначениеКонстанты) Экспорт
	
	Таб = ПолучитьКонстанты()["константы"];
	ИскСтр = Таб.СтрНайти(ИмяКонстанты, "Название");
	
	Если ИскСтр <> Неопределено Тогда
		ИскСтр.Значение = ЗначениеКонстанты;
		Если ИмяКонстанты = "last_date_changes" ИЛИ ИмяКонстанты = "since_Id" Тогда 
			crm_RetailCRMОбщийВызовСервера.УстановитьКонстанты(Таб);
		Иначе 
			Мод_СохранитьКонстанты();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКонстанты()
	
	Пользователь = Константы.crm_УчтенаяЗаписьСКонстантами.Получить();
	Настройки = ХранилищеОбщихНастроек.Загрузить("retailCRM_константы"
												, "КонстантыОбмена"
												,
												, Пользователь);
	
	Если Настройки = Неопределено ИЛИ ТипЗнч(Настройки) <> Тип("Структура") Тогда
		ОбщегоНазначения.СообщитьПользователю("Настройки восстановить не удалось");
	КонецЕсли;
	
	Возврат  Настройки;
	
КонецФункции

Функция ПроверитьРегистрациюМодуляИнтеграцииНаСервере() Экспорт
	
	ИмяСервера = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера"); 
	ApiKey     = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM");
	Код = "1C";	
		
	Ответ = crm_RetailCRMОбщийВызовСервера.HTTPзапросGET(ИмяСервера, "/api/v5/integration-modules/" 
																						   + Код + "?apiKey=" + ApiKey);
	
	Ответ = crm_RetailCRMОбщийВызовСервера.UnJSONTest(Ответ);
	
	Если Ответ["success"] = Истина Тогда
		Если Ответ["integrationModule"].Количество() <> 0 Тогда
			Возврат Истина;	
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

Процедура РегистрацияСкладскойСистемыНаСервере() Экспорт
	
	ApiKey = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM");
	ИмяСервера = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера");
	
	Переменные = Новый Соответствие();
	Переменные.Вставить("apiKey", ApiKey);
	
	Код = "1C";	
	
	Конфигурация = Новый Соответствие();
	Конфигурация.Вставить("name",				"1C");
	Конфигурация.Вставить("code", 				Код);
	Конфигурация.Вставить("integrationCode", 	Код);
	Конфигурация.Вставить("active", 			"true");
	
	Конфигурация.Вставить("baseUrl",			"http:// demo1c.ru");
	Конфигурация.Вставить("clientId",			"1");    
	Конфигурация.Вставить("logo",				"http:// download.retailcrm.pro/logo1c.svg");
	
	СкладскаяСистема = Новый Соответствие();
	Callback  = Новый Соответствие();
	Actions = Новый Массив();
	Callback.Вставить("actions", Actions);
	СкладскаяСистема.Вставить("store", Callback);

	Конфигурация.Вставить("integrations", СкладскаяСистема);
	
	Переменные.Вставить("integrationModule", crm_RetailCRMОбщийВызовСервера.JSON(Конфигурация));
	
	Ответ = crm_RetailCRMОбщийВызовСервера.HTTPзапросPOST(ИмяСервера, "/api/v5/integration-modules/" 
																						   + Код + "/edit", Переменные);
	
	Если СтрНайти(Ответ, """success"":true") > 0 Тогда                 
		ОбщегоНазначения.СообщитьПользователю("Складская система успешно зарегистрирована!");	
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Трудности с регистрацией складской системы");
		ОбщегоНазначения.СообщитьПользователю(Ответ); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДокумент(Док)
	
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		ОбщегоНазначения.СообщитьПользователю("Документ проведен: " + Док);
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось провести документ: " + Док + " " + ОписаниеОшибки());
		Попытка
			Док.Записать(РежимЗаписиДокумента.Запись);
			ОбщегоНазначения.СообщитьПользователю("Документ записан: " + Док);
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удалось записать документ: " + Док + " " + ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	
КонецПроцедуры

Функция ПреобразоватьДатуCRM(Дата)
	
	Если Дата = Дата(1, 1, 1) ИЛИ Дата = "" ИЛИ  ТипЗнч(Дата) = Тип("Дата") Тогда 
		Дата1С = Дата;
	Иначе		
		Дата1С = Дата(Сред(Дата, 0, 4) + Сред(Дата, 6, 2) + Сред(Дата, 9, 2) 
			   + Сред(Дата, 12, 2) + Сред(Дата, 15, 2) + Сред(Дата, 18, 2));
	КонецЕсли;
	
	Возврат Дата1С;
	
КонецФункции

Функция РасчитатьНДС(Сумма, Ставка)

	НДС = 0;
	
	Если Ставка = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС") Тогда
		Возврат 0;
	ИначеЕсли Ставка = Справочники.СтавкиНДС.НайтиПоНаименованию("18%") Тогда 
		ПроцентСтавки = 18; 
	ИначеЕсли Ставка = Справочники.СтавкиНДС.НайтиПоНаименованию("20%") Тогда 
		ПроцентСтавки = 20;
	ИначеЕсли Ставка = Справочники.СтавкиНДС.НайтиПоНаименованию("10%") Тогда 
		ПроцентСтавки = 10;
	КонецЕсли;

	Если ПроцентСтавки <> 0 И ПроцентСтавки <> Неопределено Тогда 
		НДС = Сумма / (100 + ПроцентСтавки) * ПроцентСтавки;
	КонецЕсли;
	
	Если НДС <> 0 Тогда
		Возврат Число(Формат(НДС, "ЧДЦ=2"));
	Иначе 
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция СоздатьПричинуОтменыПоУмолчанию()
	
	Причина = Справочники.ПричиныОтменыЗаказа.СоздатьЭлемент();
	Причина.Наименование =	"Отмена заказа";
	Причина.Комментарий	 =	"Создана автоматически модулем RetailCRM";
	
	Причина.Записать();
	
	Возврат Причина.Ссылка;

КонецФункции

Функция ПриведениеТелНомераСтандарт(НомерТелефона)
	
	РезНомер = "";
	Для ин = 1 По стрДлина(НомерТелефона) Цикл
		Символ = Сред(НомерТелефона, ин, 1);	
		Если (КодСимвола(Символ) >= 48) И (КодСимвола(Символ) <= 57) Тогда
			РезНомер = РезНомер + Символ;
		КонецЕсли;
	КонецЦикла;
	Если КодСимвола(Лев(резНомер, 1)) = 57 И стрДлина(резНомер)=10 Тогда //  Номер начинается с 9-ки
		РезНомер = "8" + РезНомер;
	КонецЕсли;	
	Если стрДлина(резНомер) = 10 Тогда //  Номер содержит 10 цифр
		РезНомер = "8" + РезНомер;
	КонецЕсли;	
	Если КодСимвола(Лев(РезНомер, 1)) = 55 Тогда //  Номер начинается с 7-ки
		РезНомер = "8" + Прав(РезНомер, стрДлина(резНомер) - 1);
	КонецЕсли;
	Если стрДлина(резНомер) <> 11 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат резНомер;
	
КонецФункции

Процедура ЗагрузитьСтатусы(ТабСтатусы) Экспорт
	
	ИмяСервера 	= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	Если ЗначениеЗаполнено(ИмяСервера) ИЛИ	ЗначениеЗаполнено(КлючCRM) Тогда 
		
		Статусы = crm_RetailCRMОбщийВызовСервера.HTTPзапросGET(ИмяСервера
																	  , "/api/v5/reference/statuses?apiKey=" + КлючCRM);
		Статусы = crm_RetailCRMОбщийВызовСервера.UnJSONTest(Статусы);
		
		ГруппыСтатусов = crm_RetailCRMОбщийВызовСервера.HTTPзапросGET(ИмяСервера
																 , "/api/v5/reference/status-groups?apiKey=" + КлючCRM);
		ГруппыСтатусов = crm_RetailCRMОбщийВызовСервера.UnJSONTest(ГруппыСтатусов);
		
		Если Статусы["success"] = Истина И ГруппыСтатусов["success"] = Истина Тогда
						
			ТаблицаГруппСтатусов = Новый ТаблицаЗначений;
			ТаблицаГруппСтатусов.Колонки.Добавить("Код");
			ТаблицаГруппСтатусов.Колонки.Добавить("Порядок");
            
			Для каждого Группа Из ГруппыСтатусов["statusGroups"] Цикл
				НовСтр = ТаблицаГруппСтатусов.Добавить();
				НовСтр.Код		= Группа.Значение["code"];
				НовСтр.Порядок  = Группа.Значение["ordering"];
			КонецЦикла;
			
			ТаблицаСтатусов = Новый ТаблицаЗначений;
			ТаблицаСтатусов.Колонки.Добавить("Наименование");
			ТаблицаСтатусов.Колонки.Добавить("Название");
			ТаблицаСтатусов.Колонки.Добавить("СостояниеЗаказа");
			ТаблицаСтатусов.Колонки.Добавить("Отгрузка");
			ТаблицаСтатусов.Колонки.Добавить("Отмена");
			ТаблицаСтатусов.Колонки.Добавить("Перемещение");
			ТаблицаСтатусов.Колонки.Добавить("Резервирование");
			ТаблицаСтатусов.Колонки.Добавить("ГруппаСтатуса");
		    ТаблицаСтатусов.Колонки.Добавить("НеЗагружать");	
			ТаблицаСтатусов.Колонки.Добавить("Возврат");
			ТаблицаСтатусов.Колонки.Добавить("Производство");
			ТаблицаСтатусов.Колонки.Добавить("Порядок");
			ТаблицаСтатусов.Колонки.Добавить("ПорядокВГруппе");
			
			Для каждого статус Из Статусы["statuses"] Цикл
								
				Если Статус.Значение["active"] Тогда
					старСостояние = ТабСтатусы.НайтиСтроки(Новый Структура("Название", Статус.Значение["code"]));	
					Если старСостояние.Количество() <> 0 Тогда  
						новСтр = ТаблицаСтатусов.Добавить();
						ЗаполнитьЗначенияСвойств(новСтр,старСостояние[0]);
						
						найдСтроки = ТаблицаГруппСтатусов.НайтиСтроки(Новый Структура("Код",Статус.Значение["group"]));
						Если найдСтроки.Количество() Тогда
							новСтр.ПорядокВГруппе = найдСтроки[0].Порядок;	
						КонецЕсли;
						
						новСтр.Порядок = Статус.Значение["ordering"];
												
						Продолжить;
					КонецЕсли;
					
					новСтр = ТаблицаСтатусов.Добавить();
					новСтр.Наименование 	= Статус.Значение["name"];
					новСтр.Название 		= Статус.Значение["code"];
					новСтр.ГруппаСтатуса 	= Статус.Значение["group"];
					новСтр.Порядок 			= Статус.Значение["ordering"];
					
					найдСтроки = ТаблицаГруппСтатусов.НайтиСтроки(Новый Структура("Код",Статус.Значение["group"]));
					Если найдСтроки.Количество() Тогда
						новСтр.ПорядокВГруппе = найдСтроки[0].Порядок;	
					КонецЕсли;
					
					Если Статус.Значение["group"] = "new" Тогда
						
						новСтр.Резервирование = Истина;
						
					ИначеЕсли Статус.Значение["group"] = "delivery" Тогда
						
						новСтр.Отгрузка = Истина;
												
					ИначеЕсли Статус.Значение["group"] = "cancel" Тогда
						
						новСтр.Отмена = Истина;	    
						
					КонецЕсли;
					
					найдСостояние = Справочники.СостоянияЗаказовПокупателей.НайтиПоНаименованию(новСтр.Наименование);
					Если найдСостояние <> Справочники.СостоянияЗаказовПокупателей.ПустаяСсылка() Тогда
						новСтр.СостояниеЗаказа = найдСостояние.Ссылка;
					Иначе
						новСостояние = Справочники.СостоянияЗаказовПокупателей.СоздатьЭлемент();
						новСостояние.Наименование = новСтр.Наименование;
						новСостояние.Записать();
						новСтр.СостояниеЗаказа = новСостояние.Ссылка;
					КонецЕсли;
					
				Иначе
					
					старСостояние = ТабСтатусы.НайтиСтроки(Новый Структура("Название", Статус.Значение["code"]));	
					Если старСостояние.Количество() <> 0 Тогда 
						Индекс = ТабСтатусы.Индекс(старСостояние[0]);
						ТабСтатусы.Удалить(Индекс);			
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТаблицаСтатусов.Сортировать("ПорядокВГруппе, Порядок");
			ТаблицаСтатусов.Свернуть("Наименование, Название, СостояниеЗаказа, Отгрузка, Отмена, Резервирование, ГруппаСтатуса, Перемещение, НеЗагружать, Возврат, Производство");
			
			ТабСтатусы.Загрузить(ТаблицаСтатусов);
			
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Произошла ошибка при обращении к серверу, проверьте корректность данных ИмяСервера ИЛИ КлючCRM");
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Не введены константы ИмяСервера ИЛИ КлючCRM...");
	КонецЕсли; 
					
КонецПроцедуры

Процедура ЗагрузитьСтатусыТоваров(ТабСтатусыТоваров) Экспорт

	ИмяСервера 	= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	Если ЗначениеЗаполнено(ИмяСервера) ИЛИ ЗначениеЗаполнено(КлючCRM) Тогда
		
		СтатусыТоваров = crm_RetailCRMОбщийВызовСервера.HTTPзапросGET(ИмяСервера,
																"/api/v5/reference/product-statuses?apiKey=" + КлючCRM);
		СтатусыТоваров = crm_RetailCRMОбщийВызовСервера.UnJSONTest(СтатусыТоваров);
		
		Если СтатусыТоваров["success"] Тогда
			
			ТабСтатусыТоваров.Очистить();
			
			Для каждого СтатусТовара Из СтатусыТоваров["productStatuses"] Цикл
				
				Если СтатусТовара.Значение["active"] Тогда
					
					НовСтр = ТабСтатусыТоваров.Добавить();
					НовСтр.Название = СтатусТовара.Значение["code"];
					НовСтр.Наименование = СтатусТовара.Значение["name"];
					НовСтр.Отмена = СтатусТовара.Значение["cancelStatus"];
					
				КонецЕсли;
				
			КонецЦикла; 
			
			ТабСтатусыТоваров.Сортировать("Отмена");
			
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Произошла ошибка при обращении к серверу, проверьте корректность данных ИмяСервера ИЛИ КлючCRM");
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Не введены константы ИмяСервера ИЛИ КлючCRM...");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьМенеджеров(ТабМенеджеров) Экспорт

	ИмяСервера 	= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	Если ЗначениеЗаполнено(ИмяСервера) ИЛИ ЗначениеЗаполнено(КлючCRM) Тогда
		
		Менеджеры = crm_RetailCRMОбщийВызовСервера.HTTPзапросGET(ИмяСервера, "/api/v5/users?apiKey=" + КлючCRM);
		Менеджеры = crm_RetailCRMОбщийВызовСервера.UnJSONTest(Менеджеры);
		
		Если Менеджеры["success"] Тогда
						
			Для каждого Менеджер Из Менеджеры["users"] Цикл
				
				Если Менеджер["active"] Тогда
					
					старСостояние = ТабМенеджеров.НайтиСтроки(Новый Структура("ИД", Менеджер["id"]));	
					Если старСостояние.Количество() <> 0 Тогда  
						новСтр = ТабМенеджеров.Добавить();
						ЗаполнитьЗначенияСвойств(новСтр, старСостояние[0]);												
						Продолжить;
					КонецЕсли;
					
					НовСтр = ТабМенеджеров.Добавить();
					НовСтр.ИД = Менеджер["id"];
					НовСтр.НаименованиеВCRM = Менеджер["firstName"	] + " " +
											  Менеджер[ "lastName"	] + " " +
											  Менеджер["patronymic"];

				Иначе
					
					старСостояние = ТабМенеджеров.НайтиСтроки(Новый Структура("ИД", Менеджер["id"]));	
					Если старСостояние.Количество() <> 0 Тогда 
						Индекс = ТабМенеджеров.Индекс(старСостояние[0]);
						ТабМенеджеров.Удалить(Индекс);			
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;		
				
			КонецЦикла;
			
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Произошла ошибка при обращении к серверу, проверьте корректность данных ИмяСервера ИЛИ КлючCRM");
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Не введены константы ИмяСервера ИЛИ КлючCRM...");
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьСклады(ТабСклады) Экспорт

	ИмяСервера 	= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	Если ЗначениеЗаполнено(ИмяСервера) ИЛИ ЗначениеЗаполнено(КлючCRM) Тогда
		
		Склады = crm_RetailCRMОбщийВызовСервера.HTTPзапросGET(ИмяСервера,"/api/v5/reference/stores?apiKey=" + КлючCRM);
		Склады = crm_RetailCRMОбщийВызовСервера.UnJSONTest(Склады);
		
		Если Склады["success"] Тогда
			
			ТабСклады.Очистить();
			
			Для каждого Склад Из Склады["stores"] Цикл
				
				Если Склад["active"] Тогда
					
					НовСтр = ТабСклады.Добавить();
					НовСтр.КодСRM = Склад["code"];
					НовСтр.НаименованиеВCRM = Склад["name"]; 
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Произошла ошибка при обращении к серверу, проверьте корректность данных ИмяСервера ИЛИ КлючCRM");
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Не введены константы ИмяСервера ИЛИ КлючCRM...");
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьТипыЦен(ТабТиповЦен) Экспорт

	ИмяСервера 	= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	Если ЗначениеЗаполнено(ИмяСервера) ИЛИ ЗначениеЗаполнено(КлючCRM) Тогда
		
		ТипыЦен = crm_RetailCRMОбщийВызовСервера.HTTPзапросGET(ИмяСервера,"/api/v5/reference/price-types?apiKey=" + КлючCRM);
		ТипыЦен = crm_RetailCRMОбщийВызовСервера.UnJSONTest(ТипыЦен);
		
		Если ТипыЦен["success"] Тогда
			
			ТабТиповЦен.Очистить();
			
			Для каждого ТипЦены Из ТипыЦен["priceTypes"] Цикл
				
				Если ТипЦены["active"] Тогда
					
					НовСтр = ТабТиповЦен.Добавить();
					НовСтр.КодCRM = ТипЦены["code"];
					НовСтр.НаименованиеВCRM = ТипЦены["name"]; 
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Произошла ошибка при обращении к серверу, проверьте корректность данных ИмяСервера ИЛИ КлючCRM");
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Не введены константы ИмяСервера ИЛИ КлючCRM...");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьТипыОплат(ТабТиповОплат) Экспорт

	ИмяСервера 	= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	Если ЗначениеЗаполнено(ИмяСервера) ИЛИ ЗначениеЗаполнено(КлючCRM) Тогда
		
		ТипыОплат = crm_RetailCRMОбщийВызовСервера.HTTPзапросGET(ИмяСервера, "/api/v5/reference/payment-types?apiKey=" + КлючCRM);
		ТипыОплат = crm_RetailCRMОбщийВызовСервера.UnJSONTest(ТипыОплат);
		
		Если ТипыОплат["success"] Тогда
			
			ТабТиповОплат.Очистить();
			
			Для каждого ТипОплаты Из ТипыОплат["paymentTypes"] Цикл
				
				Если ТипОплаты.Значение["active"] Тогда
					
					НовСтр = ТабТиповОплат.Добавить();
					НовСтр.КодCRM = ТипОплаты.Значение["code"];
					НовСтр.НаименованиеВCRM = ТипОплаты.Значение["name"]; 
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Произошла ошибка при обращении к серверу, проверьте корректность данных ИмяСервера ИЛИ КлючCRM");
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Не введены константы ИмяСервера ИЛИ КлючCRM...");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьТипыДоставок(ТабДоставок) Экспорт

	ИмяСервера 	= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	Если ЗначениеЗаполнено(ИмяСервера) ИЛИ	ЗначениеЗаполнено(КлючCRM) Тогда
		
		ТипыДоставок = crm_RetailCRMОбщийВызовСервера.HTTPзапросGET(ИмяСервера
																, "/api/v5/reference/delivery-types?apiKey=" + КлючCRM);
		ТипыДоставок = crm_RetailCRMОбщийВызовСервера.UnJSONTest(ТипыДоставок);
		
		Если ТипыДоставок["success"] Тогда
			
			Для каждого ТипДоставки Из ТипыДоставок["deliveryTypes"] Цикл
				
				Если ТипДоставки.Значение["active"] Тогда
					
					старСостояние = ТабДоставок.НайтиСтроки(Новый Структура("КодCRM", ТипДоставки.Значение["code"]));	
					Если старСостояние.Количество() <> 0 Тогда  
						новСтр = ТабДоставок.Добавить();
						ЗаполнитьЗначенияСвойств(новСтр, старСостояние[0]);												
						Продолжить;
					КонецЕсли;
					
					НовСтр = ТабДоставок.Добавить();
					НовСтр.КодCRM = ТипДоставки.Значение["code"];
					НовСтр.НаименованиеВCRM = ТипДоставки.Значение["name"]; 
					
				Иначе
					
					старСостояние = ТабДоставок.НайтиСтроки(Новый Структура("КодCRM", ТипДоставки.Значение["code"]));	
					Если старСостояние.Количество() <> 0 Тогда 
						Индекс = ТабДоставок.Индекс(старСостояние[0]);
						ТабДоставок.Удалить(Индекс);			
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
			
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Произошла ошибка при обращении к серверу, проверьте корректность данных ИмяСервера ИЛИ КлючCRM");
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Не введены константы ИмяСервера ИЛИ КлючCRM...");
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьСпособыОформления(ТабСпособыОформления) Экспорт
	
	ИмяСервера 	= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM		= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM"));
	
	Если ЗначениеЗаполнено(ИмяСервера) ИЛИ ЗначениеЗаполнено(КлючCRM) Тогда
		
		СпособыОформления = crm_RetailCRMОбщийВызовСервера.HTTPзапросGET(ИмяСервера, 
																   "/api/v5/reference/order-methods?apiKey=" + КлючCRM);
		СпособыОформления = crm_RetailCRMОбщийВызовСервера.UnJSONTest(СпособыОформления);
		
		Если СпособыОформления["success"] Тогда
			
			ТабСпособыОформления.Очистить();
			
			Для каждого СпособОформления Из СпособыОформления["orderMethods"] Цикл
									
					Если СпособОформления.Значение["active"] Тогда
						
						Стр = Справочники.ИсточникиПривлеченияПокупателей.НайтиПоРеквизиту("crm_КодRetail"
																				   , СпособОформления.Значение["code"]);
						НовСтр = ТабСпособыОформления.Добавить();
						НовСтр.КодCRM = СпособОформления.Значение["code"];
						
						Если Стр <> Справочники.ИсточникиПривлеченияПокупателей.ПустаяСсылка() Тогда
							
							НовСтр.Название = Стр;
							
						Иначе
							
							НовСпр = Справочники.ИсточникиПривлеченияПокупателей.СоздатьЭлемент();
							НовСпр.crm_КодRetail = СпособОформления.Значение["code"];
							НовСпр.ДатаСоздания = ОбщегоНазначения.ТекущаяДатаПользователя();
							НовСпр.Наименование = СпособОформления.Значение["name"];
							НовСпр.Записать();
							
							НовСтр.Название = НовСпр.Ссылка;
							
						КонецЕсли;
					
					КонецЕсли;
				
			КонецЦикла; 
						
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Произошла ошибка при обращении к серверу, проверьте корректность данных ИмяСервера ИЛИ КлючCRM");
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Не введены константы ИмяСервера ИЛИ КлючCRM...");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧасти(Обработка) Экспорт
	
	ТабЧасти = Метаданные.Обработки.crm_RetailCRMОбработка.ТабличныеЧасти;
	
	СоздатьКонстанты(Обработка);
	
	Для каждого ТабЧасть Из ТабЧасти Цикл
		Если ТабЧасть.Имя = "ТабСтатусы" Тогда
			ЗагрузитьСтатусы(Обработка[ТабЧасть.Имя]);
			
		ИначеЕсли  ТабЧасть.Имя = "ТабСтатусыТоваров" Тогда
			ЗагрузитьСтатусыТоваров(Обработка[ТабЧасть.Имя]);
			
		ИначеЕсли  ТабЧасть.Имя = "ТабМенеджеры" Тогда
			ЗагрузитьМенеджеров(Обработка[ТабЧасть.Имя]);

		ИначеЕсли  ТабЧасть.Имя = "ТабСклады" Тогда
			ЗагрузитьСклады(Обработка[ТабЧасть.Имя]);

		ИначеЕсли  ТабЧасть.Имя = "ТабТипыЦен" Тогда
			ЗагрузитьТипыЦен(Обработка[ТабЧасть.Имя]);

		ИначеЕсли  ТабЧасть.Имя = "ТабТипыОплат" Тогда
			ЗагрузитьТипыОплат(Обработка[ТабЧасть.Имя]);
		
		ИначеЕсли  ТабЧасть.Имя = "ТабТипыДоставок" Тогда
            ЗагрузитьТипыДоставок(Обработка[ТабЧасть.Имя]);

		ИначеЕсли ТабЧасть.Имя = "ТабСпособыОформления" Тогда
			ЗагрузитьСпособыОформления(Обработка[ТабЧасть.Имя]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

Процедура УНФ_БронированиеТоваров(ТЗБрони, Док, ТЗcrm, ИдЗаказа)
	
	// ищем все паки заказа 
	Если ТЗБрони.Количество() > 0 Тогда 
		БрониПоЗаказу = ТЗБрони.НайтиСтроки(Новый Структура("IDзаказа", ИдЗаказа));
		
		СтатусТовара = "";
		
		// если метод history, то идем по броням, если получаем заказ по ид, идем по заказу
		Кейс = "";
		Для Каждого стрБр Из ТЗБрони Цикл
			Если стрБР.метод = "history" Тогда
				Кейс = 1;
			ИначеЕсли 
				стрБР.метод = "packs" Тогда
				Кейс = 2;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		// тут идти надо не по паку, а по документу И искать паки по строкам
		СписокСкладов = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("Склады");
		
		Если БрониПоЗаказу <> Неопределено Тогда 
			
			Если Кейс = 1 Тогда 
				
				// идем по каждому паку И ищем по id пака его в 1С
				// если нашли по ид меняем
				// если не нашли по ид пака, ищем по id позиции,меняем 
				Для Каждого Бронь Из БрониПоЗаказу Цикл 
					
					НайденСтрока1С = Док.Товары.СтрНайти(Бронь.IDпака, "crm_IDпака");
					Если НайденСтрока1С = Неопределено Тогда 
						
						НайденСтрока1С = Док.Запасы.СтрНайти(Бронь.idПозиции, "crm_idПозиции");
						
						Если НайденСтрока1С <> Неопределено Тогда 
							// ищем эту строку в crm чтобы понять статус
							стрCRM = ТЗcrm.СтрНайти(Бронь.idПозиции, "ИДСтроки");
							Если стрCRM <> Неопределено Тогда 
								СтатусТовара = стрCRM.СтатусТовара;
							КонецЕсли;
							
							Если Бронь.Удалена = Истина Тогда 
								// НайденСтрока1С.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
								НайденСтрока1С.crm_IDпака		  = 0;
								НайденСтрока1С.crm_Склад  		  = Справочники.Склады.ПустаяСсылка();	
								НайденСтрока1С.crm_КоличествоБронь= 0;
								
							Иначе 
								Если СтатусТовара = "in-reserve" ИЛИ СтатусТовара = "completed" Тогда
									Если Док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Тогда 
										НайденСтрока1С.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
									Иначе 
										НайденСтрока1С.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
									КонецЕсли;
									НайденСтрока1С.crm_IDпака		  = Бронь.IDпака;
									
									НайденСтрока1С.crm_КоличествоБронь= Бронь.Количество;
									
									Если ЗначениеЗаполнено(Бронь.Склад) Тогда 
										НайденнаяСтрока = СписокСкладов.СтрНайти(Бронь.Склад, "КодCRM"); 
										Если НайденнаяСтрока <> Неопределено Тогда
											Склад = НайденнаяСтрока.Склад;
											НайденСтрока1С.crm_Склад  				= Склад;
											НайденСтрока1С.СтруктурнаяЕдиницаРезерв	= Склад;
										КонецЕсли;
									КонецЕсли;
									
									КолБронь = Бронь.Количество;
									Если КолБронь = Неопределено Тогда 
										Если Бронь.ИзменившеесяПоле = "quantity" Тогда 
											КолБронь = Бронь.newValue;
										КонецЕсли;
									КонецЕсли;
									
									Если КолБронь <> Неопределено Тогда 	 
										Если КолБронь <> НайденСтрока1С.Количество Тогда 
											НеХватаетКоличество = НайденСтрока1С.Количество - КолБронь;
											// добавляем отдельной строкой без брони
											НайденСтрока1С.Количество		  = КолБронь;
											НайденСтрока1С.КоличествоУпаковок  = КолБронь;
											НовСтр 						= Док["Товары"].Добавить();
											новСтр.Номенклатура 		= НайденСтрока1С.Номенклатура;
											новСтр.Характеристика 		= НайденСтрока1С.Характеристика;
											НовСтр.ВидЦены 				= НайденСтрока1С.ВидЦены;
											новСтр.Количество 			= НеХватаетКоличество;
											новСтр.Цена 				= НайденСтрока1С.Цена;
											новСтр.Склад 				= НайденСтрока1С.Склад;
											новСтр.КоличествоУпаковок 	= НеХватаетКоличество;
											новСтр.Сумма				= новСтр.Количество * новСтр.Цена;
											новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.КОбеспечению;
											новСтр.Отменено				= Ложь;
											новСтр.СтавкаНДС			= НайденСтрока1С.СтавкаНДС;
											
											Если НовСтр.СтавкаНДС <> Справочники.СтавкиНДС.БезНДС Тогда 
												новСтр.СуммаНДС 		= РасчитатьНДС(новСтр.Сумма, новСтр.СтавкаНДС);
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;				
				КонецЦикла;
				
			ИначеЕсли Кейс = 2 Тогда
				
				Для Каждого Стр Из Док.Товары Цикл 
					// ищем в тз броней пак чтоб перезаписать
					НайденСтрока = ТЗБрони.СтрНайти(Стр.crm_IDпака, "IDпака");
					// если пака нет пака с таким ид, ищем пак по товару, чтобы удалить
					
					Если НайденСтрока = Неопределено Тогда 
						
						Если ЗначениеЗаполнено(Стр.crm_idПозиции) Тогда 
							НайденСтрока = ТЗБрони.СтрНайти(Стр.crm_idПозиции, "idПозиции");
							
							Если НайденСтрока = Неопределено Тогда
								// Стр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.КОбеспечению;
							Иначе
								// ищем эту строку в crm чтобы понять статус
								стрCRM = ТЗcrm.СтрНайти(Стр.crm_idПозиции, "ИДСтроки");
								Если стрCRM <> Неопределено Тогда 
									СтатусТовара = стрCRM.СтатусТовара;
								КонецЕсли;
								
								Если СтатусТовара = "in-reserve" ИЛИ СтатусТовара = "completed" Тогда
									Если Док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Тогда 
										Стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
									Иначе 
										Стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
									КонецЕсли;
									Стр.crm_IDпака		  	= НайденСтрока.IDпака;
									Стр.crm_КоличествоБронь = НайденСтрока.Количество;
									
									Если ЗначениеЗаполнено(НайденСтрока.Склад) Тогда 
										НайденнаяСтрока = СписокСкладов.СтрНайти(НайденСтрока.Склад, "КодCRM"); 
										Если НайденнаяСтрока <> Неопределено Тогда
											Склад 						 = НайденнаяСтрока.Склад;  
											Стр.СтруктурнаяЕдиницаРезерв = Склад;
											Стр.crm_Склад  		  		 = Склад;
										КонецЕсли;
									КонецЕсли; 
									Если НайденСтрока.Количество <> Стр.Количество Тогда 
										НеХватаетКоличество = Стр.Количество - НайденСтрока.Количество;
										// добавляем отдельной строкой без брони
										Стр.Количество		  = НайденСтрока.Количество;
										Стр.КоличествоУпаковок  = НайденСтрока.Количество;
										НовСтр 						= Док["Товары"].Добавить();
										новСтр.Номенклатура 		= Стр.Номенклатура;
										новСтр.Характеристика 		= Стр.Характеристика;
										НовСтр.ВидЦены 				= Стр.ВидЦены;
										новСтр.Количество 			= НеХватаетКоличество;
										новСтр.Цена 				= Стр.Цена;
										новСтр.Склад 				= Стр.Склад;
										новСтр.КоличествоУпаковок 	= новСтр.Количество;
										новСтр.Сумма				= новСтр.Количество * новСтр.Цена;
										новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.КОбеспечению;
										новСтр.Отменено				= Ложь;
										новСтр.СтавкаНДС			= Стр.СтавкаНДС;
										
										Если НовСтр.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда 
											новСтр.СуммаНДС 		= РасчитатьНДС(новСтр.Сумма, новСтр.СтавкаНДС);
										КонецЕсли;
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;	
					КонецЕсли;				
				КонецЦикла;
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УНФ_СравнитьСоставЗаказа(Док, ТоварыCRM, ОтменаЗаказа, Эталонная, ТЗброни, СоответствиеСтатусов) 
	
	ИспользованиеХарактеристик = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик");
	GUIDОрганизации = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("GUIDОрганизации");
	offers_id = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("offers_id");
	// Идентификатор товара
	ИдентификаторТовара = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентификаторТовара = Неопределено ИЛИ Не ЗначениеЗаполнено(ИдентификаторТовара) Тогда 
		ИдентификаторТовара = "Код";
	КонецЕсли;

	ТЗcrm = ТоварыCRM.Скопировать();
	
	Колво = Док["Запасы"].Количество() - 1; 
	ИндексСтр = Колво;
	Для Счетчик = 0 по Колво Цикл
		стр1С = Док["Запасы"].Получить(ИндексСтр); 
		Если ИспользованиеХарактеристик = Истина Тогда
			XmlID = СокрЛП(стр1С.Номенклатура.УникальныйИдентификатор());
			XmlID = ?(ЗначениеЗаполнено(стр1С.Характеристика), 
			XmlID + "#" + СокрЛП(стр1С.Характеристика.УникальныйИдентификатор()), XmlID);
			Если  GUIDОрганизации = Истина Тогда
				XmlID = СокрЛП(" " + Док.Организация.УникальныйИдентификатор() + "#" + XmlID);
			КонецЕсли;
		Иначе 
			// Идентификатор товара
			Если ИдентификаторТовара = "Артикул" Тогда
				XmlID	= СокрЛП(стр1С.Номенклатура.Артикул);
			ИначеЕсли ИдентификаторТовара = "GUID" Тогда
				XmlID	= СокрЛП(стр1С.Номенклатура.УникальныйИдентификатор());
			Иначе
				XmlID = СокрЛП(стр1С.Номенклатура.Код);
			КонецЕсли;
		КонецЕсли;
		
		// можно искать по идентификатору ИЛИ id строки. Если заказ еще не загружался в 1С - эти поля пустые
		// находим сроку с номенклатурой 
		НайденСтр = ТЗcrm.НайтиСтроки(Новый Структура("xmlId", XmlID));
		Если НайденСтр <> Неопределено И НайденСтр.Количество() <> 0 Тогда
			Если НайденСтр.Количество() > 0 Тогда 
				// ищем по идентификатору
				НайденСтрока = ТЗcrm.СтрНайти(Строка(стр1С.КлючСвязи), "ИдентификаторСтроки1С");                                                     
				Если НайденСтрока <> Неопределено Тогда
					УНФ_СоздатьСтрокуДокумента(Док, НайденСтрока, ОтменаЗаказа, Эталонная, стр1С, СоответствиеСтатусов);
					ТЗcrm.Удалить(ТЗcrm.Индекс(НайденСтрока));	
				Иначе 
					Док["Запасы"].Удалить(стр1С);
				КонецЕсли;
			КонецЕсли;
		Иначе 
			Док["Запасы"].Удалить(стр1С);
            
		КонецЕсли;
		ИндексСтр = ИндексСтр - 1;
	КонецЦикла;
	
	Индекс = ТЗcrm.Количество() - 1;
	Пока Индекс >= 0 Цикл
		
		Если ЗначениеЗаполнено(ТЗcrm[Индекс].ИдентификаторСтроки1С) Тогда 
			НайденСтрока1С = Док["Запасы"].СтрНайти(Число(ТЗcrm[Индекс].ИдентификаторСтроки1С), "КлючСвязи");
			Если НайденСтрока1С <> Неопределено Тогда
				УНФ_СоздатьСтрокуДокумента(Док, ТЗcrm[Индекс], ОтменаЗаказа, Эталонная, НайденСтрока1С, СоответствиеСтатусов);
				ТЗcrm.Удалить(ТЗcrm[Индекс]); 
				Индекс = Индекс - 1;
			Иначе 
				// добавляем строку в Док.Товары
				УНФ_СоздатьСтрокуДокумента(Док, ТЗcrm[Индекс], ОтменаЗаказа, Эталонная, Неопределено, СоответствиеСтатусов);
				// удаляем строку Из тз
				ТЗcrm.Удалить(ТЗcrm[Индекс]); 
				Индекс = Индекс - 1;
			КонецЕсли;
		Иначе
			// пробуем найти по id строки
			НайденСтрока1С = Док["Запасы"].СтрНайти(ТЗcrm[Индекс].ИДСтроки, "crm_idПозиции");
			Если НайденСтрока1С <> Неопределено Тогда
				УНФ_СоздатьСтрокуДокумента(Док, ТЗcrm[Индекс], ОтменаЗаказа, Эталонная, НайденСтрока1С, СоответствиеСтатусов);
				ТЗcrm.Удалить(ТЗcrm[Индекс]); 
				Индекс = Индекс - 1; 
			Иначе
				// добавляем строку в Док.Товары
				УНФ_СоздатьСтрокуДокумента(Док, ТЗcrm[Индекс], ОтменаЗаказа, Эталонная, Неопределено, СоответствиеСтатусов);
				// удаляем строку Из тз
				ТЗcrm.Удалить(ТЗcrm[Индекс]); 
				Индекс = Индекс - 1;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура Мод_ЗагрузитьБрониПоЗаказу(ИДЗаказа, ТЗБрони) Экспорт
		
	ИмяСервера = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера");
	ApiKey = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM");
	Если ИДЗаказа <> "" Тогда 
		АдресСкрипта = "/api/v5/orders/packs?filter[orderId]=" + Формат(ИДЗаказа, "ЧГ=0") + "&apiKey=" + ApiKey;
	КонецЕсли;

	Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера);
	
	ТЗБрони = Новый ТаблицаЗначений;
	ТЗБрони.Колонки.Добавить("IDзаказа");
	ТЗБрони.Колонки.Добавить("IDпака");
	ТЗБрони.Колонки.Добавить("ИзменившеесяПоле");
	ТЗБрони.Колонки.Добавить("Количество");
	ТЗБрони.Колонки.Добавить("Склад");
	ТЗБрони.Колонки.Добавить("Удалена");
	ТЗБрони.Колонки.Добавить("Создана");
	ТЗБрони.Колонки.Добавить("oldValue");
	ТЗБрони.Колонки.Добавить("newValue");
	ТЗБрони.Колонки.Добавить("xmlId"); 
	ТЗБрони.Колонки.Добавить("externalId");
	ТЗБрони.Колонки.Добавить("idПозиции");
	ТЗБрони.Колонки.Добавить("sinceId");
    ТЗБрони.Колонки.Добавить("метод");
	
	Для каждого Стр Из Ответ["packs"] Цикл
		СтрТЗ = ТЗБрони.Добавить();
		СтрТЗ.метод 	= "packs";
		СтрТЗ.IDзаказа 	= ИДЗаказа; 
		СтрТЗ.IDпака 	= Формат(Стр["id"], "ЧГ=");
		СтрТЗ.Создана 	= True;
		
		Если Стр["store"] <> Неопределено Тогда 
			СтрТЗ.Склад 	= Стр["store"];
		КонецЕсли;
		
		СтрТЗ.Количество = Стр["quantity"];
		СтрТЗ.xmlId 	 = Стр["item"]["offer"]["externalId"];
		СтрТЗ.externalId = Стр["item"]["offer"]["xmlId"]; 
		СтрТЗ.idПозиции	 = Формат(Стр["item"]["id"], "ЧГ=");
	КонецЦикла;
	
	Если Ответ["pagination"] <> Неопределено Тогда
		
		ВсегоСтраниц = Ответ["pagination"]["totalPageCount"];
		Для ин = 2 По ВсегоСтраниц Цикл
			
			Ответ = ЗапросCRM(АдресСкрипта + "&page=" + строка(Формат(ин, "ЧГ=0")), ИмяСервера);
			
			Для каждого Стр Из Ответ["packs"] Цикл
				СтрТЗ = ТЗБрони.Добавить();
				СтрТЗ.IDзаказа 	= ИДЗаказа; 
				СтрТЗ.IDпака 	= Формат(Стр["id"], "ЧГ=");
				СтрТЗ.Создана 	= True;
				
				Если Стр["store"] <> Неопределено Тогда 
					СтрТЗ.Склад 	= Стр["store"];
				КонецЕсли;
				
				СтрТЗ.Количество = Стр["quantity"];
				СтрТЗ.xmlId 	 = Стр["item"]["offer"]["externalId"];
				СтрТЗ.externalId = Стр["item"]["offer"]["xmlId"]; 
				СтрТЗ.idПозиции	 = Формат(Стр["item"]["id"], "ЧГ=");
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарезервироватьТоварыВЗаказе(Док, СтарыеРезервы)

	Для каждого Стр Из Док["Запасы"] Цикл
		
		Если Стр.Номенклатура = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("Доставка") Тогда
			Продолжить;
		КонецЕсли;
		
		ОстатокТовара = обработки.crm_RetailCRMОбработка.ПолучитьСвободныйОстаток(Стр.Номенклатура
																				 , Док.СтруктурнаяЕдиницаРезерв);	
		
		Если ОстатокТовара[0].КоличествоОстаток - Стр.Количество >= 0 Тогда
			Стр.Резерв = Стр.Количество;
		Иначе
			Стр.Резерв = 0;
		КонецЕсли;  
		
	КонецЦикла;

КонецПроцедуры

Функция СопоставитьСтатус(Статус, НаборСтатусов)	
	ВыборкаСтатуса = НаборСтатусов.НайтиСтроки(Новый Структура("Название", Статус));
	
	Если ВыборкаСтатуса.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе 
		Возврат ВыборкаСтатуса[0];		
	КонецЕсли;
	
КонецФункции

Функция СопоставитьСпособ(Способ, НаборСпособов)	
	ВыборкаСпособа = НаборСпособов.НайтиСтроки(Новый Структура("КодCRM", Способ));
	
	Если ВыборкаСпособа.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе 
		Возврат ВыборкаСпособа[0];		
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузкаЗаказов(МассивИД, ТЗброни = Неопределено)
		
	// Загружаем заказы пачками чтобы избавиться от переполнения строки запроса И памяти на сервере на одну операцию
	ИмяСервера  = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера");
	ApiKey 		= crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM");
	
	КоличествоЗаказов = 0;
	
	МассивИДЗаказов = Новый Массив;
	
	ФильтрИд = "";	
	
	Для Инд = 1 По МассивИД.Количество() Цикл
		
		КоличествоЗаказов = КоличествоЗаказов  + 1;
		
		МассивИДЗаказов.Добавить(МассивИД[Инд - 1]);
		
		ФильтрИд = ФильтрИд + "filter[ids][]=" + Формат(МассивИД[Инд - 1].НомерЗаказа, "ЧГ=") + "&";
		
		Если  КоличествоЗаказов = 50 Тогда 
			
			АдресСкрипта = "/api/v5/orders?" + ФильтрИд + "&limit=100&apiKey=" + ApiKey;	  		
			
			Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера); 
			Мод_СозданиеЗаказов(Ответ["orders"], ТЗброни);
			
			КоличествоЗаказов = 0;
			МассивИДЗаказов = Новый Массив; 
			ФильтрИд = "";	
			
		КонецЕсли;
		
	КонецЦикла;
	
	АдресСкрипта = "/api/v5/orders?" + ФильтрИд + "&limit=100&apiKey=" + ApiKey;
	
	Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера); 
	Мод_СозданиеЗаказов(Ответ["orders"], ТЗброни);
	
	ОбщегоНазначения.СообщитьПользователю("Загрузка заказов завершена");
	
КонецПроцедуры

Функция ЗапросCRM(АдресСкрипта, ИмяСервера = Неопределено)
	
	// попробовать убрать получение константы Из функции	
	Если ИмяСервера = Неопределено Тогда 
		ИмяСервера = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера");
	КонецЕсли;
		
	ОбщегоНазначения.СообщитьПользователю("Запрос к RetailCRM ...");	
	Ответ = crm_RetailCRMОбщийВызовСервера.HTTPзапросGET(ИмяСервера, АдресСкрипта);		
	ОбщегоНазначения.СообщитьПользователю("Разбор ответа ...");
	
	Возврат crm_RetailCRMОбщийВызовСервера.UnJSONTest(Ответ);
	
КонецФункции

Функция ПолучитьИсториюИзменений(Фильтр = "", ИспДатыАктуальности = Ложь) 
	
	ИмяСервера = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера");
	Если Фильтр <> "" Тогда 
		Если ИспДатыАктуальности = Истина Тогда 
			АдресСкрипта = "/api/v5/orders/history?filter[startDate]="+ crm_RetailCRMОбщийВызовСервера.ДатаВремяДляCRM(Фильтр) +"&apiKey=" + crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM");
		Иначе 
			АдресСкрипта = "/api/v5/orders/history?filter[sinceId]="+ Формат(Фильтр,"ЧГ=0") +"&apiKey=" + crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM");
		КонецЕсли;
	КонецЕсли;
	
	Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера);

	ТЗЗаказы = Новый ТаблицаЗначений;
	ТЗЗаказы.Колонки.Добавить("НомерЗаказа");
	
	Для каждого Стр Из Ответ["history"] Цикл
		Если Стр["source"] = "api" Тогда 
			Если Стр["apiKey"] <> Неопределено Тогда 
				Если Стр["apiKey"]["current"] = Истина Тогда
					ПоследнееИзменение = Стр["id"];
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтрТЗ = ТЗЗаказы.Добавить();
		СтрТЗ.НомерЗаказа = Стр["order"]["id"];
		ПоследнееИзменение = Стр["id"]; 
	КонецЦикла;
	
	// постраничая разбивка истории
	Если ИспДатыАктуальности = Истина Тогда
		
		Если Ответ["pagination"] <> Неопределено Тогда
			
			ВсегоСтраниц = Ответ["pagination"]["totalPageCount"];
			Для ин = 2 по ВсегоСтраниц Цикл
				
				процент = Окр(ин * 100 / ВсегоСтраниц,2);
				ОбщегоНазначения.СообщитьПользователю("Запрос к RetailCRM " + ин + " " + строка(процент) + "% ...");
				
				Ответ = ЗапросCRM(АдресСкрипта + "&page=" + строка(Формат(ин,"ЧГ=0")), ИмяСервера);
				
				Для каждого Стр Из Ответ["history"] Цикл
					Если Стр["source"] = "api" Тогда 
						Если Стр["apiKey"] <> Неопределено Тогда 
							Если Стр["apiKey"]["current"] = Истина Тогда
								ПоследнееИзменение = Стр["id"];
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					СтрТЗ = ТЗЗаказы.Добавить();
					СтрТЗ.НомерЗаказа = Стр["order"]["id"];
					ПоследнееИзменение = Стр["id"];
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли; 
		
	Иначе
				
		Если Ответ["pagination"] <> Неопределено Тогда
			ВсегоСтраниц = Ответ["pagination"]["totalPageCount"];
			
			Для ин = 2 По ВсегоСтраниц Цикл
				АдресСкрипта = "/api/v5/orders/history?filter[sinceId]=" + Формат(ПоследнееИзменение,"ЧГ=0") + 
																		  "&apiKey=" + crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM");
				
				процент = Окр(ин * 100 / ВсегоСтраниц,2);
				ОбщегоНазначения.СообщитьПользователю("Запрос к RetailCRM " + ин + " " + строка(процент) + "% ...");
				
				Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера);
				
				Для каждого Стр Из Ответ["history"] Цикл
					Если Стр["source"] = "api" Тогда 
						Если Стр["apiKey"] <> Неопределено Тогда 
							Если Стр["apiKey"]["current"] = Истина Тогда
								ПоследнееИзменение = Стр["id"];
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					СтрТЗ = ТЗЗаказы.Добавить();
					СтрТЗ.НомерЗаказа = Стр["order"]["id"];
					ПоследнееИзменение = Стр["id"];
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли; 
		
	КонецЕсли;
	// постраничая разбивка истории

	Если ПоследнееИзменение <> Неопределено  Тогда 
		УстановитьЗначениеКонстанты("since_Id", ПоследнееИзменение);
		Since_Id = ПоследнееИзменение;
	КонецЕсли;
	
	ТЗЗаказы.Свернуть("НомерЗаказа");
	
	Возврат ТЗЗаказы;
	
КонецФункции

Функция ФормированиеСтруктурыЗаказа(Стр)
	
	СтрДанных = Новый Структура();
	СтрДанных.Вставить("id",				Формат(Стр["id"],"ЧГ="));
	ДатаСоздания = Стр["createdAt"];
	Если ДатаСоздания <> Неопределено Тогда 
		ДатаСоздания =  crm_RetailCRMОбщийВызовСервера.ПреПреобразоватьДатуCRM(ДатаСоздания);
	Иначе
		ДатаСоздания =  '00010101000000';
	КонецЕсли;
	
	СтрДанных.Вставить("ДатаСоздания",		ДатаСоздания);			//  Дата И время заказа
	СтрДанных.Вставить("КодМагазина",		Стр["site"]);				
	СтрДанных.Вставить("site",				Стр["site"]);
	СтрДанных.Вставить("КодМенеджера",		Стр["managerId"]);
	СтрДанных.Вставить("НомерЗаказа",		Стр["number"]);
	СтрДанных.Вставить("КаналПривлечения",	Стр["orderMethod"]);
	
	Дст = Стр["delivery"]["address"];
	АдресДоставки = "";
	ДопИнформация = "";	
	Если Дст <> Неопределено Тогда 
		АдресДоставки = СокрЛП(Строка(Дст["index"]) + " " + Дст["city"] + " "+Дст["metro"]+" "+Дст["text"]);
		ДопИнформация = СокрЛП(Стр["delivery"]["address"]["notes"]);
	КонецЕсли;
	СтрДанных.Вставить("СпособДоставки",	Стр["delivery"]["code"]);
	СтрДанных.Вставить("ДопИнформацияПоДоставке", ДопИнформация);
	
	ДатаДоставки = Стр["delivery"]["date"];
	Если ДатаДоставки <> Неопределено Тогда 
		ДатаДоставки =  ПреобразоватьДатуCRM(ДатаДоставки);
	Иначе
		ДатаДоставки =  '00010101000000';
	КонецЕсли;
	ВремяДоставкиС = ?(Стр["delivery"]["time"] <> Неопределено, 
											  ("0001-01-01 " + Стр["delivery"]["time"]["from"] + ":00"), Дата(1, 1, 1));
	ВремяДоставкиПо = ?(Стр["delivery"]["time"] <> Неопределено, 
												("0001-01-01 " + Стр["delivery"]["time"]["to"] + ":00"), Дата(1, 1, 1));
	
	ВремяДоставкиС  = ПреобразоватьДатуCRM(ВремяДоставкиС);
	ВремяДоставкиПо = ПреобразоватьДатуCRM(ВремяДоставкиПо);
	
	СтрДанных.Вставить("ДатаДоставки",		ДатаДоставки);     	
	СтрДанных.Вставить("ВремяДоставкиC",	ВремяДоставкиС);
	СтрДанных.Вставить("ВремяДоставкиПо",	ВремяДоставкиПо);
	СтрДанных.Вставить("АдресДоставки",		АдресДоставки);
	СтрДанных.Вставить("СтоимостьДоставки",	Стр["delivery"]["cost"]);
	
	ФИО = СокрЛП(Строка(Стр["lastName"]) + " " + Стр["firstName"] + " " + Стр["patronymic"]);
	
	СтрДанных.Вставить("ФИО",				ФИО);
	
	// корпоративные клиенты
	Если crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КорпоративныеКлиенты") = Истина Тогда 
		
		ДанныеКорпКлиента = Стр["customer"];
		
		СтруктураДанныхКорпКлиента = Новый Структура;
		СтруктураДанныхКорпКлиента.Вставить("Тип", 				ДанныеКорпКлиента["type"]);         
		СтруктураДанныхКорпКлиента.Вставить("ID", 				Формат(ДанныеКорпКлиента["id"], "ЧГ="));
		СтруктураДанныхКорпКлиента.Вставить("НаименованиеКорп", ДанныеКорпКлиента["nickName"]);
		СтруктураДанныхКорпКлиента.Вставить("ОсновнойАдрес", 	ДанныеКорпКлиента["mainAddress"]);
		СтруктураДанныхКорпКлиента.Вставить("КонтактноеЛицо", 	ДанныеКорпКлиента["mainCustomerContact"]);
		СтруктураДанныхКорпКлиента.Вставить("Компания", 		ДанныеКорпКлиента["mainCompany"]);
		
		СтрДанных.Вставить("ДанныеКорпКлиента", СтруктураДанныхКорпКлиента);

		ДанныеКонтактногоЛица = Стр["contact"];
		
		ФИО = СокрЛП(Строка(ДанныеКонтактногоЛица["lastName"]) 
					+ " " + ДанныеКонтактногоЛица["firstName"] 
					+ " " + ДанныеКонтактногоЛица["patronymic"]);
		
		СтруктураДанныхКонтЛица = Новый Структура;
		СтруктураДанныхКонтЛица.Вставить("Тип", 			ДанныеКонтактногоЛица["type"]);         
		СтруктураДанныхКонтЛица.Вставить("ID", 				Формат(ДанныеКонтактногоЛица["id"], "ЧГ="));
		СтруктураДанныхКонтЛица.Вставить("КонтактноеЛицо", 	ДанныеКонтактногоЛица["isContact"]);
		СтруктураДанныхКонтЛица.Вставить("ФИО", 			ФИО);
		СтруктураДанныхКонтЛица.Вставить("Почта", 			ДанныеКонтактногоЛица["email"]);
		СтрДанных.Вставить("ДанныеКонтактногоЛица", 		СтруктураДанныхКонтЛица);
		
		СтруктураДанныхКонтрагента = Новый Структура;
		
		Если Стр["company"] <> Неопределено Тогда
			// id контрагента в этом случае не прописывать, т.к по факту такой сущности в crm нет
			ДанныеКонтрагента = Стр["company"]["contragent"];
			
			Если ДанныеКонтрагента["contragentType"] = "legal-entity" Тогда 
				ТипКонтрагента = "ЮрЛицо";
			ИначеЕсли ДанныеКонтрагента["contragentType"] = "enterpreneur" Тогда 
				ТипКонтрагента = "ИндивидуальныйПредприниматель";
			КонецЕсли;
			
			СтруктураДанныхКонтрагента.Вставить("НазваниеКомпании", 	Стр["company"]["name"]);
			СтруктураДанныхКонтрагента.Вставить("ТипКонтрагента", 		ТипКонтрагента);
			СтруктураДанныхКонтрагента.Вставить("ПолноеНаименование", 	ДанныеКонтрагента["legalName"]);
			СтруктураДанныхКонтрагента.Вставить("АдресРегистрации", 	ДанныеКонтрагента["legalAddress"]);
			СтруктураДанныхКонтрагента.Вставить("ID", 					Формат(Стр["company"]["id"],"ЧГ="));
			
			БанковскийСчет 	= ""; 
			БИК = ""; 
			КоррСчет = ""; 
			ИНН = ""; 
			КПП = ""; 
			ОКПО = ""; 
			ОГРН = "";

			ИНН				= ?(ДанныеКонтрагента["INN"] 			<> Неопределено, 	ДанныеКонтрагента["INN"] , 			"");
			КПП				= ?(ДанныеКонтрагента["KPP"] 			<> Неопределено, 	ДанныеКонтрагента["KPP"] , 			"");
			ОКПО			= ?(ДанныеКонтрагента["OKPO"] 			<> Неопределено, 	ДанныеКонтрагента["OKPO"] , 		"");
			ОГРН			= ?(ДанныеКонтрагента["OGRN"] 			<> Неопределено, 	ДанныеКонтрагента["OGRN"] , 		"");
			БИК				= ?(ДанныеКонтрагента["BIK"] 			<> Неопределено, 	ДанныеКонтрагента["BIK"] , 			"");
			БанковскийСчет 	= ?(ДанныеКонтрагента["bankAccount"] 	<> Неопределено, 	ДанныеКонтрагента["bankAccount"] , 	"");
			КоррСчет		= ?(ДанныеКонтрагента["corrAccount"] 	<> Неопределено, 	ДанныеКонтрагента["corrAccount"] , 	"");
		Иначе 
			
			СтруктураДанныхКонтрагента.Вставить("НазваниеКомпании", 	ФИО);
			СтруктураДанныхКонтрагента.Вставить("ТипКонтрагента", 		"ФизЛицо");
			СтруктураДанныхКонтрагента.Вставить("ПолноеНаименование", 	ФИО);
			СтруктураДанныхКонтрагента.Вставить("АдресРегистрации", 	АдресДоставки);
			СтруктураДанныхКонтрагента.Вставить("ID", 					"");
			
			БанковскийСчет 	= ""; 
			БИК = ""; 
			КоррСчет = ""; 
			ИНН = ""; 
			КПП = ""; 
			ОКПО = ""; 
			ОГРН = "";

		КонецЕсли;
		
		СтруктураДанныхКонтрагента.Вставить("ИНН", 				ИНН);
		СтруктураДанныхКонтрагента.Вставить("КПП", 				КПП);
		СтруктураДанныхКонтрагента.Вставить("ОКПО", 			ОКПО);
		СтруктураДанныхКонтрагента.Вставить("ОГРН", 			ОГРН);
		СтруктураДанныхКонтрагента.Вставить("БИК", 				БИК);
		СтруктураДанныхКонтрагента.Вставить("БанковскийСчет", 	БанковскийСчет);
		СтруктураДанныхКонтрагента.Вставить("КоррСчёт", 		КоррСчет);
		СтрДанных.Вставить("ДанныеКонтрагента", СтруктураДанныхКонтрагента);

		// корпоративные клиенты
	Иначе	
		
		ДанныеКонтрагента = Стр["contragent"];
		СтруктураДанныхКонтрагента = Новый Структура;
		СтруктураДанныхКонтрагента.Вставить("Тип", 		"");
		НаименованиеЮрЛицаКонтрагента = "";
		IdКлиента = Формат(Стр["customer"]["id"],"ЧГ=");
		
		Если ДанныеКонтрагента <> Неопределено Тогда
			
			НаименованиеЮрЛицаКонтрагента = ДанныеКонтрагента["legalName"];
			
			Если ДанныеКонтрагента["contragentType"] = "individual" Тогда 
				ТипКонтрагента = "ФизЛицо";
			ИначеЕсли ДанныеКонтрагента["contragentType"] = "legal-entity" Тогда 
				ТипКонтрагента = "ЮрЛицо";
			ИначеЕсли ДанныеКонтрагента["contragentType"] = "enterpreneur" Тогда 
				ТипКонтрагента = "ИндивидуальныйПредприниматель";
			КонецЕсли;
			СтруктураДанныхКонтрагента.Вставить("Тип", 		ТипКонтрагента);
			АдресРегистрацииКонтрагента = ДанныеКонтрагента["legalAddress"];
			СтруктураДанныхКонтрагента.Вставить("НаименованиеЮрЛица", 	НаименованиеЮрЛицаКонтрагента);
			СтруктураДанныхКонтрагента.Вставить("АдресРегистрации", 	АдресРегистрацииКонтрагента);
			
			БанковскийСчет 	= ""; 
			БИК = ""; 
			КоррСчет = ""; 
			ИНН = ""; 
			КПП = "";
			
			Если ТипКонтрагента = "ЮрЛицо" ИЛИ ТипКонтрагента = "ИндивидуальныйПредприниматель" Тогда
				БанковскийСчет 	= ?(ДанныеКонтрагента["bankAccount"] 	<> Неопределено, 	ДанныеКонтрагента["bankAccount"] , 	"");
				БИК				= ?(ДанныеКонтрагента["BIK"] 			<> Неопределено, 	ДанныеКонтрагента["BIK"] , 			"");
				КоррСчет		= ?(ДанныеКонтрагента["corrAccount"] 	<> Неопределено, 	ДанныеКонтрагента["corrAccount"] , 	"");
				ИНН				= ?(ДанныеКонтрагента["INN"] 			<> Неопределено, 	ДанныеКонтрагента["INN"] , 			"");
				КПП				= ?(ДанныеКонтрагента["KPP"] 			<> Неопределено, 	ДанныеКонтрагента["KPP"] , 			"");
				
				СтруктураДанныхКонтрагента.Вставить("БанковскийСчет", 	БанковскийСчет);
				СтруктураДанныхКонтрагента.Вставить("БИК", 				БИК);
				СтруктураДанныхКонтрагента.Вставить("КоррСчет", 		КоррСчет);
				СтруктураДанныхКонтрагента.Вставить("ИНН", 				ИНН);                         
				СтруктураДанныхКонтрагента.Вставить("КПП", 				КПП);                        
			КонецЕсли;
			
		КонецЕсли;
		
		СтрДанных.Вставить("ДанныеКонтрагента", СтруктураДанныхКонтрагента);
		СтрДанных.Вставить("IdКлиента",			IdКлиента);
		 
	КонецЕсли;

	СтрДанных.Вставить("Телефон",			ПриведениеТелНомераСтандарт(Стр["phone"]));
	СтрДанных.Вставить("Почта",				Стр["email"]);
	СтрДанных.Вставить("СтоимостьЗаказа",	Стр["summ"]);  	
	СтрДанных.Вставить("СтоимостьЗаказаСоСкидкамиИДоставкой",	Стр["totalSumm"]);	
	ДатаОтгрузкиПлан = Стр["shipmentDate"];
	Если ДатаОтгрузкиПлан <> Неопределено Тогда 
		ДатаОтгрузкиПлан =  ПреобразоватьДатуCRM(ДатаОтгрузкиПлан);
	Иначе
		ДатаОтгрузкиПлан =  '00010101000000';
	КонецЕсли;
	СтрДанных.Вставить("ДатаОтгрузкиПлан",	ДатаОтгрузкиПлан);
	СтрДанных.Вставить("СкладОтгрузки",		Стр["shipmentStore"]);
	СтрДанных.Вставить("СпособДоставки",	Стр["delivery"]["code"]);
	
	ДатаДоставки = Стр["delivery"]["date"];
	Если ДатаДоставки <> Неопределено Тогда 
		ДатаДоставки =  ПреобразоватьДатуCRM(ДатаДоставки);
	Иначе
		ДатаДоставки =  '00010101000000';
	КонецЕсли;
	
	СтрДанных.Вставить("ДатаДоставки",		ДатаДоставки);     	
	
	Дст = Стр["delivery"]["address"];
	АдресДоставки = СокрЛП(Строка(Дст["index"]) + " " + Дст["city"] + " " + Дст["metro"] + " " + Дст["text"]);
	СтрДанных.Вставить("АдресДоставки",		АдресДоставки);
	СтрДанных.Вставить("СтоимостьДоставки",	Стр["delivery"]["cost"]);
	СтрДанных.Вставить("СебестоимостьДоставки", Стр["delivery"]["netCost"]);
	
	СтрДанных.Вставить("СтатусЗаказа",			Стр["status"]);
	СтрДанных.Вставить("КомментарийКлиента",	СокрЛП(Стр["customerComment"]));
	СтрДанных.Вставить("КомментарийМенеджера",	СокрЛП(Стр["managerComment"]));
	
	ПользовательскиеПоля = Новый Соответствие;
	ПользовательскиеПоляЗаказа = Стр["customFields"];
	Если ПользовательскиеПоляЗаказа <> Неопределено Тогда
		Для каждого Поле Из ПользовательскиеПоляЗаказа Цикл
			ПользовательскиеПоля.Вставить(Поле.Ключ, Поле.Значение);
		КонецЦикла; 
	КонецЕсли;
	
	СтрДанных.Вставить("ПользовательскиеПоля",	ПользовательскиеПоля);
	
	// оплата
	МассивОплат = Новый Массив();
	Для Каждого стрОпл Из Стр["payments"] Цикл 
		стрОплата = Новый Соответствие();
		стрОплата.Вставить("ИДОплаты", 		стрОпл.Значение["id"]);
		стрОплата.Вставить("СтатусОплаты",	стрОпл.Значение["status"]);
		стрОплата.Вставить("ТипОплаты",		стрОпл.Значение["type"]);
		стрОплата.Вставить("СуммаПлатежа",	стрОпл.Значение["amount"]);
		стрОплата.Вставить("ДатаОплаты",	?(стрОпл.Значение["paidAt"] <> Неопределено, 
																  ПреобразоватьДатуCRM(стрОпл.Значение["paidAt"]), ""));
		стрОплата.Вставить("Комментарий",	стрОпл.Значение["comment"]);
		МассивОплат.Добавить(стрОплата);
	КонецЦикла;
	СтрДанных.Вставить("Оплаты",			МассивОплат);
	// 
	
	// состав заказа
	МассивТоваров = Новый Массив();
	ТЗТоваров	= Новый ТаблицаЗначений();
	ТЗТоваров.Колонки.Добавить("Наименование");
    ТЗТоваров.Колонки.Добавить("ИДСтроки");
    ТЗТоваров.Колонки.Добавить("xmlId");
	ТЗТоваров.Колонки.Добавить("externalId");
    ТЗТоваров.Колонки.Добавить("СтатусТовара");
    ТЗТоваров.Колонки.Добавить("СтавкаНДС");
	ТЗТоваров.Колонки.Добавить("ОбщаяСкидка");
    ТЗТоваров.Колонки.Добавить("Количество");
    ТЗТоваров.Колонки.Добавить("Цена");
	ТЗТоваров.Колонки.Добавить("ТипЦены");
    ТЗТоваров.Колонки.Добавить("Удален");
    ТЗТоваров.Колонки.Добавить("Скидки");
	ТЗТоваров.Колонки.Добавить("НачисленоБонусов");
    ТЗТоваров.Колонки.Добавить("ИдентификаторСтроки1С");
	
	// состав заказа
	Для каждого суб_стр Из Стр["items"] Цикл
		стрТовар = Новый Соответствие();
		СтрокаТз = ТЗТоваров.Добавить();		
		стрТовар.Вставить("Наименование",	суб_стр["offer"]["name"]);
		стрТовар.Вставить("ИДСтроки",		Формат(суб_стр["id"], "ЧГ=0"));
		стрТовар.Вставить("xmlId",			суб_стр["offer"]["xmlId"]);
		стрТовар.Вставить("externalId",		суб_стр["offer"]["externalId"]);
		стрТовар.Вставить("СтатусТовара",	суб_стр["status"]);
		стрТовар.Вставить("СтавкаНДС", 		суб_стр["vatRate"]);
		стрТовар.Вставить("ОбщаяСкидка",	суб_стр["discountTotal"]);
		стрТовар.Вставить("Количество",		суб_стр["quantity"]);
		стрТовар.Вставить("Цена",			суб_стр["initialPrice"]);
		стрТовар.Вставить("ТипЦены", 		?(суб_стр["priceType"] <> Неопределено, суб_стр["priceType"]["code"], ""));
		стрТовар.Вставить("Удален",			суб_стр["isCanceled"]);
		стрТовар.Вставить("Скидки", 		суб_стр["discounts"]);
		стрТовар.Вставить("НачисленоБонусов", 		суб_стр["bonusesCreditTotal"]);
		
		СвойстваТовара = Новый Соответствие(); 
		Для Каждого КлючИЗначение Из суб_стр["properties"] Цикл
			СвойстваТовара.Вставить(СокрЛП(КлючИЗначение.Ключ), КлючИЗначение.Значение["value"]);
		КонецЦикла;
		стрТовар.Вставить("Свойства", 		СвойстваТовара); 
		
		// 
		Если суб_стр["externalIds"] <> Неопределено Тогда
			Идентификаторы = Новый Соответствие();
			Для Каждого идентиф Из суб_стр["externalIds"] Цикл 
				Если идентиф["code"] = "1C" Тогда 
					Идентификаторы.Вставить("код",	идентиф["code"]);
					Идентификаторы.Вставить("ИдентифСтроки",	идентиф["value"]);
					стрТовар.Вставить("ИдентификаторСтроки1С", 	идентиф["value"]);
					
					СтрокаТз.ИдентификаторСтроки1С 	= идентиф["value"];

				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		стрТовар.Вставить("Идентификаторы", 		Идентификаторы);
		
        СтрокаТз.Наименование 	= суб_стр["offer"]["name"];
		СтрокаТз.ИДСтроки 		= Формат(суб_стр["id"], "ЧГ=0");
		СтрокаТз.xmlId 			= суб_стр["offer"]["xmlId"];
		СтрокаТз.externalId 	= суб_стр["offer"]["externalId"];
		СтрокаТз.СтатусТовара 	= суб_стр["status"];
		СтрокаТз.СтавкаНДС 		= суб_стр["vatRate"];
		СтрокаТз.ОбщаяСкидка 	= суб_стр["discountTotal"];
		СтрокаТз.Количество 	= суб_стр["quantity"];
		СтрокаТз.Цена 			= суб_стр["initialPrice"];
		СтрокаТз.ТипЦены 		= ?(суб_стр["priceType"] <> Неопределено, суб_стр["priceType"]["code"], "");
		СтрокаТз.Удален 		= суб_стр["isCanceled"];
		СтрокаТз.Скидки 		= суб_стр["discounts"];
		СтрокаТз.НачисленоБонусов 		= суб_стр["bonusesCreditTotal"];
		// 
		МассивТоваров.Добавить(стрТовар);
	КонецЦикла;
	// 
	
	СтрДанных.Вставить("Товары", МассивТоваров);
	СтрДанных.Вставить("ТЗТовары", ТЗТоваров);
	
	Возврат СтрДанных;
	
КонецФункции

Процедура Мод_СозданиеЗаказов(МасивЗаказов, ТЗброни = Неопределено)
	
	НаборСтатусов 	= crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("Статусы");
	ОграничениеПоСпособуОформления 	= crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ОграничитьЗагрузкуЗаказовПоСпособуОформления");
	ИспользоватьСпособыОформленияЗаказов = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИспользоватьСпособыОформленияЗаказов");
	
	Для каждого Стр Из МасивЗаказов Цикл
		
		Если Стр["items"].Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю("Заказ № " + Стр["number"] + " не был загружен в 1С, т.к в нем отсутствуют товары!");
			Продолжить;
		КонецЕсли;
		
		стрЗаказа = ФормированиеСтруктурыЗаказа(Стр); //  В этой структурке собраны данные заказа		
				
		//  Загружаемые статусы
		Если НаборСтатусов <> Неопределено Тогда
			Если НаборСтатусов.Количество() > 0 Тогда
				ВыбранныйСтатус = СопоставитьСтатус(Стр["status"], НаборСтатусов);
				Если ВыбранныйСтатус = Неопределено ИЛИ ВыбранныйСтатус.НеЗагружать Тогда 
					ОбщегоНазначения.СообщитьПользователю("Заказы в статусе " + Стр["status"] + " не загружаются в 1С. Чтобы это исправить, перейдите на вкладку ""Статусы"" И добавьте этот статус в таблицу ИЛИ отключите галочку не загружать.");
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// СпособыОформления 
		Если ИспользоватьСпособыОформленияЗаказов <> Неопределено И ИспользоватьСпособыОформленияЗаказов = Истина Тогда
			Если ОграничениеПоСпособуОформления <> Неопределено И ОграничениеПоСпособуОформления = Истина Тогда
				НаборСпособов = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("СпособыОформленияЗаказов");
				Если НаборСпособов <> Неопределено Тогда
					Если НаборСпособов.Количество() > 0 Тогда
						ВыбранныйСпособ = СопоставитьСпособ(Стр["orderMethod"], НаборСпособов);
						Если ВыбранныйСпособ = Неопределено Тогда 
							ОбщегоНазначения.СообщитьПользователю("Заказы со статусом оформления " 
																+ Стр["orderMethod"] 
																+ " не загружаются в 1С. Чтобы это исправить,"
																+ " перейдите на вкладку ""Статусы"",Выберите способы"
																+ " оформления заказов И нажмите на кнопку заполнить"
																+ " способы оформления.");
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ЗагрузкаБроней") = Истина Тогда
			Мод_ЗагрузитьБрониПоЗаказу(Формат(стрЗаказа["id"], "ЧГ=0"), ТЗБрони);	
		КонецЕсли;
		
		ИскДок = УНФ_ВернутьДокументЗаказ(Строка(стрЗаказа["id"]));
		Если ЗначениеЗаполнено(ИскДок) Тогда                      
			УНФ_СоздатьЗаказ(стрЗаказа, Стр, ИскДок, ВыбранныйСтатус, ТЗброни); // редактируем заказ
		Иначе                                                     
			УНФ_СоздатьЗаказ(стрЗаказа, Стр, , ВыбранныйСтатус, ТЗброни);  // создаем заказ
		КонецЕсли;  
		
		// Оплаты
		Если crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("СозданиеОплат") Тогда
			
			ЗаказПокупателя = УНФ_ВернутьДокументЗаказ(Строка(стрЗаказа["id"]));
			Если ЗаказПокупателя <> Документы.ЗаказПокупателя.ПустаяСсылка() Тогда

				Для Каждого Оплата Из стрЗаказа["Оплаты"] Цикл  

					ДокументОплаты = "";
					ТипДокументаОплаты = "";
					СписокОплат = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("СоответствиеТиповОплат");
					НайденнаяСтрока = СписокОплат.СтрНайти(Оплата["ТипОплаты"], "КодCRM"); 
					
					Если НайденнаяСтрока <> Неопределено Тогда
						ТипДокументаОплаты = НайденнаяСтрока.Документ;
					КонецЕсли;
							
					ДокументОплаты = УНФ_ВернутьДокументОплаты(Оплата["ИДОплаты"], ТипДокументаОплаты);
					
					Если Оплата["СтатусОплаты"] = "paid" Тогда
						
						УНФ_СоздатьДокументОплаты(ЗаказПокупателя, Оплата, ТипДокументаОплаты, ДокументОплаты);
						
					ИначеЕсли Оплата["СтатусОплаты"] = "not-paid" И ДокументОплаты <> "" Тогда
						ДокументОплатыПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОплаты, "Проведен");
						Если ДокументОплатыПроведен Тогда
							ДокументОплаты = ДокументОплаты.ПолучитьОбъект();
							ДокументОплаты.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;    
		
КонецПроцедуры  

Процедура УНФ_СоздатьЗаказ(ДанныеЗаказа, Стр, ИскДок, СтатусДействия, ТЗброни = Неопределено)
	
	Эталонная = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("Эталонная");
	
	НесколькоОрганизаций = Ложь;                                  
	Если ЗначениеЗаполнено(ДанныеЗаказа.КодМагазина) Тогда 
		Если crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда 
			НесколькоОрганизаций = Истина;
			crmОрганизация = Справочники.crm_Организации.НайтиПоРеквизиту("КодМагазинаCRM", ДанныеЗаказа.КодМагазина);
			Организация = crmОрганизация.Организация;                                         
		КонецЕсли;
	КонецЕсли;
	
	Если Организация = Неопределено Тогда 
		Организация = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("Организация");
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(ИскДок) Тогда
		Док = Документы.ЗаказПокупателя.СоздатьДокумент();
		Док.Дата 					= 	ДанныеЗаказа.ДатаСоздания;
		Док.ВидЗаказа				=	Справочники.ВидыЗаказовПокупателей.Основной;
		Док.СостояниеЗаказа			=	Справочники.СостоянияЗаказовПокупателей.НайтиПоНаименованию("В работе");
		Док.Номер                   =	ДанныеЗаказа["НомерЗаказа"];
		Док.ВидОперации				= 	Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
		Док.ХозяйственнаяОперация 	= 	Справочники.ХозяйственныеОперации.ЗаказНаПродажу;
		Док.НалогообложениеНДС 		= 	crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("Налогообложение");
		Док.НДСВключатьВСтоимость   =	crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ЦенаВключаетНДС");
		Док.ВалютаДокумента 		= 	?( ЗначениеЗаполнено(Док.ВалютаДокумента), Док.ВалютаДокумента, crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("Валюта"));
		Док.Касса					=   Справочники.Кассы.ПолучитьКассуПоУмолчанию(Док.Организация);
		Док.БанковскийСчет			=	crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("БанковскийСчет");
		Док.ТипДенежныхСредств      =	Перечисления.ТипыДенежныхСредств.Безналичные;
		Док.СпособДоставки			=   Перечисления.СпособыДоставки.Самовывоз; 
		Док.Курс					=	1;
		Док.Кратность				=  	1;
	Иначе
		Док = ИскДок.ПолучитьОбъект();
		Док.БанковскийСчет			=	crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("БанковскийСчет");
		РеализацияПриВозврате = УНФ_ВернутьРеализацию(Док.Ссылка);
		Если РеализацияПриВозврате <> Документы.РасходнаяНакладная.ПустаяСсылка() И РеализацияПриВозврате.Проведен Тогда
			
			ДокВозврата = УНФ_ВернутьДокументВозврата(РеализацияПриВозврате);
			Если ДокВозврата <> Документы.ПриходнаяНакладная.ПустаяСсылка() Тогда
				ОбщегоНазначения.СообщитьПользователю("По документу " +  Док.Ссылка + " создан документ возврата, обновление невозможно");
				Возврат;
			Иначе
				УНФ_СоздатьДокументВозврата(РеализацияПриВозврате,ДанныеЗаказа["ТЗтовары"]);
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю("Заказ №" + ИскДок.Номер + " закрыт!!!");
			Возврат;
			
		КонецЕсли;
		
		Если Док.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
			ОбщегоНазначения.СообщитьПользователю("Заказ №" + ИскДок.Номер + " закрыт!!!");
			Возврат;
		КонецЕсли;
		
	КонецЕсли; 
	
	// Статусы	
	Док.СостояниеЗаказа = СтатусДействия.СостояниеЗаказа;
	
	ОтменаЗаказа = Ложь;
	Если СтатусДействия.Отмена Тогда
		ОтменаЗаказа = Истина;
	КонецЕсли;
	
	// Объединение данных
	Если СокрЛП(ДанныеЗаказа["id"]) = "" Тогда
		Возврат;
	КонецЕсли;  
	
	// Проверки возможности обновления заказа 
	Если ОтменаЗаказа И ЗначениеЗаполнено(Док.Ссылка) Тогда
		Реализация = УНФ_ВернутьРеализацию(Док.Ссылка);
		Если Реализация <> Документы.РасходнаяНакладная.ПустаяСсылка() Тогда 
			ОбщегоНазначения.СообщитьПользователю("На заказ "+ Док.Номер + " Есть реализация, отмена невозможна!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Док.Ссылка) Тогда
		Реализация = УНФ_ВернутьРеализацию(Док.Ссылка);
		Если Реализация <> Документы.РасходнаяНакладная.ПустаяСсылка() Тогда
			ОбщегоНазначения.СообщитьПользователю("На заказ "+ Док.Номер + " создана реализация, обновление невозможно!");
			Возврат;
		КонецЕсли; 	
	КонецЕсли; 
	
	ДокументПроизводство = УНФ_ВернутьДокументПроизводство(Док.Ссылка);
	Если ДокументПроизводство <> Документы.ЗаказНаПроизводство.ПустаяСсылка() Тогда 
		ОбщегоНазначения.СообщитьПользователю("Заказ №" + Док.Номер + " в данный момент находится в области Сборки!!!");
		Возврат;
	КонецЕсли;

	// Сопоставление складов
	СкладОтг = ДанныеЗаказа["СкладОтгрузки"];
	Если ЗначениеЗаполнено(СкладОтг) Тогда 
		СписокСкладов = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("Склады");
		НайденнаяСтрока = СписокСкладов.СтрНайти(СкладОтг, "КодСRM"); 
		Если НайденнаяСтрока <> Неопределено Тогда
			Склад = НайденнаяСтрока.Склад;
		КонецЕсли;
	КонецЕсли;  
	
	Если Не ЗначениеЗаполнено(Склад) Тогда 
		Если НесколькоОрганизаций = Истина Тогда
			Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(crmОрганизация, "Склад");
		Иначе 
			Склад = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("Склад");
		КонецЕсли;
	КонецЕсли;
	
	// Обновление информации
	Док.Организация 				=	Организация;
	Док.Контрагент                  =   УНФ_ОпределениеКонтрагента(ДанныеЗаказа,Организация);
	
	Если не ЗначениеЗаполнено(Док.Договор) Тогда
		Док.Договор = РаботаСКонтрагентамиУНФ.ПолучитьДоговорПоУмолчанию(Док,Док.Контрагент,Док.Организация);	
	КонецЕсли;
	
	Если СтатусДействия.Отгрузка Тогда 
		Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель КАК Получатель
	                      |ИЗ
	                      |	Документ.ПеремещениеЗапасов КАК ПеремещениеЗапасов
	                      |ГДЕ
	                      |	НЕ ПеремещениеЗапасов.ПометкаУдаления
	                      |	И ПеремещениеЗапасов.ЗаказПокупателя = &Заказ
	                      |	И ПеремещениеЗапасов.СтруктурнаяЕдиница = &СкладОтправитель"); 
		
		СтруктурнаяЕдиницаРезерв = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Док, "СтруктурнаяЕдиницаРезерв");
		Запрос.УстановитьПараметр("Заказ", Док.Ссылка);
		Запрос.УстановитьПараметр("СкладОтправитель", СтруктурнаяЕдиницаРезерв);
		
		УстановитьПривилегированныйРежим(Истина);
	    Документ = Запрос.Выполнить().Выбрать(); 										
		УстановитьПривилегированныйРежим(Ложь);  
	
		Если Документ.Следующий() Тогда
			Док.СтруктурнаяЕдиницаРезерв	= Документ.Получатель;
		Иначе
			Док.СтруктурнаяЕдиницаРезерв =	Склад;		
		КонецЕсли;
	
	Иначе
		Док.СтруктурнаяЕдиницаРезерв 	=	Склад;	
	КонецЕсли;
	
	Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "Родитель");
	Док.СтруктурнаяЕдиницаПродажи 	=  Родитель;
	
	Если ЗначениеЗаполнено(ДанныеЗаказа["ДатаОтгрузкиПлан"]) Тогда
		Док.ДатаОтгрузки = ДанныеЗаказа["ДатаОтгрузкиПлан"];
	Иначе
		Док.ДатаОтгрузки = Док.Дата;	
	КонецЕсли;
		
	Док.АдресДоставки = СокрЛП(ДанныеЗаказа["АдресДоставки"]); 
	Док.СуммаДокумента 		= 	ДанныеЗаказа["СтоимостьЗаказаСоСкидкамиИДоставкой"];
	
	// КаналПривлечения
	Если ДанныеЗаказа["КаналПривлечения"] <> Неопределено Тогда
		ВыбраннаяСтрока = Справочники.ИсточникиПривлеченияПокупателей.НайтиПоРеквизиту("crm_КодRetail",ДанныеЗаказа["КаналПривлечения"]);
		Если ВыбраннаяСтрока <> Справочники.ИсточникиПривлеченияПокупателей.ПустаяСсылка() Тогда
			Док.ИсточникПривлечения = ВыбраннаяСтрока; 	
		КонецЕсли;
	КонецЕсли;
	
	// Менеджер
	Если ДанныеЗаказа["КодМенеджера"]<> Неопределено Тогда  
		СписокМенеджеров = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("СоответствиеМенеджеров");
		НайденнаяСтрока = СписокМенеджеров.СтрНайти(ДанныеЗаказа["КодМенеджера"], "ИД"); 
		Если НайденнаяСтрока <> Неопределено Тогда
			Док.Ответственный = НайденнаяСтрока.Менеджер;
			Док.Автор = Пользователи.ТекущийПользователь();
		КонецЕсли;
	Иначе 
		Док.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	// Комментарий 
	Док.Комментарий 		= СокрЛП(?( ДанныеЗаказа["КомментарийКлиента"] <> "", ДанныеЗаказа["КомментарийКлиента"], "") + 
				?( ДанныеЗаказа["КомментарийМенеджера"] <> "", Символы.ПС + ДанныеЗаказа["КомментарийМенеджера"], ""));
	
	// Доставка
	Если не ОтменаЗаказа = Истина Тогда
		УНФ_СоздатьУслугуДоставки(Док,ДанныеЗаказа,ОтменаЗаказа);
	КонецЕсли;
	
	// Брони
	УНФ_СравнитьСоставЗаказа(Док,ДанныеЗаказа["ТЗТовары"],ОтменаЗаказа, Эталонная, ТЗброни, СтатусДействия);
	Если crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ЗагрузкаБроней") = Истина Тогда
		УНФ_БронированиеТоваров(ТЗброни,Док,ДанныеЗаказа["ТЗТовары"],ДанныеЗаказа["id"]);
	КонецЕсли;
	
	// Если суб_стр["ТипЦены"] <> "" Тогда 
	// 	ТипЦен = суб_стр["ТипЦены"];	
	// КонецЕсли;
	
	// Типы цен
	// Если crm_RetailCRMОбщий.ПолучитьЗначениеКонстанты("ИспользоватьТипыЦен") Тогда
	// 	Если ЗначениеЗаполнено(ТипЦен) Тогда
	// 		Если crm_RetailCRMОбщий.ПолучитьЗначениеКонстанты("ИспользоватьТипыЦен") Тогда 
	// 			ТипыЦен = crm_RetailCRMОбщий.ПолучитьЗначениеКонстанты("ТипыЦенCRM");
	// 			Док.ВидЦен = ТипыЦен.СтрНайти(ТипЦен, "КодCRM").ТипЦены;     
	// 		КонецЕсли;   
	// 	КонецЕсли;
	// КонецЕсли;  
	
	// Отмена заказа
	Если ОтменаЗаказа Тогда 
		Док.СостояниеЗаказа		=	Справочники.СостоянияЗаказовПокупателей.НайтиПоНаименованию("Завершен");
		Док.ВариантЗавершения 	=   Перечисления.ВариантыЗавершенияЗаказа.Отменен;        
		Док.ПричинаОтмены       =   Справочники.ПричиныОтменыЗаказа.НайтиПоНаименованию("Отмена заказа");
		
		Если Док.ПричинаОтмены 	=   Справочники.ПричиныОтменыЗаказа.ПустаяСсылка() Тогда 
			Док.ПричинаОтмены 	=   СоздатьПричинуОтменыПоУмолчанию();   
		КонецЕсли;
	КонецЕсли;
	
	// Запись заказа
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		ОбщегоНазначения.СообщитьПользователю("Проведен: " + Док , СтатусСообщения.Информация);
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось провести: " + Док + " " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Попытка
			Док.Записать(РежимЗаписиДокумента.Запись);
			ОбщегоНазначения.СообщитьПользователю("Записан: " + Док , СтатусСообщения.Информация);
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удалось записать: " + Док + " " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
	КонецПопытки;
	
	// Запись дополнительных сведений
	СвойствоЗаказов = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя);
	СвойствоЗаказовМагазин = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьСвойство("site", Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя);
	Обработки.crm_RetailCRMОбработка.УНФ_УстановитьСвойствоУОбъекта(Док.Ссылка, СвойствоЗаказов, ДанныеЗаказа["id"]);  
	Обработки.crm_RetailCRMОбработка.УНФ_УстановитьСвойствоУОбъекта(Док.Ссылка, СвойствоЗаказовМагазин, ДанныеЗаказа["site"]);
	СвойствоСтатусЗаказа = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьСвойство("СтатусЗаказа", Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя);
	Обработки.crm_RetailCRMОбработка.УНФ_УстановитьСвойствоУОбъекта(Док.Ссылка, СвойствоСтатусЗаказа, ДанныеЗаказа["СтатусЗаказа"]);
	
	// Производство
	Если СтатусДействия.Производство Тогда 
		СтатусыТоваров = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ТабСтатусыТоваров");
		Если СтатусыТоваров <> Неопределено И типзнч(СтатусыТоваров) = тип("ТаблицаЗначений") Тогда 
			
			СтрокиСтатусаКПроизводству = СтатусыТоваров.НайтиСтроки(Новый Структура("Производство",Истина));	
			Если СтрокиСтатусаКПроизводству.Количество() <> 0 Тогда
				ТоварыКПроизводству = Новый ТаблицаЗначений;
				ТоварыКПроизводству.Колонки.Добавить("Номенклатура");
                ТоварыКПроизводству.Колонки.Добавить("Характеристика");
				ТоварыКПроизводству.Колонки.Добавить("Количество");
				Для каждого СтатусКПроизводству Из СтрокиСтатусаКПроизводству Цикл
					НайдСтроки = Док["Запасы"].НайтиСтроки(Новый Структура("crm_Статус",СтатусКПроизводству.Название));
					Если НайдСтроки.Количество() <> 0 Тогда
						Для каждого Стр Из НайдСтроки Цикл
							ЗаполнитьЗначенияСвойств(ТоварыКПроизводству.Добавить(), Стр, "Номенклатура, Характеристика, Количество");		
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ОбщегоНазначения.СообщитьПользователю("Не выставлен хотя бы на один статус товара пункт перехода в режим Производство");
			КонецЕсли;

			Если типзнч(ТоварыКПроизводству) = тип("ТаблицаЗначений") И ТоварыКПроизводству.Количество() Тогда 
				УНФ_СоздатьЗаказНаПроизводство(Док,Стр,СтатусДействия,ТоварыКПроизводству);
			КонецЕсли;
			
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Таблица статусов товаров не заполнена." + Символы.ПС 
					+ "Заказ " + ДанныеЗаказа["НомерЗаказа"]+ " был загружен. Дальнейшие действия приостановленый!" 
					+ Символы.ПС + "Необходимо перейти в форму настроек RetailCRM И заполнить таблицу значений.");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Перемещения
	Если СтатусДействия.Перемещение И ОтменаЗаказа = Ложь Тогда 
						
		УНФ_СоздатьПеремещения(Док,Док.СпособДоставки,ДанныеЗаказа,Стр,СтатусДействия);
			
	КонецЕсли;
	
	// Реализация
	СоздаватьРеализацию = Ложь;
	Если СтатусДействия.Отгрузка И ОтменаЗаказа = Ложь Тогда
		Если НесколькоОрганизаций = Истина Тогда
			ОрганизацияРеализация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(crmОрганизация, "Реализация");
			Если ОрганизацияРеализация = Истина Тогда 
				СоздаватьРеализацию = Истина;
			КонецЕсли;
		Иначе
			Если crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("СозданиеРеализаций") = Истина Тогда 
				СоздаватьРеализацию = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СоздаватьРеализацию Тогда
				
		Реализация = УНФ_ВернутьРеализацию(Док.Ссылка);
		
		Если ЗначениеЗаполнено(Реализация) Тогда
			Если Реализация.Проведен Тогда
				РеализацияОб = Реализация.ПолучитьОбъект();
				РеализацияОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		КонецЕсли;  
		
		Если УНФ_СоздатьРеализацию(Док, Реализация) Тогда
			Док.СостояниеЗаказа   = Справочники.СостоянияЗаказовПокупателей.Завершен;
			Док.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно;  
			ЗаписатьДокумент(Док);
		КонецЕсли;
		
	КонецЕсли;
	
	// ВыгрузкаСостоянияНового
	Если СтатусДействия.Резервирование Тогда
		СтруктураДанныхВыгрузки = УНФ_ВернутьСтруктуруПараметровВыгрузки();
		
		СтатусыТоваров = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ТабСтатусыТоваров");
		Если СтатусыТоваров <> Неопределено И типзнч(СтатусыТоваров) = тип("ТаблицаЗначений") Тогда
			
			СтрокиСтатусаКПроизводству = СтатусыТоваров.НайтиСтроки(Новый Структура("Производство",Истина));	
			Если СтрокиСтатусаКПроизводству.Количество() <> 0 Тогда
				ТоварыКПроизводству = Новый ТаблицаЗначений;
				ТоварыКПроизводству.Колонки.Добавить("Номенклатура");

				Для каждого СтатусКПроизводству Из СтрокиСтатусаКПроизводству Цикл
					НайдСтроки = Док["Запасы"].НайтиСтроки(Новый Структура("crm_Статус",СтатусКПроизводству.Название));
					Если НайдСтроки.Количество() <> 0 Тогда
						СтруктураДанныхВыгрузки.ЕстьТоварыКПошиву = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ТоварыВРезереве = Док["Запасы"].НайтиСтроки(Новый Структура("crm_Статус","in-reserve"));
				Если ТоварыВРезереве.Количество() = Док["Запасы"].Количество() Тогда
					СтруктураДанныхВыгрузки.ВыгрузитьСтатусНаличия = Истина;		
				КонецЕсли;

				СтруктураДанныхВыгрузки.ВыгрузкаПодРезервирование = Истина;
				crm_RetailCRMОбщийВызовСервера.ВыгрузитьЗаказВCRM(Док.Ссылка,ОтменаЗаказа,СтруктураДанныхВыгрузки);
				
			Иначе
				ОбщегоНазначения.СообщитьПользователю("Не выставлен хотя бы на один статус товара пункт перехода в режим Производство");
			КонецЕсли;
			
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Таблица статусов товаров не заполнена." + Символы.ПС 
					+ "Заказ " + ДанныеЗаказа["НомерЗаказа"]+ " был загружен. Дальнейшие действия приостановленый!" 
					+ Символы.ПС + "Необходимо перейти в форму настроек RetailCRM И заполнить таблицу значений.");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	// ПустаяНоменклатура = Ложь;
	// Для Каждого товар Из Док.Запасы Цикл 
	// 	Если Не ЗначениеЗаполнено(товар.Номенклатура) Тогда 
	// 		ПустаяНоменклатура = Истина;
	// 	КонецЕсли;
	// КонецЦикла;
	// 
	// Если Не ПустаяНоменклатура Тогда
	// 	crm_RetailCRMОбщий.ВыгрузитьExternalIdsТоваров(Док);
	// КонецЕсли;
		
КонецПроцедуры

Процедура УНФ_СоздатьПеремещения(Док, ТипДоставки, ДанныеЗаказа, Стр, СтатусДействия) Экспорт
	
	СписокДоставок = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("СоответствиеТипыДоставок");
	
	Если типзнч(СписокДоставок) <> тип("ТаблицаЗначений") Тогда
		ОбщегоНазначения.СообщитьПользователю("Не заполнены типы доставок");
		Возврат;
	КонецЕсли;
								
	Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ПеремещениеЗапасов.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Документ.ПеремещениеЗапасов КАК ПеремещениеЗапасов
		                      |ГДЕ
		                      |	НЕ ПеремещениеЗапасов.ПометкаУдаления
		                      |	И ПеремещениеЗапасов.ДокументОснование = &Заказ
		                      |	И ПеремещениеЗапасов.СтруктурнаяЕдиница = &СкладОтправитель"); 
	
	Запрос.УстановитьПараметр("Заказ",Док.Ссылка);
	Запрос.УстановитьПараметр("СкладОтправитель",Док.СтруктурнаяЕдиницаРезерв);
		
	УстановитьПривилегированныйРежим(Истина);
    Документ = Запрос.Выполнить().Выбрать(); 										
	УстановитьПривилегированныйРежим(Ложь);   
	
	Если Документ.Следующий() Тогда
		Перемещение = Документ.Ссылка.ПолучитьОбъект();
	Иначе
		Перемещение = Документы.ПеремещениеЗапасов.СоздатьДокумент();
	КонецЕсли;
	
	Перемещение.ЗаполнитьПоЗаказуПокупателя(Док.Ссылка);
	Перемещение.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение;
	
	// Перемещение.ЗаказПокупателя  = Док.Ссылка;
	Перемещение.ДокументОснование = Док.Ссылка;
	
	Если не ЗначениеЗаполнено(Перемещение.Ссылка) Тогда
		Перемещение.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();	
	КонецЕсли;
	
	Перемещение.СтруктурнаяЕдиница = Док.СтруктурнаяЕдиницаРезерв; 
			
	МассивДоставок = СписокДоставок.НайтиСтроки(Новый Структура("КодCRM",ДанныеЗаказа["СпособДоставки"]));
	
	Если МассивДоставок.Количество() <> 0 Тогда
		Перемещение.СтруктурнаяЕдиницаПолучатель = МассивДоставок[0].СкладДоставки;	
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Не определен способ доставки в соответствии");
		Возврат;
	КонецЕсли;
		
	ЗаписатьДокумент(Перемещение);			
	
КонецПроцедуры

Процедура УНФ_СоздатьДокументОплаты(Док, Оплата, ТипДокументаОплаты, ДокументОплаты)
	
	Док = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Док, "Ссылка");
			
	Если ТипДокументаОплаты = "Постуление безналичных денежных средств" Тогда 
		
		// создаем поступление ДС
		Если Не ЗначениеЗаполнено(ДокументОплаты) Тогда
			ДокОБ = Документы.ПоступлениеНаСчет.СоздатьДокумент();
		Иначе 
			ДокОБ = ДокументОплаты.ПолучитьОбъект();
		КонецЕсли;
		
		Попытка
			ДокОБ.ЗаполнитьПоЗаказуПокупателя(Док);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		докОб.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
		ДокОБ.Дата 			 = Оплата["ДатаОплаты"]; 
		докОб.СуммаДокумента = Оплата["СуммаПлатежа"];
		ДокОБ.Комментарий	 = Строка(Оплата["Комментарий"]) + " " + Строка(Оплата["ИДОплаты"]);
		ДокОБ.ЗаполнитьРасшифровкуПлатежа();   
		
		Для каждого Стр Из докОб.РасшифровкаПлатежа Цикл
			Стр.Заказ = Док;	
		КонецЦикла;
				
		СвойствоОплаты = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьСвойство("ИДоплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ПоступлениеНаСчет);
		
	ИначеЕсли ТипДокументаОплаты = "Поступление наличных денежных средств" Тогда
		
		// создаем ПКО
		Если Не ЗначениеЗаполнено(ДокументОплаты) Тогда
			ДокОБ = Документы.ПоступлениеВКассу.СоздатьДокумент();
		Иначе
			ДокОБ = ДокументОплаты.ПолучитьОбъект();
		КонецЕсли;	
		
		Попытка
			ДокОБ.ЗаполнитьПоЗаказуПокупателя(Док);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		докОб.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
		ДокОБ.Дата 			= Оплата["ДатаОплаты"];
		докОб.СуммаДокумента = Оплата["СуммаПлатежа"];
		ДокОБ.Комментарий	= Строка(Оплата["Комментарий"]) + " " + Строка(Оплата["ИДОплаты"]);
		ДокОБ.ЗаполнитьРасшифровкуПлатежа();
				
		Для каждого Стр Из докОб.РасшифровкаПлатежа Цикл
			Стр.Заказ = Док;	
		КонецЦикла;
		
		СвойствоОплаты = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьСвойство("ИДоплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ПоступлениеВКассу);

	КонецЕсли;
	
	Если ДокОБ <> Неопределено Тогда 
		Если ДокОБ.ПометкаУдаления Тогда 
			ДокОБ.ПометкаУдаления = Ложь
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ДокОБ.Записать(РежимЗаписиДокумента.Проведение);
		ОбщегоНазначения.СообщитьПользователю("Документ проведен: " + ДокОБ.Ссылка, СтатусСообщения.Информация);
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось провести документ оплаты по заказу " + Док + " " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Попытка
			ДокОБ.Записать(РежимЗаписиДокумента.Запись);
			ОбщегоНазначения.СообщитьПользователю("Документ записан: " + ДокОБ.Ссылка , СтатусСообщения.Информация);
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удалось записать документ оплаты по заказу " + Док + " " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
	КонецПопытки;
	
	Если ДокОБ <> Неопределено Тогда
		Обработки.crm_RetailCRMОбработка.УНФ_УстановитьСвойствоУОбъекта(ДокОБ.Ссылка, СвойствоОплаты, Формат(Оплата["ИДОплаты"], "ЧГ=0"));
	КонецЕсли;

КонецПроцедуры

Функция УНФ_СоздатьРеализацию(Док, Реализация)
	
	Если Не Док.Проведен Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ДокументЗаказКлиента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Док, "Ссылка");
	
	Если Не ЗначениеЗаполнено(Реализация) Тогда
		ДокументРеализации = Документы.РасходнаяНакладная.СоздатьДокумент();
	Иначе 
		ДокументРеализации = Реализация.ПолучитьОбъект();
	КонецЕсли;
	
	ДокументРеализации.ЗаполнитьПоЗаказуПокупателя(ДокументЗаказКлиента);

	Если не ЗначениеЗаполнено(ДокументРеализации.Ссылка) Тогда
		ДокументРеализации.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();	
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель КАК Получатель
	                      |ИЗ
	                      |	Документ.ПеремещениеЗапасов КАК ПеремещениеЗапасов
	                      |ГДЕ
	                      |	НЕ ПеремещениеЗапасов.ПометкаУдаления
	                      |	И ПеремещениеЗапасов.ДокументОснование = &Заказ
	                      |	И ПеремещениеЗапасов.СтруктурнаяЕдиница = &СкладОтправитель"); 
	
	
	СтруктурнаяЕдиницаРезерв = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗаказКлиента, "СтруктурнаяЕдиницаРезерв");
	Запрос.УстановитьПараметр("Заказ",ДокументЗаказКлиента);
	Запрос.УстановитьПараметр("СкладОтправитель",СтруктурнаяЕдиницаРезерв);
		
	УстановитьПривилегированныйРежим(Истина);
	
    Документ = Запрос.Выполнить().Выбрать(); 										
	УстановитьПривилегированныйРежим(Ложь);  
	
	Если Документ.Следующий() Тогда
		ДокументРеализации.СтруктурнаяЕдиница = Документ.Получатель;
	Иначе
		ДокументРеализации.СтруктурнаяЕдиница = СтруктурнаяЕдиницаРезерв;	
	КонецЕсли;
	
	ДокументРеализации.Заказ = ДокументЗаказКлиента;  
	ДокументРеализации.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
	
	Попытка
		
		ДокументРеализации.Записать(РежимЗаписиДокумента.Проведение);
		ОбщегоНазначения.СообщитьПользователю("Документ проведен: " + ДокументРеализации , СтатусСообщения.Информация);
		Возврат Истина;
		
	Исключение
		
		ОбщегоНазначения.СообщитьПользователю("Не удалось провести документ: " + ДокументРеализации + " " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Попытка
			ДокументРеализации.Записать(РежимЗаписиДокумента.Запись);
			ОбщегоНазначения.СообщитьПользователю("Документ записан: " + ДокументРеализации , СтатусСообщения.Информация);
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удалось записать документ: " + ДокументРеализации + " " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		Возврат Ложь;

	КонецПопытки;
	
КонецФункции

Процедура УНФ_СоздатьСтрокуДокумента(Док,Стр, ОтменаЗаказа = Ложь, Эталонная, ТекСтр, СоответствиеСтатусов)
	
	offers_id = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("offers_id");
	
	Попытка
		Если offers_id = "externalId" Тогда   	
			XmlID = Стр["externalId"]; 		
		Иначе 		
			XmlID = Стр["xmlId"]; 	
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
		
	Если Стр["Удален"] = Истина ИЛИ ОтменаЗаказа Тогда
		Возврат;
	КонецЕсли;
	
	Если crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда 
		
		СтруктураНоменклатуры		= УНФ_ВернутьНоменклатуру(XmlID);
		ИскХар						= СтруктураНоменклатуры.ИскХарактеристика;
		ИскНом 						= СтруктураНоменклатуры.ИскНоменклатура;
		
	Иначе 
		
		ИдентификаторТовара = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
		Если ИдентификаторТовара = "Код" Тогда
			ИскНом	= Справочники.Номенклатура.найтиПоКоду(XmlID);
		ИначеЕсли ИдентификаторТовара = "Артикул" Тогда
			ИскНом	= Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", XmlID);
		ИначеЕсли ИдентификаторТовара = "GUID" Тогда
			Уид 	= Новый УникальныйИдентификатор(XmlID);
			ИскНом	= Справочники.Номенклатура.ПолучитьСсылку(Уид);	
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИскНом) Тогда 
		ИскНом = Справочники.Номенклатура.ПустаяСсылка();
		ЗаписьЖурналаРегистрации("RetailCRM",УровеньЖурналаРегистрации.Ошибка,,,"Товар с " + offers_id + ": " + XmlID + " не определен");
	КонецЕсли;     
		
	Цена 						= Стр["Цена"];
	Количество 					= Стр["Количество"];
	СуммаСкидкиНаценки 			= ?(Стр["ОбщаяСкидка"] 	= Неопределено, 	0, Стр["ОбщаяСкидка"]);
	СуммаСкидкиНаценки 			= СуммаСкидкиНаценки*Количество;
	ЦенаСумма 					= Цена - Стр["ОбщаяСкидка"];
	
	НовСтр 						= Док["Запасы"].Добавить();
	новСтр.Номенклатура 		= ИскНом.Ссылка; 
	новСтр.ТипНоменклатурыЗапас = Истина;
	новСтр.ЕдиницаИзмерения     = ИскНом.ЕдиницаИзмерения;
	новСтр.Содержание			= ИскНом.Наименование;

	Если ЗначениеЗаполнено(ИскХар) Тогда
		новСтр.Характеристика 		= ИскХар;
	КонецЕсли;
	 
	новСтр.Количество 				= Стр["Количество"];
	новСтр.Цена 					= Стр["Цена"];
	новСтр.СтруктурнаяЕдиницаРезерв	= Док["СтруктурнаяЕдиницаРезерв"];
	новСтр.Сумма					= новСтр.Количество * ЦенаСумма;
	новСтр.ДатаОтгрузки 			= ?(ЗначениеЗаполнено(Док.ДатаОтгрузки), Док.ДатаОтгрузки, ОбщегоНазначения.ТекущаяДатаПользователя());
	новСтр.СуммаСкидкиНаценки 		= СуммаСкидкиНаценки;
	
	Если Док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт ИЛИ
			Док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			
		новСтр.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС"); 
		
	ИначеЕсли Док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда 
		
		новСтр.СтавкаНДС = новСтр.Номенклатура.СтавкаНДС;
		новСтр.СуммаНДС = РасчитатьНДС (новСтр.Сумма, новСтр.СтавкаНДС);   
		
	КонецЕсли;
	
	новСтр.Всего = новСтр.Сумма;
	новСтр.crm_Статус 		= Стр["СтатусТовара"];	
КонецПроцедуры

Процедура УНФ_СоздатьУслугуДоставки(Док,Стр, ОтменаЗаказа)
		
	Если Стр["СтоимостьДоставки"] <> Неопределено  Тогда
		
		Если ЗначениеЗаполнено(Стр["СтоимостьДоставки"]) И Стр["СтоимостьДоставки"] <> "0" И не ОтменаЗаказа Тогда
			
			    ТипыДоставок = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("СоответствиеТипыДоставок");
				
				Если ТипыДоставок = Неопределено Тогда 
					ОбщегоНазначения.СообщитьПользователю("Не заполнена таблица соответсвий типов доставки."+ Символы.ПС 
							+	"RetailCRM интеграция -> Дополнительные возможности -> Использовать типы доставок");
					Возврат;				
				КонецЕсли;   
				
				ТипДоставки = ТипыДоставок.НайтиСтроки(Новый Структура("КодCRM",СокрЛП(Стр["СпособДоставки"])));
				
				Если ТипДоставки.Количество() = 0 Тогда   
					ОбщегоНазначения.СообщитьПользователю("Не найден тип доставки в Таблице соответствий."+ Символы.ПС 
							+	"RetailCRM интеграция -> Доставка -> Заполнить табличную часть с кодом "
							+	СокрЛП(Стр["СпособДоставки"]));
					Возврат;
				КонецЕсли;  
				
				Если не ЗначениеЗаполнено(Док.НоменклатураДоставки) Тогда
					Док.НоменклатураДоставки	= crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("Доставка");
				КонецЕсли;   
				
				Док.СпособДоставки			= ТипДоставки[0].СпособДоставки;    
  
				Если не ЗначениеЗаполнено(Док.СлужбаДоставки) Тогда
					Док.СлужбаДоставки			= Справочники.СлужбыДоставки.ДоставкаСобственнымиСилами;   
				КонецЕсли;   

				Док.СтоимостьДоставки			= Стр["СтоимостьДоставки"];
				Док.СебестоимостьДоставки		= Стр["СебестоимостьДоставки"];
				
				Если Док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС ИЛИ
						Док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт	Тогда
							
					Док.СтавкаНДСДоставки = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");          

				ИначеЕсли Док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда   
					
					Док.СтавкаНДСДоставки = Док.НоменклатураДоставки.СтавкаНДС;
					Док.СуммаНДСДоставки = РасчитатьНДС(Док.СтоимостьДоставки, Док.СтавкаНДСДоставки);  
					
				КонецЕсли;
				
			КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры    

Процедура УНФ_СоздатьЗаказНаПроизводство(Док, Стр, СтатусДействия,ТоварыКПроизводству)
	
	НовДок = Документы.ЗаказНаПроизводство.СоздатьДокумент();
	
	НовДок.ЗаполнитьПоЗаказуПокупателя(Док.Ссылка);
	
	НовДок["Продукция"].Загрузить(ТоварыКПроизводству);
	
	Спецификации = Новый Массив;
	Для каждого Товар Из НовДок["Продукция"] Цикл
		
		Товар.Спецификация = Справочники.Спецификации.СпецификацияПоУмолчанию(Товар.Номенклатура,Товар.Характеристика);
		Товар.ЗаказПокупателя = Док.Ссылка;
		Товар.ТипНоменклатуры = Товар.Номенклатура.ТипНоменклатуры;
		Товар.СтруктурнаяЕдиница = Док.СтруктурнаяЕдиницаРезерв;
		Товар.ЕдиницаИзмерения = Товар.Номенклатура.ЕдиницаИзмерения;
		Спецификации.Добавить(Товар.Спецификация);
		
	КонецЦикла;
	
	НовДок.ЗаполнитьЗапасыПоСпецификации(Спецификации);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТехоперации") И Константы.АвтоматическиПланироватьОперацийЗаказомНаПроизводство.Получить() Тогда
		НовДок.ЗаполнитьОперацииПоСпецификации();
	КонецЕсли; 
	
	НовДок.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
	новДок.ДокументОснование = Док.Ссылка;
	новДок.Старт = НачалоДня(НовДок.Дата) + 24 * 60 * 60;
	новДок.Финиш = КонецДня(новДок.Старт);
	новДок.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаНаПроизводство();
	новДок.ВидОперации 	   = Перечисления.ВидыОперацийЗаказНаПроизводство.Сборка;
	новДок.СтруктурнаяЕдиницаРезерв = новДок.СтруктурнаяЕдиница;
	новДок.СтруктурнаяЕдиница		= crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("СкладОпераций");
	новДок.СтруктурнаяЕдиницаОпераций = новДок.СтруктурнаяЕдиница;
	
	новДок.УчетПотребностиПоЗаказамНаПроизводство = Истина;
    новДок.УчетПотребностиПоЗаказам = Истина;

	ЗаписатьДокумент(НовДок);
		
КонецПроцедуры

Процедура УНФ_СоздатьДокументВозврата(Реализация, ТзТоваров)
	
	offers_id = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("offers_id");
	СтатусыТоваров = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ТабСтатусыТоваров");
	Если СтатусыТоваров <> Неопределено И типзнч(СтатусыТоваров) = тип("ТаблицаЗначений") Тогда 
		
		СтрокиСтатусаКВозврату = СтатусыТоваров.НайтиСтроки(Новый Структура("Возврат",Истина));	
		Если СтрокиСтатусаКВозврату.Количество() <> 0 Тогда
			
			ТоварыКВозврату = Новый ТаблицаЗначений;
			ТоварыКВозврату.Колонки.Добавить("offer");
			ТоварыКВозврату.Колонки.Добавить("Количество");
			ТоварыКВозврату.Колонки.Добавить("ОбщаяСкидка");
			ТоварыКВозврату.Колонки.Добавить("Цена");
			
			Для каждого СтатусКВозврату Из СтрокиСтатусаКВозврату Цикл
				НайдСтроки = ТзТоваров.НайтиСтроки(Новый Структура("СтатусТовара",СтатусКВозврату.Название));
				Если НайдСтроки.Количество() <> 0 Тогда
					Для каждого Стр Из НайдСтроки Цикл  
						
						НовСтр = ТоварыКВозврату.Добавить();
						НовСтр.offer = Стр[offers_id];
						НовСтр.Количество = Стр["Количество"];
						НовСтр.ОбщаяСкидка = Стр["ОбщаяСкидка"];
						НовСтр.Цена = Стр["Цена"];
						
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Не выставлен хотя бы на один статус товара пункт перехода в режим Возврат");
		КонецЕсли;

	Иначе
		ОбщегоНазначения.СообщитьПользователю("Таблица статусов товаров не заполнена." + Символы.ПС 
				+ "Дальнейшие действия приостановлены!" 
				+ Символы.ПС + "Необходимо перейти в форму настроек RetailCRM И заполнить таблицу значений.");
		Возврат;
	КонецЕсли;
	
    Если типзнч(ТоварыКВозврату) = тип("ТаблицаЗначений") И ТоварыКВозврату.Количество() Тогда 

		НовДок = Документы.ПриходнаяНакладная.СоздатьДокумент();
		НовДок.ЗаполнитьПоРасходнойНакладной(Реализация);             
		
		Если не ЗначениеЗаполнено(НовДок.Дата) Тогда
			НовДок.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();	
		КонецЕсли;
		
		НовДок.Запасы.Очистить();
		Для каждого Стр Из ТоварыКВозврату Цикл
			
			Попытка
				XmlID = Стр.offer;
			Исключение
				Возврат;
			КонецПопытки; 

			Если crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда 
				
				СтруктураНоменклатуры		= УНФ_ВернутьНоменклатуру(XmlID);
				ИскХар						= СтруктураНоменклатуры.ИскХарактеристика;
				ИскНом 						= СтруктураНоменклатуры.ИскНоменклатура;
				
			Иначе 
				
				ИдентификаторТовара = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
				Если ИдентификаторТовара = "Код" Тогда
					ИскНом	= Справочники.Номенклатура.найтиПоКоду(XmlID);
				ИначеЕсли ИдентификаторТовара = "Артикул" Тогда
					ИскНом	= Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", XmlID);
				ИначеЕсли ИдентификаторТовара = "GUID" Тогда
					Уид 	= Новый УникальныйИдентификатор(XmlID);
					ИскНом	= Справочники.Номенклатура.ПолучитьСсылку(Уид);	
				КонецЕсли;
				
			КонецЕсли;

			Если Не ЗначениеЗаполнено(ИскНом) Тогда 
				ИскНом = Справочники.Номенклатура.ПустаяСсылка();
				ЗаписьЖурналаРегистрации("RetailCRM"
										, УровеньЖурналаРегистрации.Ошибка
										,
										,
										, "Товар с " + offers_id + ": " + XmlID + " не определен");
			КонецЕсли;     
				
			Цена 						= Стр["Цена"];
			Количество 					= Стр["Количество"];
			СуммаСкидкиНаценки 			= ?(Стр["ОбщаяСкидка"] 	= Неопределено, 	0, Стр["ОбщаяСкидка"]);
			СуммаСкидкиНаценки 			= СуммаСкидкиНаценки * Количество;
			ЦенаСумма 					= Цена - Стр["ОбщаяСкидка"];

			НовСтр 						= НовДок["Запасы"].Добавить();
			новСтр.Номенклатура 		= ИскНом.Ссылка; 
			новСтр.ЕдиницаИзмерения     = ИскНом.ЕдиницаИзмерения;
			новСтр.Содержание			= ИскНом.Наименование;

			Если ЗначениеЗаполнено(ИскХар) Тогда
				новСтр.Характеристика 		= ИскХар;
			КонецЕсли;
			 
			новСтр.Количество 				= Стр["Количество"];
			новСтр.Цена 					= Стр["Цена"];
			новСтр.СтруктурнаяЕдиница		= НовДок["СтруктурнаяЕдиница"];
			новСтр.Сумма					= новСтр.Количество * ЦенаСумма;
			новСтр.СуммаСкидкиНаценки 		= СуммаСкидкиНаценки;
            новСтр.Всего = новСтр.Сумма;
			
			Если НовДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт ИЛИ
					НовДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					
				новСтр.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС"); 
				
			ИначеЕсли НовДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда 
				
				новСтр.СтавкаНДС = новСтр.Номенклатура.СтавкаНДС;
				новСтр.СуммаНДС = РасчитатьНДС (новСтр.Сумма, новСтр.СтавкаНДС);   
				
			КонецЕсли;

		КонецЦикла;
		
		Попытка
			НовДок.Записать(РежимЗаписиДокумента.Проведение);
			ОбщегоНазначения.СообщитьПользователю("Документ проведен: " + НовДок , СтатусСообщения.Информация);
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удалось провести документ: " + НовДок + " " + ОписаниеОшибки());
			Попытка
				НовДок.Записать(РежимЗаписиДокумента.Запись);
				ОбщегоНазначения.СообщитьПользователю("Документ записан: " + НовДок , СтатусСообщения.Информация);
			Исключение
				ОбщегоНазначения.СообщитьПользователю("Не удалось записать документ: " + НовДок + " " + ОписаниеОшибки());
			КонецПопытки;
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОтправитьВCRM(Предложения, Магазин)
	
	ИмяСервера = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера");
	
	Переменные = Новый Соответствие();
	Переменные.Вставить("offers", crm_RetailCRMОбщийВызовСервера.JsonTest(Предложения, Новый ЗаписьJSON));	
	Переменные.Вставить("site",  Магазин.КодМагазина);
	Переменные.Вставить("apiKey", crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM"));	
	
	Попытка
		Ответ = crm_RetailCRMОбщийВызовСервера.HTTPзапросPOST(ИмяСервера, "/api/v5/store/inventories/upload", Переменные);
		
		ОбщегоНазначения.СообщитьПользователю(Ответ);
		
		РезультатВыполнения = crm_RetailCRMОбщийВызовСервера.UnJSONTest(Ответ);

		Если РезультатВыполнения["success"] = Истина Тогда 
			ОбщегоНазначения.СообщитьПользователю("Остатки выгружены " + ОбщегоНазначения.ТекущаяДатаПользователя());
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Остатки не выгружены. Ошибка в работе API" + ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(Ответ);
			Возврат;
		КонецЕсли;
		
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Критическая ошибка работы API в модуле обработки." +
		Символы.ПС +  "Одним Из решений является Админка - Настройка - Склад " + 
		Символы.ПС + " (Включить бронирование остатков И включить редактирование остатков)");
	КонецПопытки;
	
КонецПроцедуры	

Функция Мод_ПолучитьЗаказыПоИД(МассивИД) Экспорт
		
	Если МассивИД.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	
	СтрокаИД = "";
	Для Каждого ИД Из МассивИД Цикл
		СтрокаИД = СтрокаИД + "filter[ids][]=" + ИД + "&";
	КонецЦикла;
	
	СтрокаИД = ?(Прав(СтрокаИД, 1) = "&", Лев(СтрокаИД, СтрДлина(СтрокаИД) - 1), СтрокаИД);
	
	ApiKey 		 = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM");
	АдресСкрипта = "/api/v5/orders?" + СтрокаИД  + "&limit=100&apiKey=" + ApiKey;
	
	Ответ = ЗапросCRM(АдресСкрипта);
	
	Для Каждого Заказ Из Ответ["orders"] Цикл
		МассивЗаказов.Добавить(Заказ);
	КонецЦикла;
	
	ВсегоСтраниц = Ответ["pagination"]["totalPageCount"];
	Для ин = 2 По ВсегоСтраниц Цикл
		процент = Окр(ин * 100 / ВсегоСтраниц, 2);
		ОбщегоНазначения.СообщитьПользователю("Запрос к retailCRM " + ин + " " + строка(процент) + "% ...");
		
		АдресСкрипта = "/api/v5/orders?page=" + ин + "&" + СтрокаИД  + "&limit=100&apiKey=" + ApiKey;
		
		Ответ = ЗапросCRM(АдресСкрипта);
		
		Для Каждого Заказ Из Ответ["orders"] Цикл
			МассивЗаказов.Добавить(Заказ);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивЗаказов;
	
КонецФункции

Функция УНФ_ВернутьСтруктуруПараметровВыгрузки() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ЕстьТоварыКПошиву", Ложь);
	Структура.Вставить("ВыгрузитьСтатусНаличия", Ложь);
	Структура.Вставить("ВыгрузкаСтатусаЗаказа", Ложь);
	Структура.Вставить("ВыгрузкаСтатусовТовара", Ложь);
	Структура.Вставить("ВыгрузкаПодРезервирование", Ложь);
	
	Возврат Структура;
	
КонецФункции

Функция УНФ_ОпределениеКонтрагента(Стр, Организация)
	
	КорпоративныеКлиенты =  crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КорпоративныеКлиенты");
	
	ИскКонт 		= Неопределено;
	ТипКлиента 		= Неопределено;
	АдресДоставки  	= Стр["АдресДоставки"]; 
	ТНомер 			= Стр["Телефон"];	
	ДанныеКонтрагента = Стр["ДанныеКонтрагента"];
	
	Если КорпоративныеКлиенты = Истина Тогда
		Почта					= Стр["ДанныеКонтактногоЛица"]["Почта"];
		ИмяКлиента 				= "";           // партнер
		НаименованиеКомпании 	= "";           // контрагент
		ПолноеНаименование		= "";
		
		ДанныеКорпКлиента		= Стр["ДанныеКорпКлиента"];
		ДанныеКонтактногоЛица 	= Стр["ДанныеКонтактногоЛица"];
		типКлиента 	 			= ДанныеКорпКлиента["Тип"];
		
		Если типКлиента = "customer_corporate" Тогда       				 // корпоративный клиент
			ТипКонтрагента 		 = ДанныеКонтрагента["ТипКонтрагента"]; // какой тип если выбран не корп клиент, а просто клиент
			имяКлиента 		 	 = ДанныеКорпКлиента["НаименованиеКорп"];
			ЮридическийАдрес 	 = ДанныеКонтрагента["АдресРегистрации"];
			НаименованиеКомпании = ДанныеКонтрагента["НазваниеКомпании"];
			ПолноеНаименование	 =  ДанныеКонтрагента["ПолноеНаименование"];
			IdКонтрагента		 =  ДанныеКонтрагента["ID"];
			ИНН 				 = СокрЛП(ДанныеКонтрагента["ИНН"]);
			КПП					 = СокрЛП(ДанныеКонтрагента["КПП"]);
		ИначеЕсли  типКлиента = "customer" Тогда                   		// клиент
			// на основании этих данных создаем партнера без контактного лица
			имяКлиента 		 	 = Стр["ФИО"];
			IdКонтрагента		 = ДанныеКонтактногоЛица["ID"];
		КонецЕсли;
		
	Иначе
		
		Почта					= Стр["Почта"];
		имяКлиента 				= Стр["ФИО"];
		ТипКонтрагента 	  		= ДанныеКонтрагента["Тип"];
		IdКонтрагента			= Стр["IdКлиента"];
		Если ЗначениеЗаполнено(ДанныеКонтрагента["НаименованиеЮрЛица"]) Тогда 
			Наименование = ДанныеКонтрагента["НаименованиеЮрЛица"];
			НаименованиеПолное = ДанныеКонтрагента["НаименованиеЮрЛица"];
		Иначе 
			Наименование = имяКлиента;
			НаименованиеПолное = имяКлиента;
		КонецЕсли;
		Если ТипКонтрагента = "ЮрЛицо"  Тогда
			ИНН 					= СокрЛП(ДанныеКонтрагента["ИНН"]);
			КПП						= СокрЛП(ДанныеКонтрагента["КПП"]);
		ИначеЕсли ТипКонтрагента = "ИндивидуальныйПредприниматель" Тогда
			ИНН 					= СокрЛП(ДанныеКонтрагента["ИНН"]);
		КонецЕсли;	
	КонецЕсли;	
	
	ИскКонт = УНФ_ВернутьКонтрагентаПоID(IdКонтрагента); 
	
	// если нашли по id, получаем партнера
	// поменяла корп клиента на клиента, значит И партнера нужно искать заново?
	Если не ЗначениеЗаполнено(ИскКонт) Тогда 
		// если по id не нашли, ищем по ИНН И КПП (для корпов)
		Если (КорпоративныеКлиенты И типКлиента = "customer_corporate") 
			ИЛИ (Не КорпоративныеКлиенты И ТипКонтрагента = "ЮрЛицо") 
			ИЛИ (Не КорпоративныеКлиенты И ТипКонтрагента = "ИндивидуальныйПредприниматель") Тогда // корпоративный клиент
			
			ИскКонт = УНФ_ВернутьКонтрагентаПоИНН_КПП(ДанныеКонтрагента["ИНН"],ДанныеКонтрагента["КПП"]);
			
			// если по id не нашли, ищем по почте И телефону 
		Иначе 	
			ИскКонт = УНФ_ВернутьКонтрагентаПоТелефону_Почте(Почта, тНомер);
		КонецЕсли;
		
	КонецЕсли;
	
	// редактируем информацию по клиентам в 1С                                                                   
	
	// контрагент
	Если НЕ значениеЗаполнено(ИскКонт) Тогда
		ИскКонт = Справочники.Контрагенты.СоздатьЭлемент();
	Иначе 
		ИскКонт = ИскКонт.ПолучитьОбъект();
	КонецЕсли;
	
	Если КорпоративныеКлиенты Тогда 
		Если  типКлиента = "customer_corporate" Тогда 
			ИскКонт.Наименование = НаименованиеКомпании;
			ИскКонт.НаименованиеПолное = ПолноеНаименование;
			Если ТипКонтрагента = "ЮрЛицо" Тогда 
				ИскКонт.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
				ИскКонт.ИНН = ИНН;
				ИскКонт.КПП = КПП;  
			ИначеЕсли ТипКонтрагента = "ИндивидуальныйПредприниматель" Тогда
				ИскКонт.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;
				ИскКонт.ИНН = ИНН;
			ИначеЕсли ТипКонтрагента = "ФизЛицо" Тогда 
				ИскКонт.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
			КонецЕсли;
		ИначеЕсли типКлиента = "customer" Тогда
			ИскКонт.Наименование = Стр["ФИО"];
			ИскКонт.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
		КонецЕсли;
	Иначе 
		Если ТипКонтрагента = "ФизЛицо" Тогда 
			ИскКонт.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
		ИначеЕсли ТипКонтрагента = "ЮрЛицо" Тогда 
			ИскКонт.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
			ИскКонт.ИНН = ИНН;
			ИскКонт.КПП = КПП;  
		ИначеЕсли ТипКонтрагента = "ИндивидуальныйПредприниматель" Тогда
			ИскКонт.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;
			ИскКонт.ИНН = ИНН;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеКонтрагента["НаименованиеЮрЛица"]) Тогда 
			ИскКонт.Наименование = ДанныеКонтрагента["НаименованиеЮрЛица"];
			ИскКонт.НаименованиеПолное = ДанныеКонтрагента["НаименованиеЮрЛица"];
		Иначе 
			ИскКонт.Наименование = имяКлиента;
			ИскКонт.НаименованиеПолное = имяКлиента;
		КонецЕсли;
	КонецЕсли;
	
	ИскКонт.Покупатель = Истина;
	ИскКонт.Записать();
	
	// запись id контрагента
	СвойствоКонтрагентов = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьСвойство("ИД"
										  , Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты);
	Обработки.crm_RetailCRMОбработка.УНФ_УстановитьСвойствоУОбъекта(ИскКонт.Ссылка, СвойствоКонтрагентов, IdКонтрагента);  
	// 
	
	//  Телефон
	Если тНомер <> "" Тогда
		КонтИнф = ИскКонт.КонтактнаяИнформация;
		СтрТелефон = КонтИнф.СтрНайти(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,"Вид");
		Если СтрТелефон <> Неопределено Тогда 
			СтрТелефон.Представление = тНомер;
			СтрТелефон.НомерТелефона = тНомер;
		Иначе
			НовыйТелефон = ИскКонт.КонтактнаяИнформация.Добавить();
			НовыйТелефон.Тип =  Перечисления.ТипыКонтактнойИнформации.Телефон;
			НовыйТелефон.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			НовыйТелефон.НомерТелефона = тНомер;   					
			НовыйТелефон.Представление = тНомер;
		КонецЕсли;
	КонецЕсли;
	
	//  Почта
	Если Почта <> "" Тогда
		КонтИнф = ИскКонт.КонтактнаяИнформация;
		СтрПочта = КонтИнф.СтрНайти(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,"Вид");
		Если СтрПочта <> Неопределено Тогда 
			СтрПочта.Представление = Почта;
			СтрПочта.АдресЭП = Почта;
		Иначе
			НоваяПочта = ИскКонт.КонтактнаяИнформация.Добавить();
			НоваяПочта.Тип =  Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НоваяПочта.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			НоваяПочта.АдресЭП = Почта;   					
			НоваяПочта.Представление = Почта;
		КонецЕсли;
		
	КонецЕсли;
			
	//  Адрес доставки
	Если АдресДоставки <> "" Тогда
		КонтИнф = ИскКонт.КонтактнаяИнформация;
		СтрАдресДоставки = КонтИнф.СтрНайти(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента,"Вид");
		Если СтрАдресДоставки <> Неопределено Тогда 
			СтрАдресДоставки.Представление = АдресДоставки;
		Иначе
			НовыйАдресДоставки 					= ИскКонт.КонтактнаяИнформация.Добавить();
			НовыйАдресДоставки.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес; 
			НовыйАдресДоставки.Вид 				= Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
			НовыйАдресДоставки.Представление 	= АдресДоставки;
		КонецЕсли;
	КонецЕсли;
	
	Если (КорпоративныеКлиенты И типКлиента = "customer_corporate") 
		ИЛИ (Не КорпоративныеКлиенты И ТипКонтрагента = "ЮрЛицо") 
		ИЛИ (Не КорпоративныеКлиенты И ТипКонтрагента = "ИндивидуальныйПредприниматель") Тогда // корпоративный клиент
		// 	ЮридическийАдрес 
		Если ЮридическийАдрес <> "" Тогда
			КонтИнф = ИскКонт.КонтактнаяИнформация;
			СтрЮрАдрес = КонтИнф.СтрНайти(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "Вид");
			Если СтрЮрАдрес <> Неопределено Тогда 
				СтрЮрАдрес.Представление = ЮридическийАдрес;
			Иначе
				НовыйЮрАдрес 					= ИскКонт.КонтактнаяИнформация.Добавить();
				НовыйЮрАдрес.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес; 
				НовыйЮрАдрес.Вид 				= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				НовыйЮрАдрес.Представление 		= ЮридическийАдрес;
			КонецЕсли;
			
		КонецЕсли;	
		
		// банковские реквизиты
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчетаКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|ГДЕ
		|	БанковскиеСчетаКонтрагентов.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец", ИскКонт.Ссылка);
		Результат = Запрос.Выполнить().Выгрузить();
		ЕстьСчет = Ложь;      			
		Если Результат.Количество() Тогда
			ЕстьСчет = Истина;      			
		КонецЕсли;
		
		Если Не ЕстьСчет Тогда 
			ИскБанк = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
			НайдБанк = Справочники.КлассификаторБанков.НайтиПоКоду(ДанныеКонтрагента["БИК"]);   
			Если Не НайдБанк = Справочники.КлассификаторБанков.ПустаяСсылка() Тогда 
				ИскБанк.Владелец = ИскКонт.Ссылка;
				ИскБанк.Банк = НайдБанк;
				ИскБанк.НомерСчета = ДанныеКонтрагента["БанковскийСчет"];
				ИскБанк.ВалютаДенежныхСредств = Константы.ВалютаУчета.Получить();
				ИскБанк.Наименование = строка(НайдБанк) + " (руб.)"; 
				Если ЗначениеЗаполнено(ИскБанк.НомерСчета) Тогда 
					ИскБанк.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИскКонт.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
	ИскКонт.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
	ИскКонт.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
	ИскКонт.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
	ИскКонт.ВестиРасчетыПоДоговорам = Истина;
	ИскКонт.ВестиРасчетыПоДокументам = Истина;
	ИскКонт.ВестиРасчетыПоЗаказам = Истина;
	ИскКонт.ВестиУчетОплатыПоСчетам = Истина;
	
	Если Константы.ОграничиватьДоступНаУровнеЗаписей.Получить() Тогда
		ИскКонт.ГруппаДоступа = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяГруппаДоступаКонтрагентов");
	КонецЕсли;
	
	ИскКонт.ВестиУчетОплатыПоСчетам = Истина;
	
	ИскКонт.Записать();
			
	Возврат ИскКонт.Ссылка;
	
КонецФункции

Функция УНФ_ВернутьКонтрагентаПоID(Идентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение,
	|	ДополнительныеСведения.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Значение = &Значение
	|	И ДополнительныеСведения.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Значение", Идентификатор);
	СвойствоКонтрагентов = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьСвойство("ИД"
										 , Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты);
	Запрос.УстановитьПараметр("Свойство", СвойствоКонтрагентов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда 
			ИскКонт = Выборка.Объект;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИскКонт;
	
КонецФункции

Функция УНФ_ВернутьКонтрагентаПоТелефону_Почте(Почта = "", НомерТелефона = "")
	
	Если Почта <> "" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Тип = &Тип
		|	И КонтрагентыКонтактнаяИнформация.Вид = &Вид
		|	И КонтрагентыКонтактнаяИнформация.Представление = &Представление";
		
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
		Запрос.УстановитьПараметр("Представление", Почта);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() Тогда
			ИскКонт = Результат[0].Ссылка;
		КонецЕсли;

	ИначеЕсли НомерТелефона <> "" Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Ссылка,
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Представление ПОДОБНО &Представление";
		
		Запрос.УстановитьПараметр("Представление", "%" + НомерТелефона + "%");
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() Тогда
			ИскКонт = Результат[0].Ссылка;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат ИскКонт;
	
КонецФункции

Функция УНФ_ВернутьКонтрагентаПоИНН_КПП (ИНН = "", КПП = "")
	
	Если ЗначениеЗаполнено(ИНН) И Строка(ИНН) <> "" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН";
		Если ЗначениеЗаполнено(КПП) И Строка(КПП) <> "" Тогда 
			Запрос.Текст = Запрос.Текст + "
			|	И Контрагенты.КПП = &КПП";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ИскКонт = Выборка.Контрагент;
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ИскКонт;
	
КонецФункции

Функция УНФ_ВернутьРеализацию(Заказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходнаяНакладная.Заказ КАК Заказ,
	|	РасходнаяНакладная.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Заказ = &Заказ
	|	И НЕ РасходнаяНакладная.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ИскРеализация = Документы.РасходнаяНакладная.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		ИскРеализация = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ИскРеализация;
	
КонецФункции

Функция УНФ_ВернутьДокументЗаказ(Идентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение,
	|	ДополнительныеСведения.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Значение = &Значение
	|	И ДополнительныеСведения.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Значение", Идентификатор);
	ЗаказПокупателяПредопределенное = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя;
	СвойствоЗаказов = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьСвойство("ИД", ЗаказПокупателяПредопределенное);
	Запрос.УстановитьПараметр("Свойство", СвойствоЗаказов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ИскДок = Документы.ЗаказПокупателя.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда 
			ИскДок = Выборка.Объект;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИскДок;
	
КонецФункции

Функция УНФ_ВернутьНоменклатуру(XmlID)
	
	ИскХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	// если нет # то это товар без характеристики
	Инд = СтрНайти(XmlID, "#");
	Если Инд = 0 Тогда
		Попытка
			Уид 				= Новый УникальныйИдентификатор(XmlID);
			ИскНоменклатура		= Справочники.Номенклатура.ПолучитьСсылку(Уид);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("RetailCRM"
									, УровеньЖурналаРегистрации.Ошибка
									,
									,
									, ОписаниеОшибки);
		КонецПопытки;
	Иначе 
		МассивЗначений = crm_RetailCRMОбщийВызовСервера.РазложитьСтрокуВМассивПодстрок(XmlID, "#");
		
		Если МассивЗначений.Количество() < 2 Тогда
			ОбщегоНазначения.СообщитьПользователю("Не возможно найти товар по id: " + XmlID);
			Возврат ИскХарактеристика;
		КонецЕсли;
		
		Попытка
			Уид 				= Новый УникальныйИдентификатор(МассивЗначений[0]);
			ИскНоменклатура		= Справочники.Номенклатура.ПолучитьСсылку(Уид);
			Уид2 				= Новый УникальныйИдентификатор(МассивЗначений[1]);
			ИскХарактеристика	= Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Уид2);
			
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("RetailCRM"
									, УровеньЖурналаРегистрации.Ошибка
									,
									,
									, ОписаниеОшибки);
		КонецПопытки;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИскХарактеристика", 		ИскХарактеристика);
	СтруктураВозврата.Вставить("ИскНоменклатура", 			ИскНоменклатура);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция УНФ_ВернутьДокументОплаты(Идентификатор, ТипДокументаОплаты)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
			|	ДополнительныеСведения.Свойство КАК Свойство,
			|	ДополнительныеСведения.Значение КАК Значение,
			|	ДополнительныеСведения.Объект КАК Объект
			|ИЗ
			|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|ГДЕ
			|	ДополнительныеСведения.Значение = &Значение
			|	И ДополнительныеСведения.Свойство = &Свойство");
	
	Если ТипДокументаОплаты  = "Поступление наличных денежных средств" Тогда
		
		Запрос.УстановитьПараметр("Свойство", Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьСвойство("ИДоплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ПоступлениеВКассу));
		
	ИначеЕсли ТипДокументаОплаты = "Поступление безналичных денежных средств" Тогда
		
		Запрос.УстановитьПараметр("Свойство", Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьСвойство("ИДоплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ПоступлениеНаСчет));
		
	КонецЕсли;
	Запрос.УстановитьПараметр("Значение", Строка(Формат(Число(Идентификатор), "ЧГ=0")));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ИскДок = Документы.ЗаказПокупателя.ПустаяСсылка();
	Если Выборка.Следующий() Тогда 
		ИскДок = Выборка.Объект;
	КонецЕсли;
	
	Возврат ИскДок;
	
КонецФункции   

Функция УНФ_ВернутьДокументПроизводство(Док)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
                  |	ЗаказНаПроизводство.Ссылка КАК Ссылка
                  |ИЗ
                  |	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
                  |ГДЕ
				  | ЗаказНаПроизводство.СостояниеЗаказа <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовНаПроизводство.Завершен)
                  |	И НЕ ЗаказНаПроизводство.ПометкаУдаления
                  |	И ЗаказНаПроизводство.ЗаказПокупателя = &ЗаказПокупателя");
	
	ДокументСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(док, "Ссылка");
	Запрос.УстановитьПараметр("ЗаказПокупателя", ДокументСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИскДок = Документы.ЗаказНаПроизводство.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		ИскДок = Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат ИскДок;
	
КонецФункции

Функция УНФ_ВернутьДокументВозврата(Док)
	Запрос = Новый Запрос("ВЫБРАТЬ
      |	ПриходнаяНакладная.Ссылка КАК Ссылка
      |ИЗ
      |	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
      |ГДЕ
      |	НЕ ПриходнаяНакладная.ПометкаУдаления
      |	И ПриходнаяНакладная.ДокументОснование = &ДокументОснование
      |	И ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)");
	
	ДокументСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(док, "Ссылка");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();  
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Документы.ПриходнаяНакладная.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Функция УНФ_ЗапросДляКаталога(Фильтр)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Ссылка,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	СУММА(ЕСТЬNULL(Запасы.КоличествоОстаток, 0)) КАК Остаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Номенклатура
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|	ГДЕ
	|		НЕ Номенклатура.ПометкаУдаления
	|	И НЕ Номенклатура.ЭтоГруппа";
	
	Если ЗначениеЗаполнено(Фильтр) Тогда 
		Запрос.Текст = Запрос.Текст + " 
		|		И Номенклатура.Родитель В ИЕРАРХИИ(&Родитель)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|СГРУППИРОВАТЬ ПО
	|		Номенклатура.Ссылка) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				ВидЦен = &ВидЦены
	|					" + ?(ЗначениеЗаполнено(Фильтр),"И Номенклатура.Родитель В ИЕРАРХИИ (&Родитель)", "") + ") КАК ЦеныНоменклатурыСрезПоследних
	| ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	| ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(, " + ?(ЗначениеЗаполнено(Фильтр),"Номенклатура.Родитель В ИЕРАРХИИ (&Родитель)", "") + ") КАК Запасы
	| ПО ВложенныйЗапрос.Номенклатура = Запасы.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)";
	
	Запрос.УстановитьПараметр("ВидЦены", crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ЗакупочнаяЦена"));
	Фильтр = ?(ЗначениеЗаполнено(Фильтр), Фильтр.ВыгрузитьКолонку("Номенклатура"), "");
	Запрос.УстановитьПараметр("Родитель", Фильтр);
	
	Рез = Запрос.Выполнить().Выгрузить();
	Возврат Рез;
	
КонецФункции

Функция УНФ_ЗапросДляКаталогаХарактеристики(Фильтр)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(Запасы.КоличествоОстаток, 0) КАК Остаток,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Номенклатура,
	|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|		Номенклатура.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Владелец, 1) КАК ВладелецХар
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО (ВЫБОР
	|					КОГДА Номенклатура.ИспользоватьХарактеристики
	|						ТОГДА Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	|					ИНАЧЕ Номенклатура.Ссылка = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) 
	|				КОНЕЦ)
	|	ГДЕ
	|		НЕ Номенклатура.ПометкаУдаления
	|		И НЕ Номенклатура.ЭтоГруппа";
	
	Если ЗначениеЗаполнено(Фильтр) Тогда 
		Запрос.Текст = Запрос.Текст + " 
		|		И Номенклатура.Родитель В ИЕРАРХИИ(&Родитель)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура.Ссылка,
	|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
	|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Владелец, 1),
	|		Номенклатура.ИспользоватьХарактеристики) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&ТекДата, " + ?(ЗначениеЗаполнено(Фильтр),"Номенклатура.Родитель В ИЕРАРХИИ (&Родитель)", "") + ") КАК Запасы
	|		ПО ВложенныйЗапрос.Номенклатура = Запасы.Номенклатура
	|			И ВложенныйЗапрос.Характеристика = Запасы.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ТекДата,
	|				ВидЦен = &ЗакупочнаяЦена
	|					" + ?(ЗначениеЗаполнено(Фильтр),"И Номенклатура В ИЕРАРХИИ (&Родитель)","") + ") КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ВложенныйЗапрос.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ЕСТЬNULL(Запасы.КоличествоОстаток, 0),
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Номенклатура.Наименование";
	
	ЗакупочнаяЦена = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ЗакупочнаяЦена");
	Запрос.УстановитьПараметр("ЗакупочнаяЦена", ЗакупочнаяЦена);
	Фильтр = ?(ЗначениеЗаполнено(Фильтр), Фильтр.ВыгрузитьКолонку("Номенклатура"), "");
	Запрос.УстановитьПараметр("Родитель", Фильтр);
	Запрос.УстановитьПараметр("ТекДата", ОбщегоНазначения.ТекущаяДатаПользователя());
	
	Рез = Запрос.Выполнить().Выгрузить();
	Возврат Рез;
	
КонецФункции

#КонецОбласти

#Область Инициализация
	УстановитьПривилегированныйРежим(Истина);
		ДатаРедакции = "01.02.2024";
		Версия = РасширенияКонфигурации.Получить(Новый Структура("Имя", "RetailCRMИнтеграция"))[0].Версия; 
		РелизКонф 	= Метаданные.Имя + " " + Метаданные.Версия;
		СистИнфо 	= Новый СистемнаяИнформация; 
		РелизПлафт 	= СистИнфо.ВерсияПриложения;
	УстановитьПривилегированныйРежим(Ложь);
#КонецОбласти