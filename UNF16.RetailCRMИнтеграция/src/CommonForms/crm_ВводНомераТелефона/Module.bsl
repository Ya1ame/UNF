#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗакрытьФорму = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(НомерТелефона) ИЛИ ЗначениеЗаполнено(IDКлиента) Тогда
		Если ТекущийЭлемент.Имя <> "ОК" И ТекущийЭлемент.Имя <> "РасчетБаллов" Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "IDКлиента, НомерТелефона, АдресТоваров");

	Элементы.РасчетБаллов.Доступность = ?(ЗначениеЗаполнено(IDКлиента), Истина, Ложь);
	
	ПЛНеСписыватьСоСкидками = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ПЛНеСписыватьСоСкидками");
	НеСписыватьСБонусами = ?(ПЛНеСписыватьСоСкидками = Неопределено, Ложь, ПЛНеСписыватьСоСкидками);
	
	ТабличнаяЧасть = ПолучитьИзВременногоХранилища(АдресТоваров);
	УдалитьИзВременногоХранилища(АдресТоваров);
	Товары.Загрузить(ТабличнаяЧасть);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоискПоТелефону(Команда)
	
	Попытка
		
		Если ЗначениеЗаполнено(НомерТелефона) Тогда
			ТелефонДляПроверки = УдалитьЛишниеСимволы(НомерТелефона);

			ТелефонДляПроверки = СокрЛП(ТелефонДляПроверки);
			
			Если СтрДлина(ТелефонДляПроверки) = 10 И Лев(ТелефонДляПроверки, 1) = "9" Тогда 
				ТелефонДляПроверки = "7" + ТелефонДляПроверки;
			КонецЕсли;
			
			Если Не СтрДлина(ТелефонДляПроверки) = 11 Тогда 
				ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнен телефон.");
				Возврат;		
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(НомерКарты) Тогда 
			НомерКарты = СокрЛП(НомерКарты);	
		Иначе 
			
			ОбщегоНазначенияКлиент.СообщитьПользователю("Введите номер телефона или номер карты клиента.");
			Возврат;
			
		КонецЕсли;
		
		ЗаполнитьФормуВыбораКлиента(ТелефонДляПроверки, НомерКарты);
		
	Исключение
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Ошибка, баллы не списаны!");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки()); 
		
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура РасчетБаллов(Команда)

	Попытка
		
		ТаблицаТоваров = Товары;
		АдресТоваров = ПоместитьВоВременноеХранилище(ТаблицаТоваров);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НомерТелефона", НомерТелефона);
		СтруктураПараметров.Вставить("НомерКарты", НомерКарты);
		СтруктураПараметров.Вставить("АдресТоваров", АдресТоваров);
		СтруктураПараметров.Вставить("IDКлиента", IDКлиента); 
		
		ДоступноДляСписания = Окр(СтруктураПараметров.Товары.Итог("Сумма"), 0, РежимОкругления.Окр15как10);
		БаллыКлиента = ПолучитьДоступныеБаллы(СтруктураПараметров);
		
		Если ДоступноДляСписания >= БаллыКлиента Тогда
			ДоступноДляСписания = БаллыКлиента;		
		КонецЕсли;
		
		Если НеСписыватьСБонусами = Истина Тогда
			Если ВладелецФормы.Объект.Запасы.Итог("СуммаСкидкиНаценки") <> 0 ИЛИ
					ВладелецФормы.Объект.Запасы.Итог("СуммаАвтоматическойСкидки") <> 0 Тогда
				
				ДоступноДляСписания = 0;
				
			КонецЕсли;
		КонецЕсли;

		СтруктураПараметров.Вставить("ДоступноДляСписания", ДоступноДляСписания);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьСписаниеБаллов", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.crm_РасчетБаллов"
					, СтруктураПараметров
					, ЭтотОбъект
					,
					,
					,
					, ОбработчикОповещения
					, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Исключение
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Ошибка, баллы не списаны!");
		ОписаниеОшибки = ОписаниеОшибки();
		ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("RetailCRM"
																	  , "Ошибка"
																	  , ОписаниеОшибки
																	  , ТекущаяДата
																	  , Истина);
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	Попытка
		
		Если ЗначениеЗаполнено(IDКлиента) Тогда
			СтруктураВозврата = Новый Структура;
			СтруктураВозврата.Вставить("НомерТелефона", НомерТелефона);
			СтруктураВозврата.Вставить("НомерКарты", НомерКарты);
			СтруктураВозврата.Вставить("IDКлиента", IDКлиента);
			СтруктураВозврата.Вставить("КоличествоДляСписания", 0);
			СтруктураВозврата.Вставить("ФИО", ФИО);
			
			Закрыть(СтруктураВозврата);
			
		КонецЕсли;
	
	Исключение
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Ошибка, баллы не списаны!");
		ОписаниеОшибки = ОписаниеОшибки();
		ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("RCRM"
																	  , "Ошибка"
																	  , ОписаниеОшибки
																	  , ТекущаяДата
																	  , Истина);
		
		Закрыть();
		
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьФормуВыбораКлиента(ТелефонДляПроверки, НомерКарты) Экспорт 
	
	Попытка
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Телефон", ТелефонДляПроверки);
		СтруктураПараметров.Вставить("НомерКарты", НомерКарты);
				
		ОбработчикОповещения = Новый ОписаниеОповещения("ВывестиДанныеУчастникаПЛ", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.crm_ВыборКлиента"
					, СтруктураПараметров
					, ЭтотОбъект
					,
					,
					,
					, ОбработчикОповещения
					, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Исключение
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Ошибка, баллы не списаны!");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки());
		
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиДанныеУчастникаПЛ(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт 
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда 

		КоличествоБонусов = РезультатОткрытияФормы.Баллы;
		Уровень = РезультатОткрытияФормы.Уровень;
		ФИО = РезультатОткрытияФормы.ФИО;
		ИДКлиента  = ?(РезультатОткрытияФормы.IDКлиента = "", 36587, РезультатОткрытияФормы.IDКлиента); 
		УчастникПЛ = РезультатОткрытияФормы.УчастникПЛ;
		
		МожноОплатить = Окр(КоличествоБонусов, 0, РежимОкругления.Окр15как10);
		Если Товары.Количество() Тогда
			МожноОплатить = Окр(Товары.Итог("Сумма"), 0, РежимОкругления.Окр15как10);		
		КонецЕсли;	

		Если МожноОплатить >= КоличествоБонусов Тогда
			МожноОплатить = КоличествоБонусов;		
		КонецЕсли;
		
		Если УчастникПЛ И КоличествоБонусов <> 0 Тогда 
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Товары", Товары);
			СтруктураПараметров.Вставить("IDКлиента", ИДКлиента);  
			
          	МожноОплатить = ПолучитьДоступныеБаллы(СтруктураПараметров);
			
			Если НеСписыватьСБонусами = Истина Тогда
				Если ВладелецФормы.Объект.Запасы.Итог("СуммаСкидкиНаценки") <> 0 ИЛИ
						ВладелецФормы.Объект.Запасы.Итог("СуммаАвтоматическойСкидки") <> 0 Тогда
					
					МожноОплатить = 0;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
						
		Элементы.ИнфоКлиента.Заголовок = 	
								"Клиент: " + ФИО + Символы.ПС + 
								"Количество бонусов: " + КоличествоБонусов + Символы.ПС +
								"Доступно для списания: " + МожноОплатить + Символы.ПС +
								"Уровень: " + Уровень;
		
		КоличествоБонусов = МожноОплатить;
		
		Если ЗначениеЗаполнено(РезультатОткрытияФормы.НомерКарты) Тогда 
			НомерКарты = РезультатОткрытияФормы.НомерКарты;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОткрытияФормы.ТелефонДляПроверки) Тогда
			НомерТелефона = РезультатОткрытияФормы.ТелефонДляПроверки;
		КонецЕсли;

		Если ЗначениеЗаполнено(ИДКлиента) Тогда 
			Элементы.РасчетБаллов.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьЛишниеСимволы(Телефон)
	
	ТелефонБезЛишнихСимволов = "";
	
	Счетчик = 1; 
	НачальнаяГраницаПроверки = 48;
	ЗаключительнаяГраницаПроверки = 57;	
	Пока Счетчик <= СтрДлина(Телефон) Цикл
		Символ = Сред(Телефон, Счетчик, 1);
		Если КодСимвола(Символ) >= НачальнаяГраницаПроверки И КодСимвола(Символ) <= ЗаключительнаяГраницаПроверки Тогда 
			ТелефонБезЛишнихСимволов = ТелефонБезЛишнихСимволов + Символ;			
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Возврат ТелефонБезЛишнихСимволов;	
	
КонецФункции

&НаСервере
Функция ПолучитьДоступныеБаллы(СтруктураПараметров)
		
	Если Не ЗначениеЗаполнено(СтруктураПараметров.IDКлиента) Тогда 
		ОбщегоНазначения.СообщитьПользователю("Клиент не определен");
	Иначе
		
		Переменные = Новый Соответствие();
		ИмяСервера 	= crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера");
		ApiKey		= crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM");
		КодМагазина = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КодМагазина");
		Offers_id	= crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("Offers_id");
		
		Переменные.Вставить("apiKey", ApiKey);
		Переменные.Вставить("site", КодМагазина);

		Заказ = Новый Соответствие();
		МассивТоваров = Новый Массив();
		
		ИдентификаторТовара = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
		Если ИдентификаторТовара = Неопределено ИЛИ Не ЗначениеЗаполнено(ИдентификаторТовара) Тогда 
			ИдентификаторТовара = "Код";
		КонецЕсли;

		Для Каждого стр Из СтруктураПараметров.Товары Цикл 
			
			товар = Новый Соответствие();
			СтруктураНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(стр.Номенклатура, 
																			"ИспользоватьХарактеристики, Код , Артикул");
			
			Если crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина И
														СтруктураНоменклатуры.ИспользоватьХарактеристики = Истина Тогда
				
				XmlID = СокрЛП(стр.Номенклатура.УникальныйИдентификатор());
				XmlID = ?(ЗначениеЗаполнено(стр.Характеристика), 
				XmlID + "#" + СокрЛП(стр.Характеристика.УникальныйИдентификатор()), XmlID);
				
			Иначе 
				
				Если ИдентификаторТовара = "Код" Тогда
					XmlID = СокрЛП(СтруктураНоменклатуры.Код);
				ИначеЕсли ИдентификаторТовара = "Артикул" Тогда
					XmlID = СокрЛП(СтруктураНоменклатуры.Артикул);
				ИначеЕсли ИдентификаторТовара = "GUID" Тогда
					XmlID = СокрЛП(стр.Номенклатура.УникальныйИдентификатор());	
				КонецЕсли;
			КонецЕсли;

			Offer = Новый Соответствие();

			Offer.Вставить(Offers_id,				crm_RetailCRMОбщийВызовСервера.Перекодировка(XmlID));
			товар.Вставить("offer",					Offer);		
			товар.Вставить("initialPrice",			стр.Цена);
			товар.Вставить("quantity",				стр.Количество);
			товар.Вставить("discountManualAmount",	стр.СуммаСкидкиНаценки);

			МассивТоваров.Добавить(товар);
			
		КонецЦикла;
		
		Заказ.Вставить("items", МассивТоваров);
		
		ДанныеКлиента = Новый Соответствие;
		ДанныеКлиента.Вставить("id", Формат(СтруктураПараметров.IDКлиента, "ЧГ=0"));
		
		Заказ.Вставить("customer", ДанныеКлиента);
		
		Переменные.Вставить("order", crm_RetailCRMОбщийВызовСервера.JSON(Заказ));

		Ответ = crm_RetailCRMОбщийВызовСервера.HTTPзапросPOST(ИмяСервера, "/api/v5/loyalty/calculate", Переменные);
		
		ДоступноДляСписания = 0;
		Если СтрНайти(Ответ, """success"":true") > 0 Тогда
			Ответ = crm_RetailCRMОбщийВызовСервера.UnJSONTest(Ответ);
			Если Ответ["calculations"].КОличество() <> 0 Тогда
				Для Каждого Привилегия Из Ответ["calculations"] Цикл
					Если Привилегия["maximum"] = Истина Тогда 
						ДоступноДляСписания = Привилегия["maxChargeBonuses"]; 
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		 		
	КонецЕсли;

	Возврат ДоступноДляСписания;
	  
КонецФункции

&НаКлиенте
Процедура ОбработатьСписаниеБаллов(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы <> Неопределено Тогда 
		РезультатОткрытияФормы.Вставить("ФИО", ФИО);
		Закрыть(РезультатОткрытияФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти