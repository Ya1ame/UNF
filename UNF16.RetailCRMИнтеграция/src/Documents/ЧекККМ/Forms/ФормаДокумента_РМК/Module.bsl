#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура crm_ПриОткрытииПосле(Отказ)
	
	Если crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("РаботаСРозницей") = Истина Тогда 
	
		Если crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ПрограммаЛояльностиРозница") = Истина Тогда
			Элементы.ПрограммаЛояльности.Видимость = Истина;
		Иначе 
			Элементы.ПрограммаЛояльности.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		
		Элементы.ПрограммаЛояльности.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура crm_ПрограммаЛояльностиПосле(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю("Необходимо внести сначала товары!");
		Возврат;
	КонецЕсли;
	
	Если Не Объект.СкидкиРассчитаны Тогда 
		ОчиститьСообщения();
		РассчитатьСкидкиНаценки(Неопределено);
	КонецЕсли;
	
	ТаблицаТоваров = Объект.Запасы;
	
	СтруктураПараметров = Новый Структура;
	АдресТабличнойЧасти = crm_ПоместитьТабличнуюЧастьВХранилище(ТаблицаТоваров);
	СтруктураПараметров.Вставить("АдресТоваров", АдресТабличнойЧасти);
	СтруктураПараметров.Вставить("НомерТелефона", Объект.crm_Телефон);
	СтруктураПараметров.Вставить("IDКлиента", Объект.crm_idКлиента);
		
	ОбработчикОповещения = Новый ОписаниеОповещения("crm_РассчитатьСкидкуПоПЛ" , ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.crm_ВводНомераТелефона"
				 , СтруктураПараметров
				 , ЭтотОбъект
				 ,
				 ,
				 ,
				 , ОбработчикОповещения
				 , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура crm_РассчитатьСкидкуПоПЛ(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт 

	Если РезультатОткрытияФормы <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(РезультатОткрытияФормы.НомерТелефона) Тогда
			ТелефонДляПроверки = crm_УдалитьЛишниеСимволы(РезультатОткрытияФормы.НомерТелефона);
			Объект.crm_Телефон = Число(ТелефонДляПроверки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОткрытияФормы.IDКлиента) Тогда 
			Объект.crm_idКлиента = РезультатОткрытияФормы.IDКлиента;
		КонецЕсли;    
		
		crm_ЗаменитьКлиента(РезультатОткрытияФормы);
		
		Если ЗначениеЗаполнено(РезультатОткрытияФормы.КоличествоДляСписания) Тогда 
			
			Объект.crm_СписаноБонусов = РезультатОткрытияФормы.КоличествоДляСписания; 		 
			БонуснаяКарта = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("БонуснаяКарта"); 
			
			crm_СоздатьДокументНачислениеИСписаниеБаллов(БонуснаяКарта, Объект.Контрагент, Объект.crm_СписаноБонусов);
			
			Объект.ДисконтнаяКарта = БонуснаяКарта; 
			
		КонецЕсли;
		
		crm_РассчитатьСкидкуПоПЛНаСервере(РезультатОткрытияФормы);

		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры
 
&НаСервере
Функция crm_УдалитьЛишниеСимволы(Телефон)
	
	ТелефонБезЛишнихСимволов = "";
	
	Счетчик = 1; 	
	Пока Счетчик <= СтрДлина(Телефон) Цикл
		Символ = Сред(Телефон, Счетчик, 1);
		Если КодСимвола(Символ) >= 48 и КодСимвола(Символ) <= 57 Тогда 
			ТелефонБезЛишнихСимволов = ТелефонБезЛишнихСимволов + Символ;			
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Возврат ТелефонБезЛишнихСимволов;	
	
КонецФункции

&НаСервере
Процедура crm_ЗаменитьКлиента(ДанныеПЛ) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);

	Контрагент = crm_RetailCRMОбщийВызовСервера.УНФ_ВернутьКонтрагентаПоID(Формат(Число(ДанныеПЛ.IDКлиента), "ЧГ=0"));

	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		Объект.Контрагент = Контрагент;
	    Объект.Договор = РаботаСКонтрагентамиУНФ.ПолучитьДоговорПоУмолчанию(Объект.Ссылка
	    																	, Объект.Контрагент
	    																	, Объект.Организация);

	Иначе
				
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		
		Контрагент.Наименование = ДанныеПЛ.ФИО;
		Контрагент.НаименованиеПолное = ДанныеПЛ.ФИО;
		Контрагент.Покупатель = Истина;
		Контрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо; 
		Контрагент.Комментарий = "создан в рамках ПЛ автоматически";
		
		Контрагент.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
		Контрагент.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
		Контрагент.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
		Контрагент.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
		Контрагент.ВестиРасчетыПоДоговорам = Истина;
		Контрагент.ВестиРасчетыПоДокументам = Истина;
		Контрагент.ВестиРасчетыПоЗаказам = Истина;
		Контрагент.ВестиУчетОплатыПоСчетам = Истина;

		Если Константы.ОграничиватьДоступНаУровнеЗаписей.Получить() Тогда
			Пользователь = Пользователи.ТекущийПользователь();
			Контрагент.ГруппаДоступа = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь
																				 , "ОсновнаяГруппаДоступаКонтрагентов");
		КонецЕсли;

		Контрагент.ВестиУчетОплатыПоСчетам = Истина;
					
		Попытка
			Контрагент.Записать();
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("RetailCRM"
									, УровеньЖурналаРегистрации.Ошибка
									,
									,
									, ОписаниеОшибки);
		КонецПопытки;
		
		СвойствоКлиента = Обработки.crm_RetailCRMОбработка.УНФ_ПолучитьСвойство("ИД"
										  , Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты);
		Обработки.crm_RetailCRMОбработка.УНФ_УстановитьСвойствоУОбъекта(Контрагент.Ссылка
														  				, СвойствоКлиента
														  				, Формат(Число(ДанныеПЛ.IDКлиента), "ЧГ=0"));  

		Объект.Контрагент = Контрагент.Ссылка;
		Объект.Договор = РаботаСКонтрагентамиУНФ.ПолучитьДоговорПоУмолчанию(Объект.Ссылка
																			   , Объект.Контрагент, Объект.Организация);
				
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура crm_РассчитатьСкидкуПоПЛНаСервере(ДанныеПЛ) Экспорт 
	
	Переменные = Новый Соответствие();
	ИмяСервера 	= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("ИмяСервера"));
	ApiKey		= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КлючCRM"));
	КодМагазина = СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("КодМагазина"));
	Offers_id	= СокрЛП(crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("offers_id"));
	
	Переменные.Вставить("apiKey", ApiKey);
	Переменные.Вставить("site", КодМагазина);
	
	Заказ = Новый Соответствие();
	МассивТоваров = Новый Массив();
		
	Для Каждого стр Из Объект["Запасы"] Цикл 
		
		товар = Новый Соответствие();
																			  
		XmlID = crm_RetailCRMОбщийВызовСервера.ИдентификаторТовара(стр);																  
		
		оффер = Новый Соответствие();
		оффер.Вставить(Offers_id,		crm_RetailCRMОбщийВызовСервера.Перекодировка(XmlID));
		товар.Вставить("offer",			оффер);		
		товар.Вставить("initialPrice",	стр.Цена);
		товар.Вставить("quantity",		стр.Количество); 
		
		Если стр.СуммаСкидкиНаценки <> 0 Тогда
			товар.Вставить("discountManualAmount",	стр.СуммаСкидкиНаценки);
		КонецЕсли;
		
		МассивТоваров.Добавить(товар);
		
	КонецЦикла;
	
	Заказ.Вставить("items", МассивТоваров);
	
	ДанныеКлиента = Новый Соответствие;
	ДанныеКлиента.Вставить("id", 	Формат(Число(ДанныеПЛ.IDКлиента), "ЧГ=0"));
	
	Заказ.Вставить("customer", 		ДанныеКлиента);
	
	Переменные.Вставить("bonuses", Формат(ДанныеПЛ.КоличествоДляСписания, "ЧРД=.; ЧГ=0"));
	Переменные.Вставить("order", crm_RetailCRMОбщийВызовСервера.JSON(Заказ));
	
	Ответ = crm_RetailCRMОбщийВызовСервера.HTTPзапросPOST(ИмяСервера, "/api/v5/loyalty/calculate", Переменные);
	
	Если СтрНайти(Ответ, """success"":true") > 0 Тогда
		Ответ = crm_RetailCRMОбщийВызовСервера.UnJSONTest(Ответ);
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("Номенклатура");
		ТаблицаТоваров.Колонки.Добавить("Количество");
		ТаблицаТоваров.Колонки.Добавить("Идентификатор");
		ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
				
		Для Каждого СтрТоваров Из Объект["Запасы"] Цикл
			
			СтрТЗ = ТаблицаТоваров.Добавить();
			СтрТЗ.Номенклатура 		= СтрТоваров.Номенклатура;
			СтрТЗ.Количество 		= СтрТоваров.Количество;
			СтрТЗ.Идентификатор 	= crm_RetailCRMОбщийВызовСервера.ИдентификаторТовара(СтрТоваров);
			СтрТЗ.НомерСтроки 		= СтрТоваров.НомерСтроки;
			
		КонецЦикла;
		
		КоличествоБонусныхБаллов = 0;
		
		Для Каждого стрТовар Из Ответ["order"]["items"] Цикл
			
			ИскСтрокиТЗ = ТаблицаТоваров.НайтиСтроки(Новый Структура("Идентификатор", стрТовар["offer"][Offers_id]));
			Для Каждого ИскСтрТЗ Из ИскСтрокиТЗ Цикл
				ИскСтрокиТЧ = Объект["Запасы"].НайтиСтроки(Новый Структура("НомерСтроки", ИскСтрТЗ.НомерСтроки));
				Для Каждого ИскСтрТЧ Из ИскСтрокиТЧ Цикл     
					ИскСтрТЧ.СуммаСкидкиОплатыБонусом = стрТовар["bonusesChargeTotal"];
					КоличествоБонусныхБаллов = КоличествоБонусныхБаллов + стрТовар["bonusesChargeTotal"];
					ИскСтрТЧ.Сумма = ИскСтрТЧ.Сумма - ИскСтрТЧ.СуммаСкидкиОплатыБонусом; 
				КонецЦикла;
			КонецЦикла;                                       
			
		КонецЦикла; 
		
		Объект.crm_БонусныеБаллыПЛ = КоличествоБонусныхБаллов;    
		БонуснаяКарта = crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("БонуснаяКарта");
		Если Объект.crm_БонусныеБаллыПЛ <> 0 Тогда
			
			НайдСтроки = Объект.БезналичнаяОплата.НайтиСтроки(Новый Структура("БонуснаяКарта", БонуснаяКарта));
			
			Если НайдСтроки.Количество() Тогда
				НовСтр = НайдСтроки[0];
			Иначе
				НовСтр = Объект.БезналичнаяОплата.Добавить();
			КонецЕсли;

			НовСтр.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Бонусы;
			НовСтр.БонуснаяКарта = БонуснаяКарта;
			НовСтр.СуммаБонусов = КоличествоБонусныхБаллов;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура crm_СоздатьДокументНачислениеИСписаниеБаллов(БонуснаяКарта, Партнер, НачислитьБонусы)
	
	БонуснаяПрограмма 	= crm_RetailCRMОбщийВызовСервера.ПолучитьЗначениеКонстанты("БонуснаяПрограмма");
	ОстатокКартыЛояльности = crm_ПолучитьОстатокПоКартеЛояльности(БонуснаяКарта);
	Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
	Если НачислитьБонусы = 0 Тогда
		Возврат;	
	КонецЕсли;   
		
	Если ОстатокКартыЛояльности.Начислено < 0 Тогда    
		
		НовыйДокумент = Документы.НачислениеСписаниеБонусныхБаллов.СоздатьДокумент();
		НовыйДокумент.БонуснаяПрограмма = БонуснаяПрограмма;
		НовыйДокумент.Дата				= ОбщегоНазначения.ТекущаяДатаПользователя();
		
		НовоеНачисление = НовыйДокумент.НачисленияБонусов.Добавить();
		НовоеНачисление.БонуснаяКарта 	= БонуснаяКарта;
		НовоеНачисление.Количество 		= -(ОстатокКартыЛояльности.КСписанию);
		Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
		НовоеНачисление.ДатаНачисления = Дата;
		
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);   

	КонецЕсли;  
	
	ОстатокКартыЛояльности = crm_ПолучитьОстатокПоКартеЛояльности(БонуснаяКарта);
	
	Если ОстатокКартыЛояльности.Начислено > 0 Тогда    
		
		НовыйДокумент = Документы.НачислениеСписаниеБонусныхБаллов.СоздатьДокумент();
		НовыйДокумент.БонуснаяПрограмма = БонуснаяПрограмма;
		НовыйДокумент.Дата				= ОбщегоНазначения.ТекущаяДатаПользователя();
		
		НовоеСписание = НовыйДокумент.СписанияБонусов.Добавить();
		НовоеСписание.БонуснаяКарта = БонуснаяКарта;
		НовоеСписание.Количество = ОстатокКартыЛояльности.Начислено; 
		
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);   
		
	КонецЕсли;         
	
	ОстатокКартыЛояльности = crm_ПолучитьОстатокПоКартеЛояльности(БонуснаяКарта);
	
	Если НачислитьБонусы > 0 Тогда    
		
		НовыйДокумент = Документы.НачислениеСписаниеБонусныхБаллов.СоздатьДокумент();
		НовыйДокумент.БонуснаяПрограмма = БонуснаяПрограмма;
		НовыйДокумент.Дата				= ОбщегоНазначения.ТекущаяДатаПользователя();
		
		НовоеНачисление = НовыйДокумент.НачисленияБонусов.Добавить();
		НовоеНачисление.БонуснаяКарта = БонуснаяКарта;
		НовоеНачисление.Количество = НачислитьБонусы;
		Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
		НовоеНачисление.ДатаНачисления = Дата;

		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);      
		
	КонецЕсли;        
	
КонецПроцедуры

&НаСервере
Функция crm_ПолучитьОстатокПоКартеЛояльности(БонуснаяКарта)
	
	Отбор = Новый структура;    
	Отбор.Вставить("БонуснаяКарта", БонуснаяКарта);
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Накопления = РегистрыНакопления.БонусныеБаллы.Остатки(ТекущаяДата, Отбор);
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Начислено", 0);
	СтруктураВозврата.Вставить("КСписанию", 0);
	
	Если Накопления.Количество() <> 0 Тогда
		СтруктураВозврата.Вставить("Начислено", Накопления[0].Начислено);
		Возврат СтруктураВозврата;
	КонецЕсли;  
			
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
&После("ИнициализироватьНовыйЧек")
Процедура crm_ИнициализироватьНовыйЧек(ВыдатьОкноУспешноПробит)
	
	Объект.crm_idКлиента 		= 0;
	Объект.crm_Телефон   		= 0;
	Объект.crm_idЧека    		= 0;
	Объект.crm_СписаноБонусов   = 0;
	Объект.crm_БонусныеБаллыПЛ  = 0;
	
КонецПроцедуры

&НаСервере
Функция crm_ПоместитьТабличнуюЧастьВХранилище(ТабличнаяЧасть)
	Возврат ПоместитьВоВременноеХранилище(ТабличнаяЧасть.Выгрузить());
КонецФункции

#КонецОбласти
