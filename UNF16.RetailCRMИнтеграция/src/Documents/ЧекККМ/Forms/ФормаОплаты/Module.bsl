
&НаСервере
Процедура crm_ПриСозданииНаСервереВместо(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если 1=0 Тогда
		ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект); // для проверки внедрения БСП
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Получим документ из РМК.
	ТекЗначение = ДанныеФормыВЗначение(Параметры.Объект, Тип("ДокументОбъект.ЧекККМ"));
	ЗначениеВРеквизитФормы(ТекЗначение, "Объект"); // Получим данные документа.
	
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	
	// Предопределенные значения
	ТипыДенежныхСредствБезналичные = Перечисления.ТипыДенежныхСредств.Безналичные;
	ТипыДенежныхСредствНаличные = Перечисления.ТипыДенежныхСредств.Наличные;
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	// Заполним временные реквизиты.
	СуммаДокумента = Параметры.СуммаДокумента;
	ВалютаДокумента = Параметры.ВалютаДокумента;
	КассаККМ = Параметры.КассаККМ;
	СформироватьТоварныйЧек = Параметры.СформироватьТоварныйЧек;
	
	// Подключаемое оборудование.
	ИспользоватьПодключаемоеОборудование = Параметры.ИспользоватьПодключаемоеОборудование;
	Объект.ЭквайринговыйТерминал = Параметры.ЭквайринговыйТерминал;
	ЭквайринговыйТерминалПриИзмененииНаСервере();
	
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПолучитьСсылкиНаОборудование();
	КонецЕсли;
	
	КонтрольНаСкладеОтключен = НЕ Константы.КонтролироватьОстаткиПриПроведении.Получить()
						   ИЛИ НЕ Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить();
	
	КассаККМИспользоватьБезПодключенияОборудования = КассаККМ.ИспользоватьБезПодключенияОборудования;
	
	Элементы.ГруппаШаблонКартыОплаты.Видимость = Ложь;
	Элементы.ГруппаШаблонСертификатаОплаты.Видимость = Ложь;
	
	// Кнопки командной панели.
	Элементы.ФормаПоказатьВсеРеквизитыШапки.Видимость = ЭтоМобильныйКлиент;
	Элементы.ФормаПрименитьРучнуюСкидку.Видимость = Ложь;
	
	ЗначенияЗаполнения = РабочееМестоКассираВызовСервера.ПолучитьТерминалПоУмолчанию(Объект.КассаККМ);
	Если ЗначенияЗаполнения.КоличествоЭквайринговыхТерминалов = 1 Тогда
		Объект.ЭквайринговыйТерминал = ЗначенияЗаполнения.ЭквайринговыйТерминал;
		ЭквайринговыйТерминалПриИзмененииНаСервере();
		Элементы.ЭквайринговыйТерминал_МК.Видимость = Ложь;
		ДоступенОдинТерминал = Истина;
	КонецЕсли;
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	
	// Обработка карт.
	Если ЭтоМобильныйКлиент Тогда
		ИнициализироватьДанныеОСуммахОплатыНаСервере();
		
		// Дисконтная карта.
		Элементы.ГруппаБонусы.Видимость = Ложь;
		Если НЕ Объект.ДисконтнаяКарта.Пустая() Тогда
			ВыбранаДисконтнаяКартаДополнительноНаСервере();
		КонецЕсли;
	Иначе
		КоличествоКартВДокументе = Параметры.БезналичнаяОплата.Количество();
		Если КоличествоКартВДокументе = 0 И Не ЗначениеЗаполнено(ЭквайринговыйТерминал) И КоличествоТерминаловПоКассе() = 1 Тогда
			Элементы.ГруппаКалькуляторИНомерКарты.Доступность = Истина;
			ДобавитьКартуНаСервере();
			КоличествоКартДляЗаголовка = 0;
		Иначе
			Элементы.ГруппаКалькуляторИНомерКарты.Доступность = Ложь;
			Если КоличествоКартВДокументе = 0 Тогда
				Элементы.НадписьТекущееПолеВвода.Видимость = Ложь;
			Иначе
				Для каждого СтрокаОплатыКартой Из Объект.БезналичнаяОплата Цикл
					НоваяСтрока = ВременнаяТаблицаКарт.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплатыКартой);
					Если СтрокаОплатыКартой.ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта Тогда
						ДобавитьКартуНаСервере(НоваяСтрока);
					ИначеЕсли СтрокаОплатыКартой.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат Тогда
						ДобавитьСертификатНаСервере(НоваяСтрока);
					//Radis	
					ИначеЕсли СтрокаОплатыКартой.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Бонусы Тогда
						Идентиф = ВременнаяТаблицаКарт.Индекс(НоваяСтрока);
						СписатьБаллыНаСервере(Идентиф);
						РаспределитьОплатуБонусамиНаСервере();
					КонецЕсли;
					//Radis
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ОсталосьОплатить = СуммаДокумента - ВременнаяТаблицаКарт.Итог("Сумма") - Объект.Предоплата.Итог("СуммаРасчетов");
	КонецЕсли;
	
	Элементы.ПолученоНаличными.СписокВыбора.Очистить();
	Элементы.ПолученоНаличными.СписокВыбора.Добавить(ОсталосьОплатить, ""+ОсталосьОплатить+" "+ВалютаДокумента);
	
	КоличествоСимволовПослеЗапятой = 2;
	ПервыйВвод = Истина;
	
	// Установка сочетания клавиш
	Для Сч = 0 По 9 Цикл
		Элементы["Кнопка"+Сч].СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша["Num"+Сч], Ложь, Истина, Ложь);
	КонецЦикла;
	Элементы.РазделительДробнойЧасти.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.NumDecimal, Ложь, Истина, Ложь);
	Элементы.Сбросить.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.BackSpace, Ложь, Истина, Ложь);
	
	Для Каждого ПодчиненныйЭлемент Из Элементы.ГруппаКартыОплаты.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Доступность = ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Или (СтрНайти(ПодчиненныйЭлемент.Имя, "Сертификат") > 0);
	КонецЦикла;
	
	// Блокировка.
	Если Не Объект.Ссылка.Пустая() И Параметры.Свойство("ИдентификаторФормы") Тогда
		Попытка
			РазблокироватьДанныеДляРедактирования(Объект.Ссылка, Параметры.ИдентификаторФормы);
			ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка, , УникальныйИдентификатор); // Блокировка будет снята при закрытии формы.
		Исключение
			//
		КонецПопытки;
	КонецЕсли;
	
	УстановитьВидимостьОтправкиЭлектронныхЧеков();
	
	// Автоматические скидки.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		Если Объект.СкидкиРассчитаны И Параметры.СуммаДоРасчетаАвтоСкидок <> Объект.Запасы.Итог("Всего") Тогда
			Элементы.НадписьАвтоСкидкиРассчитаны.Заголовок = НСтр("ru = '(автоскидки рассчитаны)'");
		Иначе
			Элементы.НадписьАвтоСкидкиРассчитаны.Заголовок = "";
		КонецЕсли;
	Иначе
		Элементы.НадписьАвтоСкидкиРассчитаны.Заголовок = "";
	КонецЕсли;
	
	УстановитьВидимостьКнопокСНоминалом();
	
	// Взаиморасчеты
	ВариантЗаполненияРасшифровкиПросмотр = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Просмотр");
	ВариантЗаполненияРасшифровкиВручную = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Вручную");
	ВзаиморасчетыПриСозданииНаСервере();
	
	УстановитьВидимостьДоговора();
	
	// РаспределениеПродаж
	РаспределениеПродажПриСоздании();
	// Конец РаспределениеПродаж
	
	// Форма оплаты.
	УстановитьВидимостьПриСозданииПоВидуКлиента();
	
	ОбновитьКартинкуВидаСкидки();
КонецПроцедуры
